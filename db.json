{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"729b899de246fe7a1e2e08f6bd02c2d65b9cefad","modified":1651797056259},{"_id":"source/CNAME","hash":"babc79ac946f9c86318d34809fffe251ce461948","modified":1597717558808},{"_id":"themes/next/.DS_Store","hash":"0aac15a7e6c46a51baa35310e078e48a5d99a7af","modified":1635228614876},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1597717558814},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1597717558814},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1597717558815},{"_id":"themes/next/.all-contributorsrc","hash":"e32dc4075e304af04b98d0726d489081bea722c0","modified":1597717558813},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1597717558814},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1597717558814},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1597717558815},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1597717558815},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1597717558815},{"_id":"themes/next/bower.json","hash":"1c22c2003163799cb919f8e9dc1e3d20bd79151d","modified":1597717558816},{"_id":"themes/next/README.md","hash":"ee7119baf976616a84d3c9c10fcab567995dc98e","modified":1597717558816},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1597717558817},{"_id":"themes/next/_config.yml","hash":"3936d1e4fec1340843f903c2bbbbe2dcb1c8f6fb","modified":1651735386667},{"_id":"themes/next/package.json","hash":"f86ddeeddc0b5c6aff7de1e0101b1f64e7f29476","modified":1597717558839},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1597717558821},{"_id":"source/tags/index.md","hash":"e0ae1fce9691b5f9fc00ac6836db992bfdd75f4c","modified":1597717558813},{"_id":"source/_posts/2018年终总结.md","hash":"59515569be32407d96de3f0f6f0f3be66a48d1c1","modified":1597717558808},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1648195653407},{"_id":"source/_posts/Android厂商推送冲突了.md","hash":"bd0ec376c62e1a1995d9ef675cfe8a48e743ea3d","modified":1637158992166},{"_id":"source/_posts/2019年终总结.md","hash":"380e52eb3c4341784772091744253af5c50413c8","modified":1635746805003},{"_id":"source/_posts/Kotlin中使用data class的代价.md","hash":"ff09486e442c3c1d3058dad0dcdc9eda85722ed1","modified":1597717558809},{"_id":"source/_posts/Android面试题集锦.md","hash":"f15d7c4410c6353cebd9f3878044fda1edf8f649","modified":1597717558809},{"_id":"source/_posts/Kotlin混合开发上.md","hash":"1b86948709fb7d2d98b320fa176ee01248462e5f","modified":1597717558809},{"_id":"source/_posts/RSA加密(一) 密码学基础.md","hash":"dafea0ab5db4204d6bda7e6d273d98f79a6ef9b5","modified":1597717558809},{"_id":"source/_posts/RSA加密(二) 加密过程.md","hash":"e1181b1e4a3501cac724669cd192ac82bf1a925a","modified":1597717558810},{"_id":"source/_posts/RSA加密(三) 加密原理.md","hash":"494020d23be0dc13cf592c888e71e767544efd91","modified":1597717558810},{"_id":"source/_posts/二维码为何长这个样子.md","hash":"618358f1825ee3755ca894619d1025b58316c81d","modified":1597717558810},{"_id":"source/_posts/kotlin混合开发下.md","hash":"78b0eeb917fe58242fee0ba80b364ea788ac01fb","modified":1597717558810},{"_id":"source/_posts/全景北京.md","hash":"9d4f241db730d3c40ae55832f807d982cd6cef93","modified":1597717558810},{"_id":"source/_posts/写给自己.md","hash":"6f73a743f25a2bbbedce0b8d53bc18cca617cfdc","modified":1597717558811},{"_id":"source/_posts/十一苏州行.md","hash":"d965f5650d203bfc7958e156c3bd771cbc3aabc8","modified":1597717558811},{"_id":"source/_posts/博客搭建之路.md","hash":"4fb89f520d8df725932a305b5c08d12dfd2b95eb","modified":1597717558811},{"_id":"source/_posts/我有20张照片想和你分享.md","hash":"3b0f4c6050e2cde2173fad3af96e9a4b83bb08f1","modified":1597717558811},{"_id":"source/_posts/我记忆中的武汉.md","hash":"970b3677d0483914f136d698c9c0bfa009bf18f5","modified":1597717558812},{"_id":"source/_posts/来聊聊我的新博客.md","hash":"c52548cfc53d904a0399976d424c15fe1acdaba3","modified":1597717558812},{"_id":"source/_posts/研发管理（二）Jira实现基本功能.md","hash":"b1f5a70c4ca8914136a1e5601ece0b4d1a80044f","modified":1651797148741},{"_id":"source/_posts/浅谈Android内存优化.md","hash":"29da67122b22a72ed45e17ca19bafae475752de4","modified":1597717558812},{"_id":"source/_posts/神奇的黄金分割比.md","hash":"284618a0f0cc0cb44daf5f9e2dc4cdd39d2ac31d","modified":1597717558813},{"_id":"source/_posts/我想和你分享的照片2019.md","hash":"93c7b10fdce3c0ec6d6784e8042365b8e459087b","modified":1635747578175},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1597717558814},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1597717558814},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1597717558815},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1597717558815},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1597717558815},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1597717558815},{"_id":"source/_posts/港岛开卡记（上）.md","hash":"8566458c6ac6600d631ee10c1ec0e5dfc7b12c12","modified":1646705446479},{"_id":"source/_posts/研发管理-一-从现状到JIRA.md","hash":"81cba6551a2c61faba39f92e5c23cabba129f565","modified":1649234952035},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1597717558817},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1597717558817},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1597717558818},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1597717558818},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1597717558818},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1597717558818},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1597717558818},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1597717558818},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1597717558817},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1597717558821},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1597717558822},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1597717558822},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1597717558822},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1597717558822},{"_id":"themes/next/languages/ja.yml","hash":"e331b15b1fda0f2285d25853f834682ab8dc3c39","modified":1597717558822},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1597717558822},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1597717558823},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1597717558823},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1597717558823},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1597717558823},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1597717558824},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1597717558823},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1597717558824},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1597717558824},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1597717558824},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1597717558823},{"_id":"themes/next/layout/_layout.swig","hash":"4b7a12e8acbfd782301eb30dbd4c85056a0a9ff7","modified":1597717558825},{"_id":"themes/next/layout/.DS_Store","hash":"8478951997d499d427f738b32dca947b5877cb8f","modified":1635231686543},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1597717558838},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1597717558838},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1597717558838},{"_id":"themes/next/layout/page.swig","hash":"862b361852fb6d7a95bfb6077922410a33cd3126","modified":1597717558839},{"_id":"themes/next/layout/post.swig","hash":"318249db246a57e9422875a2457c6acfce974ba5","modified":1597717558839},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1597717558840},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1597717558839},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1597717558839},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1597717558840},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1597717558870},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1597717558870},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1597717558871},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1597717558857},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1597717558819},{"_id":"themes/next/docs/ru/README.md","hash":"c54e256ed11a84ee38f755d6f35a3e6e29a91dbc","modified":1597717558819},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1597717558819},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1597717558819},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1597717558820},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1597717558820},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1597717558820},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1597717558820},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1597717558820},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"8ac2f5d2a023211d8d8ea626cbf6b8dea67ac201","modified":1597717558821},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1597717558820},{"_id":"themes/next/docs/zh-CN/README.md","hash":"aa6808f4f587c1a97205fa9427ba96a366bcb288","modified":1597717558821},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1597717558821},{"_id":"themes/next/layout/_partials/comments.swig","hash":"dce2938bb54c3cef3319f09f2621b93bc41117a0","modified":1597717558826},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1597717558828},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1597717558826},{"_id":"themes/next/layout/_partials/footer.swig","hash":"97a3bde3902a6a46228704ad08245ce877ac1e46","modified":1635228694666},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1597717558828},{"_id":"themes/next/layout/_partials/post-copyright.swig","hash":"2f73cc9ffb63534f0b6d8f0e9ee853c1af1b1244","modified":1597717558828},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1597717558825},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"82f9e238bac68dfe592915631d1ff0cca7b9da95","modified":1597717558825},{"_id":"themes/next/layout/_macro/reward.swig","hash":"64d65d9ad0cc94734ac6ded279e2b5dc870a1cab","modified":1597717558826},{"_id":"themes/next/layout/_macro/post.swig","hash":"225db2f98a9f08b713d24994cf989880618438eb","modified":1597717558826},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1597717558833},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e495523780dbdf6228d933c25bb28bcf4c0952f5","modified":1597717558826},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1597717558826},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1597717558835},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1597717558835},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"c0f6f02d7d7eb20eb216003c6cfb4ea52060f791","modified":1597717558835},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1597717558836},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1597717558836},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"def2736c8c10170712ff36dea220243b0c1858af","modified":1597717558836},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1597717558836},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1597717558836},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1597717558837},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1597717558824},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1597717558824},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1597717558825},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1597717558829},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1597717558829},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f380a10c792411eff82204305b097a288ed0b423","modified":1597717558831},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1597717558830},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1597717558840},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"15582e823d228c0b2288543c1eb460c40afad29b","modified":1597717558840},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1597717558841},{"_id":"themes/next/scripts/tags/exturl.js","hash":"7ded3e7a78380b32de3e12f156e0978ef5c2890a","modified":1597717558841},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1597717558841},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1597717558841},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"981e01aaf45a1f0f23ce0796d03134f9e437aaca","modified":1597717558841},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1597717558841},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1597717558842},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1597717558842},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1597717558842},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1597717558857},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1597717558858},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1597717558858},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1597717558858},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1597717558858},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1597717558858},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1597717558858},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1597717558859},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1597717558859},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1597717558859},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1597717558859},{"_id":"themes/next/source/images/logo.png","hash":"ecfd638922ed3ee81cdbf8528dde23db8aa3110f","modified":1597717558859},{"_id":"themes/next/source/images/logo.svg","hash":"ff03bd8d089985fdfea8a900337b1d5e7fd8e4ff","modified":1597717558859},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1597717558859},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1597717558860},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1597717558860},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1597717558860},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1597717558830},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1597717558830},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1597717558853},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1597717558853},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1597717558853},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1597717558857},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1597717558857},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1597717558827},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1597717558827},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1597717558827},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1597717558827},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1597717558828},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1597717558827},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1597717558827},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1597717558828},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1597717558828},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1597717558829},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1597717558828},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1597717558825},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"495fb08875b2e1e04f9c4f3e9e593cdf5c32cc31","modified":1597717558825},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1597717558829},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1597717558829},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1597717558829},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1597717558831},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1597717558831},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"0b4c8b60d43e2221a76c6e2488c239faecc5a947","modified":1597717558831},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1597717558831},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1597717558831},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1597717558832},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1597717558832},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1597717558832},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5dbeb640707a9c91357e373b9063a48c8e78f439","modified":1597717558832},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1597717558832},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1597717558833},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1597717558833},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1597717558833},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1597717558833},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1597717558834},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"03ef008bc95e8e83232e5464a6c63d6157d33a5e","modified":1597717558834},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"c4adbde0ef775e475146fbeb2be03568e16a1c73","modified":1597717558834},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1597717558834},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"9809d63a4234c5f268ff0b489579149b849728fc","modified":1597717558834},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"2c74a96dd314e804d801f8773ac1b2e0a970fce3","modified":1597717558834},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1f91120e40224370b6ccafe3c1193e60dd0d477e","modified":1597717558835},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1597717558835},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"15cae4ebac6e86fe22cf1eb3034be4d5049b410b","modified":1597717558836},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1597717558835},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1597717558837},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1597717558837},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1597717558837},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1597717558838},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1597717558830},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1597717558830},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1597717558830},{"_id":"themes/next/scripts/filters/after_post_render/exturl.js","hash":"9c9f61b7bfb3349b03b1e61355f20232044b5fd8","modified":1597717558840},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1597717558852},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"086f5979b3de091c3378512e6c5c2f8fcb4f6298","modified":1597717558853},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1597717558856},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1597717558857},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1597717558853},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1597717558853},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1597717558857},{"_id":"themes/next/source/css/_variables/base.styl","hash":"46786dd453f0a1381150b74e4fcb112ab348def6","modified":1597717558857},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1597717558860},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1597717558860},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1597717558860},{"_id":"themes/next/source/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1597717558861},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1597717558861},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1597717558861},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1597717558861},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1597717558861},{"_id":"themes/next/source/js/src/utils.js","hash":"28a79d317b7f4012917a54cac770551596bf6241","modified":1597717558862},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1597717558861},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1597717558862},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1597717558862},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1597717558862},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1597717558862},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1597717558862},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1597717558869},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1597717558870},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1597717558870},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1597717558867},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1597717558837},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1597717558837},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1597717558843},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b4a2f1d031fe44452cf55ded8211cf018235073a","modified":1597717558842},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1597717558842},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1597717558843},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1597717558843},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1597717558846},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1597717558849},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1597717558851},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"ec2a62400642bb69edd9259e74e8f1c8ed53c42b","modified":1597717558852},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1597717558852},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1597717558852},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1597717558852},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"efc40a32487e0ac7b94b1ca81bdbdcc4ec8f2924","modified":1597717558852},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"02d138ed65060e98f20bc5b1dd59a791222b7156","modified":1597717558852},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"665b1813a1d6fbc3c5549a76e4f26cd62a804dde","modified":1597717558853},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1597717558854},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1597717558853},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1597717558854},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fe2dc74726a515549956d233becda188da64f948","modified":1597717558854},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1597717558854},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1597717558854},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1597717558854},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1597717558854},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"936132428a0d35b3947ccedd4c379940abcf223a","modified":1597717558855},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1597717558855},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1597717558855},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1597717558855},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1597717558856},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1597717558855},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1597717558855},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"74c7dccf0a3ee9fc2ca25ad8e998243191813a0e","modified":1597717558856},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"f26860978fc4e011758945db5d0f79105ac84fae","modified":1597717558856},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1597717558856},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1597717558856},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"72037e8c4202a73b0c6ff7d81b57cd349e836837","modified":1597717558861},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1597717558863},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1597717558863},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1597717558863},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1597717558867},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1597717558867},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1597717558866},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1597717558843},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1597717558843},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1597717558843},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"05e68adae13f4d99a6ac6493daab39c92e39a6bd","modified":1597717558844},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1597717558844},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1597717558844},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"a1eeceea4b88fba184408cb2507bbef1f5e7b0e0","modified":1597717558845},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1597717558845},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1597717558845},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1597717558845},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f2911a048e5c20ca2a059bd1087d98ac1c51681c","modified":1597717558845},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1597717558845},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1597717558844},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"a6dc3c7eb81ef5117c28fa2245fff1adc02d0292","modified":1597717558844},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1597717558845},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"d04b90a06da84e7ba8f0b8e8529e3cdc4ee016ae","modified":1597717558846},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3b5a37ba5e70f92c1ee707c8053524e38adbb710","modified":1597717558846},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1597717558846},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1597717558846},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1597717558846},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ae2ff8667d38f34b3933ff879e377857bdf7e846","modified":1597717558846},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1597717558843},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1597717558847},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1597717558847},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1597717558847},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1597717558847},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1597717558847},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1597717558846},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"3039df53b94b0847b0c451d2d227270b479cc184","modified":1597717558847},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1597717558848},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"e18b90c97aaff027e795f5a0cb10476a71bf1c3a","modified":1597717558848},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"b34bb2ea4d16e47e6fdc06cd4feb32d93ccbd779","modified":1597717558848},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1597717558847},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1597717558848},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1597717558849},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1597717558849},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1597717558848},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1597717558849},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"549a8a0b5301d32acd86a97f17340cdfcd46fb63","modified":1597717558847},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1597717558849},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1597717558849},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1597717558849},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1597717558850},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1597717558850},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1597717558850},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1597717558850},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"5e340ee2407a4e39cd708794cfcc718a5f398d7b","modified":1597717558850},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1597717558847},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1597717558848},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1597717558850},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1597717558850},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1597717558851},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1597717558850},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1597717558851},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1597717558851},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1597717558851},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1597717558851},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"fcb8d1f2cffaa418b7c471e0238e101ea0025d0e","modified":1597717558851},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1597717558851},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1597717558854},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1597717558854},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1597717558855},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1597717558865},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1597717558869},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1597717558865},{"_id":"public/leancloud_counter_security_urls.json","hash":"79a8479a50dc163826e0c25f1e358d3b385c80e2","modified":1651797160486},{"_id":"public/tags/index.html","hash":"5a24c37e5c7c5d579533eb23a32d8d8cbbc9ff66","modified":1651797160506},{"_id":"public/archives/page/3/index.html","hash":"f3e30be6b1d22a9c4d535bed33b8c0509ad911ce","modified":1651797160506},{"_id":"public/archives/2018/index.html","hash":"aea79e61ceba7acb75efdd6f7ee9786ed7734081","modified":1651797160506},{"_id":"public/archives/2018/12/index.html","hash":"2ec859b3b36351e10f14e28eb831d8d39c3bf9c4","modified":1651797160506},{"_id":"public/archives/2019/page/2/index.html","hash":"210b967c0de5c9338a74d04928857fe1f10c6437","modified":1651797160506},{"_id":"public/archives/2019/01/index.html","hash":"e4da7f9483a4eda10b8683f02dfab981d599e97d","modified":1651797160506},{"_id":"public/archives/2019/02/index.html","hash":"9dae2cdf77eea0ea3c8ee64c28785516f1b81ea2","modified":1651797160506},{"_id":"public/archives/2019/04/index.html","hash":"2a6281836d9e78fb6f62e7dd97ca8e1839cde3ed","modified":1651797160506},{"_id":"public/archives/2019/03/index.html","hash":"9f978455e21b2fd9ebe88463b3c2fdad63862212","modified":1651797160506},{"_id":"public/archives/2019/07/index.html","hash":"3331865539daf2a924d927c897cea2ecf27aee8b","modified":1651797160507},{"_id":"public/archives/2019/08/index.html","hash":"3ca16c951f3b364bba64670a6a9b9323831eb032","modified":1651797160507},{"_id":"public/archives/2019/09/index.html","hash":"4f68a34d08564c6ea81fc1f54b4ea774d5f783c1","modified":1651797160507},{"_id":"public/archives/2019/10/index.html","hash":"02661011d3907144ff0b10ec917d8a1c82487e47","modified":1651797160507},{"_id":"public/archives/2019/12/index.html","hash":"5277e5e122e922c820d3b503a321d7006bf083ff","modified":1651797160507},{"_id":"public/archives/2020/index.html","hash":"8026f8e7a1997818602a3dcb662f29c3e6a366f1","modified":1651797160507},{"_id":"public/archives/2020/01/index.html","hash":"e05ece52ce27762c2d5ad767ad04c8afc32ca004","modified":1651797160507},{"_id":"public/archives/2020/03/index.html","hash":"c738631adaa5d7c81e038513741816b5fc16ced2","modified":1651797160507},{"_id":"public/archives/2022/index.html","hash":"14d5f8d992c49e29c115018bbc09618ccc32bc5e","modified":1651797160507},{"_id":"public/archives/2022/03/index.html","hash":"8d65035610a43b21469cbc92f3f10e8ca96cd7dc","modified":1651797160507},{"_id":"public/tags/生活/index.html","hash":"73f03d71828975bb4706cb561e645f203a532bb8","modified":1651797160507},{"_id":"public/archives/2022/05/index.html","hash":"dd93cd2b093caf2b1cb6d501d08153f9a8072647","modified":1651797160507},{"_id":"public/tags/科技/index.html","hash":"d012c8d419c700983ac43d1e02f43f21e0b87a98","modified":1651797160507},{"_id":"public/tags/摄影/index.html","hash":"df9eff18554630ef54159ee26da8386d132645a8","modified":1651797160507},{"_id":"public/tags/Jira/index.html","hash":"d4c5f1c56dbdb137766b7b642161d25d8d46e749","modified":1651797160507},{"_id":"public/2022/05/06/研发管理（二）Jira实现基本功能/index.html","hash":"ac56623939815ab48368f18ca047265732331a98","modified":1651797160507},{"_id":"public/2022/03/07/研发管理-一-从现状到JIRA/index.html","hash":"7998270914c1257abb0b04515e8d96027b050c14","modified":1651797160507},{"_id":"public/2020/03/21/Android厂商推送冲突了/index.html","hash":"a13750364e316b6b7a26311a88a07eacb35055a3","modified":1651797160507},{"_id":"public/2020/01/27/我记忆中的武汉/index.html","hash":"73680198e8843f0ed84bfa4816cf533efda31716","modified":1651797160507},{"_id":"public/2020/01/24/我想和你分享的照片2019/index.html","hash":"30a94c7acf5493e4f8c5372de15952250199b022","modified":1651797160508},{"_id":"public/2020/01/24/Kotlin中使用data class的代价/index.html","hash":"ffb68a1199cefc9ea50a149bef09fa7b2484dd9d","modified":1651797160508},{"_id":"public/2019/12/31/2019年终总结/index.html","hash":"15d9faeceda0f3c2b606de0f932a83b96dc2fc8d","modified":1651797160508},{"_id":"public/2019/12/07/Android面试题集锦/index.html","hash":"e732a99def5d2645eb937b759fafbe32fdb398f1","modified":1651797160508},{"_id":"public/2019/10/10/十一苏州行/index.html","hash":"e6c56ee03aa29373f1de36989a478fb9c790e839","modified":1651797160508},{"_id":"public/2019/09/26/RSA加密(三) 加密原理/index.html","hash":"1bfa5421d998568c8c46c81e615d09099bcabdfe","modified":1651797160508},{"_id":"public/2019/09/16/RSA加密(二) 加密过程/index.html","hash":"519205947578a9848d438d68d6f608c8c5daa100","modified":1651797160508},{"_id":"public/2019/08/17/RSA加密(一) 密码学基础/index.html","hash":"c637d94d1952c3d5ad053d286e1745e238ade58f","modified":1651797160508},{"_id":"public/2019/07/24/神奇的黄金分割比/index.html","hash":"946e9c353942054514c496e711f349d268a884c1","modified":1651797160508},{"_id":"public/2019/07/20/写给自己/index.html","hash":"a9b10691a2f20b8e86484ef9361f9de1798d2cbb","modified":1651797160508},{"_id":"public/2019/07/20/kotlin混合开发下/index.html","hash":"eab330f7598793e1d5aeaf91646f271815a05d1c","modified":1651797160508},{"_id":"public/2019/04/30/Kotlin混合开发上/index.html","hash":"0b2e26f01d9a68d00bb1312256469ca0aaf62b6d","modified":1651797160508},{"_id":"public/2019/04/13/全景北京/index.html","hash":"bd7ad5f33ca191d34a70d90f2b09e43b5830a081","modified":1651797160508},{"_id":"public/2019/03/23/港岛开卡记（上）/index.html","hash":"c360533315b58faee453b5aa0fd33be84ab82574","modified":1651797160508},{"_id":"public/2019/02/03/我有20张照片想和你分享/index.html","hash":"30a9c25c4b9d6ee51c340314f1a61e07c8953270","modified":1651797160509},{"_id":"public/2019/01/11/浅谈Android内存优化/index.html","hash":"b02e18e7314635b57ef1940374a53d7f1211b530","modified":1651797160509},{"_id":"public/2018/12/31/2018年终总结/index.html","hash":"78d0f01fc68700584138abfc0eea5b6f3a9a026a","modified":1651797160509},{"_id":"public/2018/12/25/二维码为何长这个样子/index.html","hash":"172a2c3080331f3145aaf0d56c6d3887babde007","modified":1651797160509},{"_id":"public/2018/12/22/博客搭建之路/index.html","hash":"3d30e566f1c8f48c1ea113c730f918974dd398a7","modified":1651797160509},{"_id":"public/2018/12/05/来聊聊我的新博客/index.html","hash":"552c3ae605e2ed4eb6f2e5c983d32e4f0fbb1f3c","modified":1651797160509},{"_id":"public/archives/index.html","hash":"08c6f459306bda0bfa781e1c50f2e5f3b0f16bda","modified":1651797160509},{"_id":"public/archives/page/2/index.html","hash":"868bc851b34504c14bb6011f9c3b9234211f5cfb","modified":1651797160509},{"_id":"public/archives/2019/index.html","hash":"27741ad51792d82829745971d0d461f9fef3ccb4","modified":1651797160509},{"_id":"public/tags/技术/index.html","hash":"f877460325060462182374102e51fc1f6c39b071","modified":1651797160509},{"_id":"public/page/2/index.html","hash":"84d224354bb7184a7018a78d31c271ccdd028736","modified":1651797160509},{"_id":"public/index.html","hash":"1e785abde3cb5649b98a0eee6da740f87d15864d","modified":1651797160509},{"_id":"public/page/3/index.html","hash":"e12e2a0caaab364fb96be94065a8553a420fc11c","modified":1651797160509},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1651797160517},{"_id":"public/CNAME","hash":"babc79ac946f9c86318d34809fffe251ce461948","modified":1651797160517},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1651797160517},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1651797160517},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1651797160517},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1651797160517},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1651797160517},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1651797160517},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1651797160517},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1651797160517},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1651797160518},{"_id":"public/images/logo.png","hash":"ecfd638922ed3ee81cdbf8528dde23db8aa3110f","modified":1651797160518},{"_id":"public/images/logo.svg","hash":"ff03bd8d089985fdfea8a900337b1d5e7fd8e4ff","modified":1651797160518},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1651797160518},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1651797160518},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1651797160518},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1651797160518},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1651797160518},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1651797160518},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1651797160518},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1651797160518},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1651797160518},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1651797160886},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1651797160888},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1651797160892},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1651797160892},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1651797160892},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1651797160892},{"_id":"public/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1651797160892},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1651797160892},{"_id":"public/js/src/utils.js","hash":"28a79d317b7f4012917a54cac770551596bf6241","modified":1651797160892},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1651797160892},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1651797160892},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1651797160892},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1651797160892},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1651797160893},{"_id":"public/js/src/schemes/pisces.js","hash":"72037e8c4202a73b0c6ff7d81b57cd349e836837","modified":1651797160893},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1651797160893},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1651797160893},{"_id":"public/css/main.css","hash":"e50512d38deccc80a04ff437e3ff2768042f9301","modified":1651797160893},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1651797160893},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1651797160893},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1651797160893},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1651797160893},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1651797160893},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1651797160893},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1651797160900}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2018-12-23T02:21:53.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-12-23 10:21:53\ntype: \"tags\"\n---\n\n","updated":"2020-08-18T02:25:58.813Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl2tpdnol0000t57sibewsht5","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2018年终总结","date":"2018-12-31T10:52:15.000Z","_content":"\n![](https://img.carlwe.com/summary_of_2018.jpg-h)\n\n> 写这篇文章的时候距离2019年只有4个小时了，找了个安静的地方，一个人回忆了这一整年所经历的事情，刚开始也不知从何说起，于是找到了上面这张图片，这大概就是我的2018了。\n\n<!--more-->\n\n没错，2018对我来说是转折的一年，转折的路上是孤独。这一年从武汉辞掉工作后来到了北京，回到了9年前我生活的地方，即陌生又熟悉。陌生的是我需要适应完全不同的生活和工作方式，熟悉的是，我回到了父母的身边。在离开武汉的时候我清楚的记得一位同事跟我讲了一句话：“相信自己，你这次选择肯定不会后悔！“。\n\n> 这篇文章主要记录下这一年中的几个阶段，以及自己的想法是如何随着经历的事情所改变。\n\n## 和武汉说再见\n\n离开武汉其实是过年的时候跟家里人商量决定的，父母并没有要求我过来，他们只是说让我自己决定。离开武汉同学同事都问我为什么，对我自己来说并没有什么特别明确的理由，简单说我不应该继续待在武汉了，而北京是最好的去处。\n\n在武汉上大学，毕业后在数文工作快2年，算起来在武汉生活也有快6年的时间了，离开肯定是不舍的。但既然决定离开，就得着手准备离开的事情了，提前跟公司提出离职申请，在公司我最应该感谢的应该是总经理了，所以决定先找总经理讲出这件事。约好时间和地点，来到天台边，那天天空阴沉，气温不是那么暖和，总经理表情看起来不是那么放松，可能是我每次找总经理谈话都是有重要的事情吧。我很直接说出了这次的话题，总经理先是说他已经有所预料，但没过一下，他摘下了眼镜抱住我，等我看到他的时候眼泪已经从眼角留下，我永远也忘不了那一刻，是上级、似兄弟、情谊永存。\n\n从数文实习、独自开发一个APP、整个事业部的APP设计和开发再到完整负责一个对外项目到交付。一路走来，学到了很多东西，真心希望数文在文化遗产行业能够越做越好！最后一天请公司同事和领导吃了一顿饭，就算是告别了。\n\n![](http://img.carlwe.com/IMG_0644.jpg)\n\n## 去云南\n\n记得那天是3月15日，正值武汉樱花盛开的季节。一直很想去一次云南，没想到这次是一个人去了。也是自己第二次一个人出去玩，第一次是去厦门。3月16日，正式结束工作的第一天，虽然背着一个20多斤的背包，但心里却是如释重负。早起逛了武大的樱园，也是这么多年第一次去武大看樱花。之后就踏往了去云南的飞机，从昆明转机到腾冲，找到了前同事，在腾冲待了2天，很不错的体验。之后一个人去到了大理、丽江、昆明。印象最深的是一个人背着三脚架相机和行李，爬上3900多米的苍山顶拍延时，因为要赶下午去丽江的火车，下来的时候高反，真的挺难受。所以去这种地方最好是几个朋友一起去，丽江太累就没有去泸沽湖和玉龙雪山，去了比较近的拉市海，风景也很好，这一次出去玩的照片会在后面写一个年度照片总结的博客，尽请期待！\n\n![](http://img.carlwe.com/IMG_1970.jpg)\n\n## 遇见大玩家\n\n- 找工作\n\n从云南回到北京，没有了工作的日子的确不是那么让人舒心。接下来就是找工作了。虽然父母说不用着急，慢慢找。但自己也知道留给自己找工作的黄金时间并不多了。算起来已经3年都没有去应聘了，之前都是面试别人，现在轮到自己反而更加紧张起来。时间来到4月初，刚开始面试的几家都不太满意。因为学历，大的公司一般都没有面试机会，到后来慢慢开始找到面试心得，但又因为要住在通州，所以望京、中关村太远不在考虑范围内，故只能在国贸附近找。功夫不负有心人，那天在面试回家路上一个电话打过来，说对我的简历比较感兴趣，让我过去面试，在三里屯。先是笔试、再技术面、技术老大面、HR面，感觉情况还不错，尤其是和技术老大的谈话很轻松，公司环境也挺好。下午回去等结果，晚上HR打电话来拿到offer，工资给的比我要求的还多一些，回家休整三天，下周二入职。\n\n- 新的工作环境\n\n公司是做互联网金融的，环境和硬件设施都很好，福利也很人性化。直属领导人很nice，有不懂的都会细心从原理上解答。紧接着适应早11点、晚9点的工作节奏。工作上，熟悉公司的代码、试着实现一些小功能、参与到正式版本的开发、到与测试、产品、设计的协调和沟通。每一个阶段对自己来说都是不一样的过程，但还好，这些都顺手的适应及完成了。这里要着重说一下，公司技术氛围很好，每周会有技术分享，每个人都可以上去讲，从中可以学到很多新知识。经历了4、5月份到6月份后，对于工作就没有那么大的压力了，算是从心理上适应了下来。\n\n![](http://img.carlwe.com/sanlitun_soho.jpg)\n\n## 重温北京\n\n工作上适应下来后，每个周末的时间就空余出来了，对于自己7、8、9三个月来说，可以用**重温北京**来总结了。这几个月先后遍历了自己在小学、初中时所喜欢去的地方，以及想去的地方：\n\n* 北京天文馆\n\n![](http://img.carlwe.com/planetarium.jpg)\n\n* 国家图书馆\n\n![](http://img.carlwe.com/national_library.jpg)\n\n* 首都图书馆\n\n![](http://img.carlwe.com/capital_library.jpg)\n\n* 中国科技馆\n\n![](http://img.carlwe.com/science_museum.jpg)\n\n* 中国美术馆\n\n![](http://img.carlwe.com/meishuguan.jpg)\n\n* 北京大学\n\n![](http://img.carlwe.com/pku.jpg)\n\n* 香山公园\n\n![](http://img.carlwe.com/IMG_3315.jpg)\n\n* 十三陵\n\n![](http://img.carlwe.com/shisanlin.jpg)\n\n* 十渡\n\n![](http://img.carlwe.com/shidu.jpg)\n\n但还有一个地方以后肯定还会再去一次，那就是初中的学校了，关于初中后面也会有文章讲到，那里有美好的回忆。\n\n## 再次起航\n\n十一放假去了趟山东，回来后发现这几个月其实也没做什么，时间匆匆的流逝了。随着工作逐渐步入正轨，我想该进行一些改变了，不能让自己过的如此安逸，于是这两个月在工作之余开始尝试一些新东西：\n\n- 博客\n\n> 一次在公司周会上讨论分享的时候有讨论到写博客的事情，再加上这半年在公司也积累了一些文章，所以准备开始着手写博客。通过11、12这两个月我的博客基本上也搭建起来了，并输出了几篇博客，算是18年的一个成果吧。\n\n- 小游戏\n\n>通过这个月的学习，小游戏的微信端和cocos端的开发基本已经掌握，自己的第一个小游戏也正在开发中 ，会尽早上线的。\n\n最后这两个月在工作上也取得了一些进步，数据结构算法持续学习中、掌握Kotlin、Android内存优化也有更深入的研究和学习。一个好消息在2018的最后一个工作日传来，最近几个版本APP的崩溃率都降低到了万分之五以下，得到了公司领导的奖励，这里小小的庆祝下。\n\n![](http://img.carlwe.com/qingdao.jpg)\n\n## 总结\n\n2018对我来说是一个很大的转折，经历了这一年从辞职、找工作、适应新环境、到中途几个月的迷茫、再到最后确立了新的方向。峰回路转，相信经历了本命年的洗礼后，2019年的我会变得更加从容。\n\n\n\n\n\n\n\n\n\n","source":"_posts/2018年终总结.md","raw":"---\ntitle: 2018年终总结\ndate: 2018-12-31 18:52:15\ntags: 生活\n---\n\n![](https://img.carlwe.com/summary_of_2018.jpg-h)\n\n> 写这篇文章的时候距离2019年只有4个小时了，找了个安静的地方，一个人回忆了这一整年所经历的事情，刚开始也不知从何说起，于是找到了上面这张图片，这大概就是我的2018了。\n\n<!--more-->\n\n没错，2018对我来说是转折的一年，转折的路上是孤独。这一年从武汉辞掉工作后来到了北京，回到了9年前我生活的地方，即陌生又熟悉。陌生的是我需要适应完全不同的生活和工作方式，熟悉的是，我回到了父母的身边。在离开武汉的时候我清楚的记得一位同事跟我讲了一句话：“相信自己，你这次选择肯定不会后悔！“。\n\n> 这篇文章主要记录下这一年中的几个阶段，以及自己的想法是如何随着经历的事情所改变。\n\n## 和武汉说再见\n\n离开武汉其实是过年的时候跟家里人商量决定的，父母并没有要求我过来，他们只是说让我自己决定。离开武汉同学同事都问我为什么，对我自己来说并没有什么特别明确的理由，简单说我不应该继续待在武汉了，而北京是最好的去处。\n\n在武汉上大学，毕业后在数文工作快2年，算起来在武汉生活也有快6年的时间了，离开肯定是不舍的。但既然决定离开，就得着手准备离开的事情了，提前跟公司提出离职申请，在公司我最应该感谢的应该是总经理了，所以决定先找总经理讲出这件事。约好时间和地点，来到天台边，那天天空阴沉，气温不是那么暖和，总经理表情看起来不是那么放松，可能是我每次找总经理谈话都是有重要的事情吧。我很直接说出了这次的话题，总经理先是说他已经有所预料，但没过一下，他摘下了眼镜抱住我，等我看到他的时候眼泪已经从眼角留下，我永远也忘不了那一刻，是上级、似兄弟、情谊永存。\n\n从数文实习、独自开发一个APP、整个事业部的APP设计和开发再到完整负责一个对外项目到交付。一路走来，学到了很多东西，真心希望数文在文化遗产行业能够越做越好！最后一天请公司同事和领导吃了一顿饭，就算是告别了。\n\n![](http://img.carlwe.com/IMG_0644.jpg)\n\n## 去云南\n\n记得那天是3月15日，正值武汉樱花盛开的季节。一直很想去一次云南，没想到这次是一个人去了。也是自己第二次一个人出去玩，第一次是去厦门。3月16日，正式结束工作的第一天，虽然背着一个20多斤的背包，但心里却是如释重负。早起逛了武大的樱园，也是这么多年第一次去武大看樱花。之后就踏往了去云南的飞机，从昆明转机到腾冲，找到了前同事，在腾冲待了2天，很不错的体验。之后一个人去到了大理、丽江、昆明。印象最深的是一个人背着三脚架相机和行李，爬上3900多米的苍山顶拍延时，因为要赶下午去丽江的火车，下来的时候高反，真的挺难受。所以去这种地方最好是几个朋友一起去，丽江太累就没有去泸沽湖和玉龙雪山，去了比较近的拉市海，风景也很好，这一次出去玩的照片会在后面写一个年度照片总结的博客，尽请期待！\n\n![](http://img.carlwe.com/IMG_1970.jpg)\n\n## 遇见大玩家\n\n- 找工作\n\n从云南回到北京，没有了工作的日子的确不是那么让人舒心。接下来就是找工作了。虽然父母说不用着急，慢慢找。但自己也知道留给自己找工作的黄金时间并不多了。算起来已经3年都没有去应聘了，之前都是面试别人，现在轮到自己反而更加紧张起来。时间来到4月初，刚开始面试的几家都不太满意。因为学历，大的公司一般都没有面试机会，到后来慢慢开始找到面试心得，但又因为要住在通州，所以望京、中关村太远不在考虑范围内，故只能在国贸附近找。功夫不负有心人，那天在面试回家路上一个电话打过来，说对我的简历比较感兴趣，让我过去面试，在三里屯。先是笔试、再技术面、技术老大面、HR面，感觉情况还不错，尤其是和技术老大的谈话很轻松，公司环境也挺好。下午回去等结果，晚上HR打电话来拿到offer，工资给的比我要求的还多一些，回家休整三天，下周二入职。\n\n- 新的工作环境\n\n公司是做互联网金融的，环境和硬件设施都很好，福利也很人性化。直属领导人很nice，有不懂的都会细心从原理上解答。紧接着适应早11点、晚9点的工作节奏。工作上，熟悉公司的代码、试着实现一些小功能、参与到正式版本的开发、到与测试、产品、设计的协调和沟通。每一个阶段对自己来说都是不一样的过程，但还好，这些都顺手的适应及完成了。这里要着重说一下，公司技术氛围很好，每周会有技术分享，每个人都可以上去讲，从中可以学到很多新知识。经历了4、5月份到6月份后，对于工作就没有那么大的压力了，算是从心理上适应了下来。\n\n![](http://img.carlwe.com/sanlitun_soho.jpg)\n\n## 重温北京\n\n工作上适应下来后，每个周末的时间就空余出来了，对于自己7、8、9三个月来说，可以用**重温北京**来总结了。这几个月先后遍历了自己在小学、初中时所喜欢去的地方，以及想去的地方：\n\n* 北京天文馆\n\n![](http://img.carlwe.com/planetarium.jpg)\n\n* 国家图书馆\n\n![](http://img.carlwe.com/national_library.jpg)\n\n* 首都图书馆\n\n![](http://img.carlwe.com/capital_library.jpg)\n\n* 中国科技馆\n\n![](http://img.carlwe.com/science_museum.jpg)\n\n* 中国美术馆\n\n![](http://img.carlwe.com/meishuguan.jpg)\n\n* 北京大学\n\n![](http://img.carlwe.com/pku.jpg)\n\n* 香山公园\n\n![](http://img.carlwe.com/IMG_3315.jpg)\n\n* 十三陵\n\n![](http://img.carlwe.com/shisanlin.jpg)\n\n* 十渡\n\n![](http://img.carlwe.com/shidu.jpg)\n\n但还有一个地方以后肯定还会再去一次，那就是初中的学校了，关于初中后面也会有文章讲到，那里有美好的回忆。\n\n## 再次起航\n\n十一放假去了趟山东，回来后发现这几个月其实也没做什么，时间匆匆的流逝了。随着工作逐渐步入正轨，我想该进行一些改变了，不能让自己过的如此安逸，于是这两个月在工作之余开始尝试一些新东西：\n\n- 博客\n\n> 一次在公司周会上讨论分享的时候有讨论到写博客的事情，再加上这半年在公司也积累了一些文章，所以准备开始着手写博客。通过11、12这两个月我的博客基本上也搭建起来了，并输出了几篇博客，算是18年的一个成果吧。\n\n- 小游戏\n\n>通过这个月的学习，小游戏的微信端和cocos端的开发基本已经掌握，自己的第一个小游戏也正在开发中 ，会尽早上线的。\n\n最后这两个月在工作上也取得了一些进步，数据结构算法持续学习中、掌握Kotlin、Android内存优化也有更深入的研究和学习。一个好消息在2018的最后一个工作日传来，最近几个版本APP的崩溃率都降低到了万分之五以下，得到了公司领导的奖励，这里小小的庆祝下。\n\n![](http://img.carlwe.com/qingdao.jpg)\n\n## 总结\n\n2018对我来说是一个很大的转折，经历了这一年从辞职、找工作、适应新环境、到中途几个月的迷茫、再到最后确立了新的方向。峰回路转，相信经历了本命年的洗礼后，2019年的我会变得更加从容。\n\n\n\n\n\n\n\n\n\n","slug":"2018年终总结","published":1,"updated":"2020-08-18T02:25:58.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnon0001t57ssoxjur2b","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/summary_of_2018.jpg-h\" alt=\"\"></p>\n<blockquote>\n<p>写这篇文章的时候距离2019年只有4个小时了，找了个安静的地方，一个人回忆了这一整年所经历的事情，刚开始也不知从何说起，于是找到了上面这张图片，这大概就是我的2018了。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>没错，2018对我来说是转折的一年，转折的路上是孤独。这一年从武汉辞掉工作后来到了北京，回到了9年前我生活的地方，即陌生又熟悉。陌生的是我需要适应完全不同的生活和工作方式，熟悉的是，我回到了父母的身边。在离开武汉的时候我清楚的记得一位同事跟我讲了一句话：“相信自己，你这次选择肯定不会后悔！“。</p>\n<blockquote>\n<p>这篇文章主要记录下这一年中的几个阶段，以及自己的想法是如何随着经历的事情所改变。</p>\n</blockquote>\n<h2 id=\"和武汉说再见\"><a href=\"#和武汉说再见\" class=\"headerlink\" title=\"和武汉说再见\"></a>和武汉说再见</h2><p>离开武汉其实是过年的时候跟家里人商量决定的，父母并没有要求我过来，他们只是说让我自己决定。离开武汉同学同事都问我为什么，对我自己来说并没有什么特别明确的理由，简单说我不应该继续待在武汉了，而北京是最好的去处。</p>\n<p>在武汉上大学，毕业后在数文工作快2年，算起来在武汉生活也有快6年的时间了，离开肯定是不舍的。但既然决定离开，就得着手准备离开的事情了，提前跟公司提出离职申请，在公司我最应该感谢的应该是总经理了，所以决定先找总经理讲出这件事。约好时间和地点，来到天台边，那天天空阴沉，气温不是那么暖和，总经理表情看起来不是那么放松，可能是我每次找总经理谈话都是有重要的事情吧。我很直接说出了这次的话题，总经理先是说他已经有所预料，但没过一下，他摘下了眼镜抱住我，等我看到他的时候眼泪已经从眼角留下，我永远也忘不了那一刻，是上级、似兄弟、情谊永存。</p>\n<p>从数文实习、独自开发一个APP、整个事业部的APP设计和开发再到完整负责一个对外项目到交付。一路走来，学到了很多东西，真心希望数文在文化遗产行业能够越做越好！最后一天请公司同事和领导吃了一顿饭，就算是告别了。</p>\n<p><img src=\"http://img.carlwe.com/IMG_0644.jpg\" alt=\"\"></p>\n<h2 id=\"去云南\"><a href=\"#去云南\" class=\"headerlink\" title=\"去云南\"></a>去云南</h2><p>记得那天是3月15日，正值武汉樱花盛开的季节。一直很想去一次云南，没想到这次是一个人去了。也是自己第二次一个人出去玩，第一次是去厦门。3月16日，正式结束工作的第一天，虽然背着一个20多斤的背包，但心里却是如释重负。早起逛了武大的樱园，也是这么多年第一次去武大看樱花。之后就踏往了去云南的飞机，从昆明转机到腾冲，找到了前同事，在腾冲待了2天，很不错的体验。之后一个人去到了大理、丽江、昆明。印象最深的是一个人背着三脚架相机和行李，爬上3900多米的苍山顶拍延时，因为要赶下午去丽江的火车，下来的时候高反，真的挺难受。所以去这种地方最好是几个朋友一起去，丽江太累就没有去泸沽湖和玉龙雪山，去了比较近的拉市海，风景也很好，这一次出去玩的照片会在后面写一个年度照片总结的博客，尽请期待！</p>\n<p><img src=\"http://img.carlwe.com/IMG_1970.jpg\" alt=\"\"></p>\n<h2 id=\"遇见大玩家\"><a href=\"#遇见大玩家\" class=\"headerlink\" title=\"遇见大玩家\"></a>遇见大玩家</h2><ul>\n<li>找工作</li>\n</ul>\n<p>从云南回到北京，没有了工作的日子的确不是那么让人舒心。接下来就是找工作了。虽然父母说不用着急，慢慢找。但自己也知道留给自己找工作的黄金时间并不多了。算起来已经3年都没有去应聘了，之前都是面试别人，现在轮到自己反而更加紧张起来。时间来到4月初，刚开始面试的几家都不太满意。因为学历，大的公司一般都没有面试机会，到后来慢慢开始找到面试心得，但又因为要住在通州，所以望京、中关村太远不在考虑范围内，故只能在国贸附近找。功夫不负有心人，那天在面试回家路上一个电话打过来，说对我的简历比较感兴趣，让我过去面试，在三里屯。先是笔试、再技术面、技术老大面、HR面，感觉情况还不错，尤其是和技术老大的谈话很轻松，公司环境也挺好。下午回去等结果，晚上HR打电话来拿到offer，工资给的比我要求的还多一些，回家休整三天，下周二入职。</p>\n<ul>\n<li>新的工作环境</li>\n</ul>\n<p>公司是做互联网金融的，环境和硬件设施都很好，福利也很人性化。直属领导人很nice，有不懂的都会细心从原理上解答。紧接着适应早11点、晚9点的工作节奏。工作上，熟悉公司的代码、试着实现一些小功能、参与到正式版本的开发、到与测试、产品、设计的协调和沟通。每一个阶段对自己来说都是不一样的过程，但还好，这些都顺手的适应及完成了。这里要着重说一下，公司技术氛围很好，每周会有技术分享，每个人都可以上去讲，从中可以学到很多新知识。经历了4、5月份到6月份后，对于工作就没有那么大的压力了，算是从心理上适应了下来。</p>\n<p><img src=\"http://img.carlwe.com/sanlitun_soho.jpg\" alt=\"\"></p>\n<h2 id=\"重温北京\"><a href=\"#重温北京\" class=\"headerlink\" title=\"重温北京\"></a>重温北京</h2><p>工作上适应下来后，每个周末的时间就空余出来了，对于自己7、8、9三个月来说，可以用<strong>重温北京</strong>来总结了。这几个月先后遍历了自己在小学、初中时所喜欢去的地方，以及想去的地方：</p>\n<ul>\n<li>北京天文馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/planetarium.jpg\" alt=\"\"></p>\n<ul>\n<li>国家图书馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/national_library.jpg\" alt=\"\"></p>\n<ul>\n<li>首都图书馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/capital_library.jpg\" alt=\"\"></p>\n<ul>\n<li>中国科技馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/science_museum.jpg\" alt=\"\"></p>\n<ul>\n<li>中国美术馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/meishuguan.jpg\" alt=\"\"></p>\n<ul>\n<li>北京大学</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/pku.jpg\" alt=\"\"></p>\n<ul>\n<li>香山公园</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/IMG_3315.jpg\" alt=\"\"></p>\n<ul>\n<li>十三陵</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/shisanlin.jpg\" alt=\"\"></p>\n<ul>\n<li>十渡</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/shidu.jpg\" alt=\"\"></p>\n<p>但还有一个地方以后肯定还会再去一次，那就是初中的学校了，关于初中后面也会有文章讲到，那里有美好的回忆。</p>\n<h2 id=\"再次起航\"><a href=\"#再次起航\" class=\"headerlink\" title=\"再次起航\"></a>再次起航</h2><p>十一放假去了趟山东，回来后发现这几个月其实也没做什么，时间匆匆的流逝了。随着工作逐渐步入正轨，我想该进行一些改变了，不能让自己过的如此安逸，于是这两个月在工作之余开始尝试一些新东西：</p>\n<ul>\n<li>博客</li>\n</ul>\n<blockquote>\n<p>一次在公司周会上讨论分享的时候有讨论到写博客的事情，再加上这半年在公司也积累了一些文章，所以准备开始着手写博客。通过11、12这两个月我的博客基本上也搭建起来了，并输出了几篇博客，算是18年的一个成果吧。</p>\n</blockquote>\n<ul>\n<li>小游戏</li>\n</ul>\n<blockquote>\n<p>通过这个月的学习，小游戏的微信端和cocos端的开发基本已经掌握，自己的第一个小游戏也正在开发中 ，会尽早上线的。</p>\n</blockquote>\n<p>最后这两个月在工作上也取得了一些进步，数据结构算法持续学习中、掌握Kotlin、Android内存优化也有更深入的研究和学习。一个好消息在2018的最后一个工作日传来，最近几个版本APP的崩溃率都降低到了万分之五以下，得到了公司领导的奖励，这里小小的庆祝下。</p>\n<p><img src=\"http://img.carlwe.com/qingdao.jpg\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>2018对我来说是一个很大的转折，经历了这一年从辞职、找工作、适应新环境、到中途几个月的迷茫、再到最后确立了新的方向。峰回路转，相信经历了本命年的洗礼后，2019年的我会变得更加从容。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/summary_of_2018.jpg-h\" alt=\"\"></p>\n<blockquote>\n<p>写这篇文章的时候距离2019年只有4个小时了，找了个安静的地方，一个人回忆了这一整年所经历的事情，刚开始也不知从何说起，于是找到了上面这张图片，这大概就是我的2018了。</p>\n</blockquote>","more":"<p>没错，2018对我来说是转折的一年，转折的路上是孤独。这一年从武汉辞掉工作后来到了北京，回到了9年前我生活的地方，即陌生又熟悉。陌生的是我需要适应完全不同的生活和工作方式，熟悉的是，我回到了父母的身边。在离开武汉的时候我清楚的记得一位同事跟我讲了一句话：“相信自己，你这次选择肯定不会后悔！“。</p>\n<blockquote>\n<p>这篇文章主要记录下这一年中的几个阶段，以及自己的想法是如何随着经历的事情所改变。</p>\n</blockquote>\n<h2 id=\"和武汉说再见\"><a href=\"#和武汉说再见\" class=\"headerlink\" title=\"和武汉说再见\"></a>和武汉说再见</h2><p>离开武汉其实是过年的时候跟家里人商量决定的，父母并没有要求我过来，他们只是说让我自己决定。离开武汉同学同事都问我为什么，对我自己来说并没有什么特别明确的理由，简单说我不应该继续待在武汉了，而北京是最好的去处。</p>\n<p>在武汉上大学，毕业后在数文工作快2年，算起来在武汉生活也有快6年的时间了，离开肯定是不舍的。但既然决定离开，就得着手准备离开的事情了，提前跟公司提出离职申请，在公司我最应该感谢的应该是总经理了，所以决定先找总经理讲出这件事。约好时间和地点，来到天台边，那天天空阴沉，气温不是那么暖和，总经理表情看起来不是那么放松，可能是我每次找总经理谈话都是有重要的事情吧。我很直接说出了这次的话题，总经理先是说他已经有所预料，但没过一下，他摘下了眼镜抱住我，等我看到他的时候眼泪已经从眼角留下，我永远也忘不了那一刻，是上级、似兄弟、情谊永存。</p>\n<p>从数文实习、独自开发一个APP、整个事业部的APP设计和开发再到完整负责一个对外项目到交付。一路走来，学到了很多东西，真心希望数文在文化遗产行业能够越做越好！最后一天请公司同事和领导吃了一顿饭，就算是告别了。</p>\n<p><img src=\"http://img.carlwe.com/IMG_0644.jpg\" alt=\"\"></p>\n<h2 id=\"去云南\"><a href=\"#去云南\" class=\"headerlink\" title=\"去云南\"></a>去云南</h2><p>记得那天是3月15日，正值武汉樱花盛开的季节。一直很想去一次云南，没想到这次是一个人去了。也是自己第二次一个人出去玩，第一次是去厦门。3月16日，正式结束工作的第一天，虽然背着一个20多斤的背包，但心里却是如释重负。早起逛了武大的樱园，也是这么多年第一次去武大看樱花。之后就踏往了去云南的飞机，从昆明转机到腾冲，找到了前同事，在腾冲待了2天，很不错的体验。之后一个人去到了大理、丽江、昆明。印象最深的是一个人背着三脚架相机和行李，爬上3900多米的苍山顶拍延时，因为要赶下午去丽江的火车，下来的时候高反，真的挺难受。所以去这种地方最好是几个朋友一起去，丽江太累就没有去泸沽湖和玉龙雪山，去了比较近的拉市海，风景也很好，这一次出去玩的照片会在后面写一个年度照片总结的博客，尽请期待！</p>\n<p><img src=\"http://img.carlwe.com/IMG_1970.jpg\" alt=\"\"></p>\n<h2 id=\"遇见大玩家\"><a href=\"#遇见大玩家\" class=\"headerlink\" title=\"遇见大玩家\"></a>遇见大玩家</h2><ul>\n<li>找工作</li>\n</ul>\n<p>从云南回到北京，没有了工作的日子的确不是那么让人舒心。接下来就是找工作了。虽然父母说不用着急，慢慢找。但自己也知道留给自己找工作的黄金时间并不多了。算起来已经3年都没有去应聘了，之前都是面试别人，现在轮到自己反而更加紧张起来。时间来到4月初，刚开始面试的几家都不太满意。因为学历，大的公司一般都没有面试机会，到后来慢慢开始找到面试心得，但又因为要住在通州，所以望京、中关村太远不在考虑范围内，故只能在国贸附近找。功夫不负有心人，那天在面试回家路上一个电话打过来，说对我的简历比较感兴趣，让我过去面试，在三里屯。先是笔试、再技术面、技术老大面、HR面，感觉情况还不错，尤其是和技术老大的谈话很轻松，公司环境也挺好。下午回去等结果，晚上HR打电话来拿到offer，工资给的比我要求的还多一些，回家休整三天，下周二入职。</p>\n<ul>\n<li>新的工作环境</li>\n</ul>\n<p>公司是做互联网金融的，环境和硬件设施都很好，福利也很人性化。直属领导人很nice，有不懂的都会细心从原理上解答。紧接着适应早11点、晚9点的工作节奏。工作上，熟悉公司的代码、试着实现一些小功能、参与到正式版本的开发、到与测试、产品、设计的协调和沟通。每一个阶段对自己来说都是不一样的过程，但还好，这些都顺手的适应及完成了。这里要着重说一下，公司技术氛围很好，每周会有技术分享，每个人都可以上去讲，从中可以学到很多新知识。经历了4、5月份到6月份后，对于工作就没有那么大的压力了，算是从心理上适应了下来。</p>\n<p><img src=\"http://img.carlwe.com/sanlitun_soho.jpg\" alt=\"\"></p>\n<h2 id=\"重温北京\"><a href=\"#重温北京\" class=\"headerlink\" title=\"重温北京\"></a>重温北京</h2><p>工作上适应下来后，每个周末的时间就空余出来了，对于自己7、8、9三个月来说，可以用<strong>重温北京</strong>来总结了。这几个月先后遍历了自己在小学、初中时所喜欢去的地方，以及想去的地方：</p>\n<ul>\n<li>北京天文馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/planetarium.jpg\" alt=\"\"></p>\n<ul>\n<li>国家图书馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/national_library.jpg\" alt=\"\"></p>\n<ul>\n<li>首都图书馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/capital_library.jpg\" alt=\"\"></p>\n<ul>\n<li>中国科技馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/science_museum.jpg\" alt=\"\"></p>\n<ul>\n<li>中国美术馆</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/meishuguan.jpg\" alt=\"\"></p>\n<ul>\n<li>北京大学</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/pku.jpg\" alt=\"\"></p>\n<ul>\n<li>香山公园</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/IMG_3315.jpg\" alt=\"\"></p>\n<ul>\n<li>十三陵</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/shisanlin.jpg\" alt=\"\"></p>\n<ul>\n<li>十渡</li>\n</ul>\n<p><img src=\"http://img.carlwe.com/shidu.jpg\" alt=\"\"></p>\n<p>但还有一个地方以后肯定还会再去一次，那就是初中的学校了，关于初中后面也会有文章讲到，那里有美好的回忆。</p>\n<h2 id=\"再次起航\"><a href=\"#再次起航\" class=\"headerlink\" title=\"再次起航\"></a>再次起航</h2><p>十一放假去了趟山东，回来后发现这几个月其实也没做什么，时间匆匆的流逝了。随着工作逐渐步入正轨，我想该进行一些改变了，不能让自己过的如此安逸，于是这两个月在工作之余开始尝试一些新东西：</p>\n<ul>\n<li>博客</li>\n</ul>\n<blockquote>\n<p>一次在公司周会上讨论分享的时候有讨论到写博客的事情，再加上这半年在公司也积累了一些文章，所以准备开始着手写博客。通过11、12这两个月我的博客基本上也搭建起来了，并输出了几篇博客，算是18年的一个成果吧。</p>\n</blockquote>\n<ul>\n<li>小游戏</li>\n</ul>\n<blockquote>\n<p>通过这个月的学习，小游戏的微信端和cocos端的开发基本已经掌握，自己的第一个小游戏也正在开发中 ，会尽早上线的。</p>\n</blockquote>\n<p>最后这两个月在工作上也取得了一些进步，数据结构算法持续学习中、掌握Kotlin、Android内存优化也有更深入的研究和学习。一个好消息在2018的最后一个工作日传来，最近几个版本APP的崩溃率都降低到了万分之五以下，得到了公司领导的奖励，这里小小的庆祝下。</p>\n<p><img src=\"http://img.carlwe.com/qingdao.jpg\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>2018对我来说是一个很大的转折，经历了这一年从辞职、找工作、适应新环境、到中途几个月的迷茫、再到最后确立了新的方向。峰回路转，相信经历了本命年的洗礼后，2019年的我会变得更加从容。</p>"},{"title":"2019年终总结","date":"2019-12-31T15:35:57.000Z","_content":"\n记得去年写年终总结，一个人跑到Manncoffee，然后花了几个小时，写了好长一篇文章，把一年之中经历的几件事情都写了出来，与其说2018是一个转折，那么2019对自己来说可能是更大的一次转折。总的来看2019不算是一个完美年，对自己来说大概经历了以下事情。\n\n<!--more-->\n\n第一件，过年之后没有多久的四月份，来到大家玩刚好一周年，还记得那天同小伙伴一起吃了小伍厨房，之后一段时间就是关注在公司的的岗位和调薪的事情，说实话当时没有考虑那么多。有一种只要自己做的好，就一直能在一个公司混的不错的想法。大概情况也和自己想象的差不多，职务提升，工资涨幅也达到了自己的预期目标，对于后面的工作和发展很有信心。那段时间也许是最开心的，工作和生活最有憧憬的一段时间，但这只是刚刚开始。\n\n第二件，时间来到了6月下旬。当时并没有那么多顾虑，但是自从那时，对于公司层面来说再也没有得到一个好的消息，事情往往比预想的来的要快。6月份隐约出现了一些人事变动，业务出现一些不祥的征兆。7月份leader离职，那段时间给自己的感觉就是公司自此之后没有了灵魂。再往后一件事情比一件事情来的突然。给人最深刻的体会就是人性在面临金钱的考验的时候都会展露无疑。\n\n第三件，由于第二件事情的持续发酵，我们不得不面临比裁员更更更残酷的事情。欣慰的是提前预料到事情的严重性，并做了一些准备，在最后一个月出去面试，但是过程曲折，虽然拿到了滴滴和快手的offer，但是最后还是去了离家近的一个公司，虽有不舍，但心是永不会安逸的。\n\n总的来说。2019有太多值得总结的地方，欣慰的是自己没有被击垮，内心更加成熟，也更懂得责任的重要性，想对自己说的是：2020你依旧是勇士！\n","source":"_posts/2019年终总结.md","raw":"---\ntitle: 2019年终总结\ndate: 2019-12-31 23:35:57\ntags: 生活\n---\n\n记得去年写年终总结，一个人跑到Manncoffee，然后花了几个小时，写了好长一篇文章，把一年之中经历的几件事情都写了出来，与其说2018是一个转折，那么2019对自己来说可能是更大的一次转折。总的来看2019不算是一个完美年，对自己来说大概经历了以下事情。\n\n<!--more-->\n\n第一件，过年之后没有多久的四月份，来到大家玩刚好一周年，还记得那天同小伙伴一起吃了小伍厨房，之后一段时间就是关注在公司的的岗位和调薪的事情，说实话当时没有考虑那么多。有一种只要自己做的好，就一直能在一个公司混的不错的想法。大概情况也和自己想象的差不多，职务提升，工资涨幅也达到了自己的预期目标，对于后面的工作和发展很有信心。那段时间也许是最开心的，工作和生活最有憧憬的一段时间，但这只是刚刚开始。\n\n第二件，时间来到了6月下旬。当时并没有那么多顾虑，但是自从那时，对于公司层面来说再也没有得到一个好的消息，事情往往比预想的来的要快。6月份隐约出现了一些人事变动，业务出现一些不祥的征兆。7月份leader离职，那段时间给自己的感觉就是公司自此之后没有了灵魂。再往后一件事情比一件事情来的突然。给人最深刻的体会就是人性在面临金钱的考验的时候都会展露无疑。\n\n第三件，由于第二件事情的持续发酵，我们不得不面临比裁员更更更残酷的事情。欣慰的是提前预料到事情的严重性，并做了一些准备，在最后一个月出去面试，但是过程曲折，虽然拿到了滴滴和快手的offer，但是最后还是去了离家近的一个公司，虽有不舍，但心是永不会安逸的。\n\n总的来说。2019有太多值得总结的地方，欣慰的是自己没有被击垮，内心更加成熟，也更懂得责任的重要性，想对自己说的是：2020你依旧是勇士！\n","slug":"2019年终总结","published":1,"updated":"2021-11-01T06:06:45.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnop0002t57sblvm84rf","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>记得去年写年终总结，一个人跑到Manncoffee，然后花了几个小时，写了好长一篇文章，把一年之中经历的几件事情都写了出来，与其说2018是一个转折，那么2019对自己来说可能是更大的一次转折。总的来看2019不算是一个完美年，对自己来说大概经历了以下事情。</p>\n<a id=\"more\"></a>\n<p>第一件，过年之后没有多久的四月份，来到大家玩刚好一周年，还记得那天同小伙伴一起吃了小伍厨房，之后一段时间就是关注在公司的的岗位和调薪的事情，说实话当时没有考虑那么多。有一种只要自己做的好，就一直能在一个公司混的不错的想法。大概情况也和自己想象的差不多，职务提升，工资涨幅也达到了自己的预期目标，对于后面的工作和发展很有信心。那段时间也许是最开心的，工作和生活最有憧憬的一段时间，但这只是刚刚开始。</p>\n<p>第二件，时间来到了6月下旬。当时并没有那么多顾虑，但是自从那时，对于公司层面来说再也没有得到一个好的消息，事情往往比预想的来的要快。6月份隐约出现了一些人事变动，业务出现一些不祥的征兆。7月份leader离职，那段时间给自己的感觉就是公司自此之后没有了灵魂。再往后一件事情比一件事情来的突然。给人最深刻的体会就是人性在面临金钱的考验的时候都会展露无疑。</p>\n<p>第三件，由于第二件事情的持续发酵，我们不得不面临比裁员更更更残酷的事情。欣慰的是提前预料到事情的严重性，并做了一些准备，在最后一个月出去面试，但是过程曲折，虽然拿到了滴滴和快手的offer，但是最后还是去了离家近的一个公司，虽有不舍，但心是永不会安逸的。</p>\n<p>总的来说。2019有太多值得总结的地方，欣慰的是自己没有被击垮，内心更加成熟，也更懂得责任的重要性，想对自己说的是：2020你依旧是勇士！</p>\n","site":{"data":{}},"excerpt":"<p>记得去年写年终总结，一个人跑到Manncoffee，然后花了几个小时，写了好长一篇文章，把一年之中经历的几件事情都写了出来，与其说2018是一个转折，那么2019对自己来说可能是更大的一次转折。总的来看2019不算是一个完美年，对自己来说大概经历了以下事情。</p>","more":"<p>第一件，过年之后没有多久的四月份，来到大家玩刚好一周年，还记得那天同小伙伴一起吃了小伍厨房，之后一段时间就是关注在公司的的岗位和调薪的事情，说实话当时没有考虑那么多。有一种只要自己做的好，就一直能在一个公司混的不错的想法。大概情况也和自己想象的差不多，职务提升，工资涨幅也达到了自己的预期目标，对于后面的工作和发展很有信心。那段时间也许是最开心的，工作和生活最有憧憬的一段时间，但这只是刚刚开始。</p>\n<p>第二件，时间来到了6月下旬。当时并没有那么多顾虑，但是自从那时，对于公司层面来说再也没有得到一个好的消息，事情往往比预想的来的要快。6月份隐约出现了一些人事变动，业务出现一些不祥的征兆。7月份leader离职，那段时间给自己的感觉就是公司自此之后没有了灵魂。再往后一件事情比一件事情来的突然。给人最深刻的体会就是人性在面临金钱的考验的时候都会展露无疑。</p>\n<p>第三件，由于第二件事情的持续发酵，我们不得不面临比裁员更更更残酷的事情。欣慰的是提前预料到事情的严重性，并做了一些准备，在最后一个月出去面试，但是过程曲折，虽然拿到了滴滴和快手的offer，但是最后还是去了离家近的一个公司，虽有不舍，但心是永不会安逸的。</p>\n<p>总的来说。2019有太多值得总结的地方，欣慰的是自己没有被击垮，内心更加成熟，也更懂得责任的重要性，想对自己说的是：2020你依旧是勇士！</p>"},{"title":"Android厂商推送冲突了","date":"2020-03-21T06:55:26.000Z","_content":"\n![](https://img.carlwe.com/push_confilt_xiaomi.png)\n\n> 本文已授权在 **郭霖公众号** 发布\n\n<!--more-->\n\n* **关于厂商推送**\n\n推送已经成为当下大部分App的必备功能了，相信大家每天都会收到新闻、聊天消息、普通App的活动等消息推送，而为了提升推送的到达率，大家也做了各种优化，最初应用进程被杀后，就收不到推送了，所以前几年就出了各种应用保活的方法，而Android 8.0以后应用保活的“妙招”就很难生效了。为了提升推送的到达率，当应用被杀后大家都会选择走厂商的推送通道，各大厂商在系统级别会有一个长链接来统一处理推送消息，从而确保当应用被杀后你也能顺利收到推送，下图描述了小米的厂商推送流程。\n\n![](https://img.carlwe.com/MiPush逻辑图.png)\n\n* **通知栏消息和透传消息**\n\n通知栏消息：很好理解，就是收到推送自动显示到通知栏的消息。\n\n透传消息：顾名思义就是直接把消息内容传到客户端，对用户来说是透明的，收到消息后是否显示及显示形式由客户端控制，使用起来更加灵活，很多第三方SDK中称之为自定义消息。一般App中的自定义消息也都是用的透传消息，App收到通知后可通过拿到的消息通知的类型，以及需要前往的页面进行相应处理。 \n\n## 问题由来\n\n最开始我们App中使用网易云信来支持聊天业务；使用极光推送来处理业务的推送消息，由于上述Android版本的限制，进程保活变得困难，也是不推荐的方式。这也导致了应用被杀后消息收不到，所以极光和云信都陆续提供了自家关于厂商推送的接入方案。\n\n由于业务需要我们先接入了极光的厂商推送，极光针对不同厂商提供的**厂商推送SDK**进行了封装，你只需要引入对应封装好的包就行，如下：\n\n``` groovy\ndependencies {\n    ...\n    implementation 'cn.jiguang.sdk:jpush:3.3.9'\n    implementation 'cn.jiguang.sdk:jcore:2.1.6'\n    implementation 'cn.jiguang.sdk.plugin:xiaomi:3.3.9'\n    implementation 'cn.jiguang.sdk.plugin:huawei:3.3.9'\n    implementation 'cn.jiguang.sdk.plugin:oppo:3.3.9'\n    ...\n}\n```\n\n以小米为例，我们看看极光引入的`cn.jiguang.sdk.plugin:xiaomi:3.3.9` arr包是如何工作的：\n\n![](https://img.carlwe.com/plugin_xiaomi_push_remark.png)\n\n可以看到极光提供的这个arr包中直接把小米官方提供的`MiPush_SDK_Client_3_6_18.jar`(处理小米厂商推送的SDK) 包了进来，同时提供了一个`PluginXiaomiPlatformsReceiver`类，让其继承自上述小米jar包中的`PushMessageReceiver`，打包后`PluginXiaomiPlatformsReceiver`会被添加到Manifest文件，当系统收到推送后，会将消息转发到继承了`PushMessageReceiver`的类，所以`PluginXiaomiPlatformsReceiver`就会收到消息，并将消息传递给极光自己的SDK进行处理，后面的流程就和App在前台的推送流程一样了。简单总结下这个Plugin类：\n\n>  Plugin类会被注册到Manifest从而接收系统消息，并在对应的回调方法中将消息转发给极光SDK处理。\n\n在网易云信兼容厂商推送之前这一切工作的都很好，应用进程被杀后，push推送可正常收到，问题从云信消息推送兼容厂商推送开始：\n\n### 问题一\n\n按照网易云信提供的 **[接入方法](https://dev.yunxin.163.com/docs/product/IM即时通讯/SDK开发集成/Android开发集成/推送?#小米推送)** 需要接入小米的推送SDK，因为极光的已经引入，所以再次引入会冲突，这里就直接不引入，使用极光的就行，然后按照接入流程接入即可，在接入流程后面我们注意到AndroidManifest.xml文件中会插入如下内容：\n\n```xml\n<receiver\n    android:name=\"com.netease.nimlib.mixpush.mi.MiPushReceiver\"\n    android:exported=\"true\">\n    <intent-filter android:priority=\"0x7fffffff\"> //这里设置了优先级\n        <action android:name=\"com.xiaomi.mipush.RECEIVE_MESSAGE\" />\n        <action android:name=\"com.xiaomi.mipush.MESSAGE_ARRIVED\" />\n        <action android:name=\"com.xiaomi.mipush.ERROR\" />\n    </intent-filter>\n</receiver>\n```\n\n这个`MiPushReceiver`我们查看源码会发现它主要是处理并转发小米厂商推送的各种事件，`MiPushReceiver`同样是继承自小米push sdk中的`PushMessageReceiver`，`MiPushReceiver`代码如下：\n\n![](https://img.carlwe.com/xiaomi_push_receiver.png)\n\n到这里官方文档说已经可以开始测试推送消息，于是把手机进程杀掉，给手机发送一条消息，确实能够收到。但进程杀掉后原本接收正常的极光推送，现在却收不到了🤪，其他厂商机型有的能收到，但点击推送消息不能打开App，我们看下图来分析原因：\n\n![](https://img.carlwe.com/push_confilt_xiaomi.png)\n\n>不管是极光的消息还是云信的消息，首先都会把消息推给小米的推送云服务，然后小米手机系统会和小米的推送云服务保持一个长链接，MiPush SDK收到后，首先会找到继承了`PushMessageReceiver` 并且注册到Manifest的Receiver，并把消息传给这个Receiver，因为极光和云信在Manifest中都注册了`PushMessageReceiver`，所以这个时候谁能收到就存在不确定性了。如果配置了`priority` 优先级，则优先级高的会收到。\n\n回到上面我们注意到网易云信的 `MiPushReceiver `设置了优先级，所以要解释为什么极光的消息就收不到呢，我赶紧查看了下打包后Manifest中极光的`PluginXiaomiPlatformsReceiver` 如下：\n\n```xml\n <receiver\n     android:name=\"cn.jpush.android.service.PluginXiaomiPlatformsReceiver\"\n     android:exported=\"true\">\n     <intent-filter>\n         <action android:name=\"com.xiaomi.mipush.RECEIVE_MESSAGE\" />\n     </intent-filter>\n     <intent-filter>\n         <action android:name=\"com.xiaomi.mipush.MESSAGE_ARRIVED\" />\n     </intent-filter>\n     <intent-filter>\n         <action android:name=\"com.xiaomi.mipush.ERROR\" />\n     </intent-filter>\n </receiver>\n```\n\n果真，极光并没有设置优先级，这就能解释为什么极光的推送在网易云信接入厂商推送后收不到了。\n\n由于不同的厂商接入厂商推送的方式不同，对于上述这种冲突的表现也不太一样，像小米手机云信的消息总是优先于极光的推送，oppo、vivo都会显示消息，但点击通知栏消息无反应(消息没有传到对应的Receiver)，而华为的部分手机则能正常区分。**总之两个Receiver同时去接收厂商的推送，会出现冲突的情况。**\n\n然后我们继续在网易云信和极光的集成文档中寻找解决这种冲突的方案，终于我们在网易云信的文档后面找到了，紧接着我们遇到了第二个问题。\n\n### 问题二\n\n网易云信的推送文档中提供了**[小米推送兼容性](https://dev.yunxin.163.com/docs/product/IM即时通讯/SDK开发集成/Android开发集成/推送?pos=toc-0-0-2)**的处理方案，云信提供了一个`MiPushMessageReceiver` ,让其他接入了厂商推送并处理推送转发逻辑的Receiver继承这个`MiPushMessageReceiver`，然后在对应的回调方法中处理处理相应的逻辑，`MiPushMessageReceiver`如下：\n\n```java\npublic class MiPushMessageReceiver extends BroadcastReceiver{\n    @Override\n    public final void onReceive(Context context, Intent intent) {}\n    public void onReceivePassThroughMessage(Context context, MiPushMessage message) {}\n    public void onNotificationMessageClicked(Context context, MiPushMessage message) {}\n    public void onNotificationMessageArrived(Context context, MiPushMessage message) {}\n    public void onReceiveRegisterResult(Context context, MiPushCommandMessage message) {}\n    public void onCommandResult(Context context, MiPushCommandMessage message) {}\n}\n```\n\n然后将自己的Receiver添加到Manifest中，不去设置priority优先级：\n\n```xml\n<receiver android:name=\"xxx.YourSelfReceiver\">\n    <intent-filter>\n        <action android:name=\"com.xiaomi.mipush.RECEIVE_MESSAGE\"/>\n        <action android:name=\"com.xiaomi.mipush.MESSAGE_ARRIVED\"/>\n        <action android:name=\"com.xiaomi.mipush.ERROR\"/>\n    </intent-filter>\n</receiver>\n```\n\n这样就能保证推送都由网易云信的`MiPushReceiver`先接收到，然后通过判断是否是自己的推送消息，是自己的就直接处理，不是自己的就交给继承自`MiPushMessageReceiver`的Receiver处理，查看网易云信的源码发现确实是这样：\n\n```java\npublic final class MiPushReceiver extends PushMessageReceiver {\n    public MiPushReceiver() {}\n\n    public final void onNotificationMessageClicked(Context var1, MiPushMessage var2) {\n        if (g.a(var2.getExtra())) {\n            c.a(5).onNotificationClick(var1, var2); //自己处理\n        } else {\n            MiPushMessageReceiver var3;\n            if ((var3 = a.a(var1)) != null) {\n                var3.onNotificationMessageClicked(var1, var2);//交给MiPushMessageReceiver处理\n            }\n        }\n    }\n    ...\n}\n```\n\n如果按照云信推荐的方法，处理之后就是这样的流程：\n\n![](https://img.carlwe.com/push_confilct_right.png)\n\n好了到这里处理方式和原理都弄清楚了，我们现在也就只需要将极光处理推送的`PluginXiaomiPlatformsReceiver`改为继承`MiPushMessageReceiver`，然后按照上面的方法将其添加到Manifest中即可，看起来很简单，然后我们再来看看极光的`PluginXiaomiPlatformsReceiver`：\n\n![](https://img.carlwe.com/plugin_xiaomi_push.png)\n\n呃... 那么问题来了，这个类是包在极光推送的arr中的，**怎么去修改打好的arr包中类的继承呢？**这个问题似乎不太好解决啊～\n\n## 解决问题 \n\n### 寻求云信和极光的帮助\n\n首先想到的是这种处理同时监听厂商推送冲突的方案是云信提供的，那就先问问云信的技术有没有解决方案，云信给出的答复如下：\n\n![](https://img.carlwe.com/wechat_yunxin.png)\n\n云信的意思是，他们只提供这种继承的兼容方案，如果是第三方封装了，他们也没太好的办法，然后推荐我们去找极光技术人员，商量把对应的类拆出来，首先想到的是如果极光能提供源码，我们直接修改下继承关系就好了，于是就赶紧找了极光的技术进行了沟通：\n\n![](https://img.carlwe.com/wechat_jiguang.png)\n\n极光的技术表示他们只提供统一封装的版本，同时也没有考虑和其他第三方同时接入SDK导致的冲突问题，并且建议我们只集成一家的厂商通道... \n\n好吧！云信的人让我们找极光商量处理，极光的不但没有提供方案，还让我们别集成多家的厂商通道。不集成肯定满足不了业务需要。不过同时也能理解，不同的第三方在考虑接入厂商通道的时候应该也都是以自身能实现厂商通道来优先考虑，是否会影响其他的第三方，其他第三方是如何实现的，怎么去兼容，他们也管不了那么多，不过像云信还提供了兼容方案的，确实算不错了！后面发现极光的SDK混淆过，所以不提供源码也挺正常。看来拿不到极光`PluginXiaomiPlatformsReceiver` 的源码，云信和极光两方都提供不了有力帮助，问题只能我们自己想办法解决了。\n\n### 分析问题原理，找解决方案\n\n* 分析作用\n\n回过头来再思考下`PluginXiaomiPlatformsReceiver` 类的作用，在极光的SDK中，这个类继承了小米官方的`PushMessageReceiver` ，然后在打包后被添加到了Manifest文件中，从而有了监听小米系统推送、并转发消息给极光的SDK进行处理的能力，同时`PluginXiaomiPlatformsReceiver`类在其他地方并没有被调用。\n\n* 使用继承呢？\n\n既然我们修改不了源码，第一个想到的是能否通过继承该类来实现呢？不过java是单继承，继承了极光的，就没办法再去继承云信的兼容类了，看来继承行不通。\n\n* 从需求出发\n\n其实我们现在只需要有一个类，内部实现逻辑和云信的 `PluginXiaomiPlatformsReceiver` 一样，能将收到的消息转发给云信SDK，并且该类能任意修改继承关系。好了不知道你想到没有，我们可以在自己的代码里写一个一模一样的类，内部的代码直接把`PluginXiaomiPlatformsReceiver`的拷贝过来，然后修改继承关系不就可以了！是的，我们还是来看下云信的`PluginXiaomiPlatformsReceiver`：\n\n![](https://img.carlwe.com/plugin_xiaomi_push.png)\n\n看到虽然这个类混淆了，不过没关系，源码都在sdk中，在外部也可以调用，我们可以直接把代码拷贝到自己新建的类`PluginXiaomiPlatformsReceiverYx`中:\n\n```java\nimport cn.jpush.android.thirdpush.xiaomi.a;//引入极光被混淆的包\n...\n\npublic class PluginXiaomiPlatformsReceiverYx extends MiPushMessageReceiver {\n\n    private static final String TAG = \"XMPlatformsReceiver\";\n    public PluginXiaomiPlatformsReceiverYx() {}\n\n    public void onReceivePassThroughMessage(Context var1, MiPushMessage var2) {\n        Logger.dd(\"XMPlatformsReceiver\", \"onReceivePassThroughMessage is called. \" + var2);\n    }\n\n    public void onNotificationMessageClicked(Context var1, MiPushMessage var2) {\n        Logger.dd(\"XMPlatformsReceiver\", \"onNotificationMessageClicked is called. \" + var2);\n        if (var2 == null) {\n            Logger.v(\"XMPlatformsReceiver\", \"message was null\");\n        } else {\n            //虽然混淆了，但是用的都是极光sdk中的方法一样可以正常工作。\n            a.a(var1, var2, \"action_notification_clicked\");\n        }\n    }\n    ...\n}\n```\n\n可以看到这个类继承了云信提供的`MiPushMessageReceiver`，其每个回调实现和极光之前的一模一样，这样能把收到的消息传给极光处理，然后按照云信的文档将该类添加到Manifest中：\n\n![](https://img.carlwe.com/push_manifest.png)\n\n这里需要注意，为了只让云信去监听厂商的推送，还需要将极光SDK在编译时自动添加到Manifest中的`PluginXiaomiPlatformsReceiver` 手动remove掉，关于Manifest的merge规则我们可以查看Android文档[合并多个清单文件](https://developer.android.google.cn/studio/build/manifest-merge.html)。\n\n这样修改之后，相当于我们就把极光的`PluginXiaomiPlatformsReceiver` **“架空”**了，云信和极光的消息推送就统一由云信来接收，不是云信的消息会交给`PluginXiaomiPlatformsReceiverYx`转发到极光再去处理，流程和上面提到的就一样了：\n\n![](https://img.carlwe.com/push_confilct_right.png)\n\n这里只是以小米厂商推送的冲突为例，其他像华为、魅族、OPPO、VIVO等都可以以同样的方式处理。通过上述方案，可以顺利的完成云信和极光的厂商推送兼容。当升级极光SDK版本时，如果极光各厂商以\"Plugin\"开头的Receiver内部实现有变化，则直接拷贝对应的内容到自定义的Receiver中，这点需要注意。\n\n## 总结 \n\n虽然按照上面的方式可以解决当前的冲突问题，但这里面有一点就是厂商推送的SDK都是包在极光的SDK中，云信自己并没有单独的集成（如果单独集成会冲突）。这就导致后面云信和极光sdk有升级时，可能两家兼容厂商推送sdk的版本不同。比如华为推送sdk有更新，极光兼容了，但网易云信没有兼容，这个时候还是会出一些问题。所以在升级的时候还需要查看下各个厂商对应的兼容情况再升级，针对上述厂商通道推送冲突如果你有更好的解决方案，欢迎在留言区提出！peace ✌️","source":"_posts/Android厂商推送冲突了.md","raw":"---\ntitle: Android厂商推送冲突了\ndate: 2020-03-21 14:55:26\ntags: 技术\n---\n\n![](https://img.carlwe.com/push_confilt_xiaomi.png)\n\n> 本文已授权在 **郭霖公众号** 发布\n\n<!--more-->\n\n* **关于厂商推送**\n\n推送已经成为当下大部分App的必备功能了，相信大家每天都会收到新闻、聊天消息、普通App的活动等消息推送，而为了提升推送的到达率，大家也做了各种优化，最初应用进程被杀后，就收不到推送了，所以前几年就出了各种应用保活的方法，而Android 8.0以后应用保活的“妙招”就很难生效了。为了提升推送的到达率，当应用被杀后大家都会选择走厂商的推送通道，各大厂商在系统级别会有一个长链接来统一处理推送消息，从而确保当应用被杀后你也能顺利收到推送，下图描述了小米的厂商推送流程。\n\n![](https://img.carlwe.com/MiPush逻辑图.png)\n\n* **通知栏消息和透传消息**\n\n通知栏消息：很好理解，就是收到推送自动显示到通知栏的消息。\n\n透传消息：顾名思义就是直接把消息内容传到客户端，对用户来说是透明的，收到消息后是否显示及显示形式由客户端控制，使用起来更加灵活，很多第三方SDK中称之为自定义消息。一般App中的自定义消息也都是用的透传消息，App收到通知后可通过拿到的消息通知的类型，以及需要前往的页面进行相应处理。 \n\n## 问题由来\n\n最开始我们App中使用网易云信来支持聊天业务；使用极光推送来处理业务的推送消息，由于上述Android版本的限制，进程保活变得困难，也是不推荐的方式。这也导致了应用被杀后消息收不到，所以极光和云信都陆续提供了自家关于厂商推送的接入方案。\n\n由于业务需要我们先接入了极光的厂商推送，极光针对不同厂商提供的**厂商推送SDK**进行了封装，你只需要引入对应封装好的包就行，如下：\n\n``` groovy\ndependencies {\n    ...\n    implementation 'cn.jiguang.sdk:jpush:3.3.9'\n    implementation 'cn.jiguang.sdk:jcore:2.1.6'\n    implementation 'cn.jiguang.sdk.plugin:xiaomi:3.3.9'\n    implementation 'cn.jiguang.sdk.plugin:huawei:3.3.9'\n    implementation 'cn.jiguang.sdk.plugin:oppo:3.3.9'\n    ...\n}\n```\n\n以小米为例，我们看看极光引入的`cn.jiguang.sdk.plugin:xiaomi:3.3.9` arr包是如何工作的：\n\n![](https://img.carlwe.com/plugin_xiaomi_push_remark.png)\n\n可以看到极光提供的这个arr包中直接把小米官方提供的`MiPush_SDK_Client_3_6_18.jar`(处理小米厂商推送的SDK) 包了进来，同时提供了一个`PluginXiaomiPlatformsReceiver`类，让其继承自上述小米jar包中的`PushMessageReceiver`，打包后`PluginXiaomiPlatformsReceiver`会被添加到Manifest文件，当系统收到推送后，会将消息转发到继承了`PushMessageReceiver`的类，所以`PluginXiaomiPlatformsReceiver`就会收到消息，并将消息传递给极光自己的SDK进行处理，后面的流程就和App在前台的推送流程一样了。简单总结下这个Plugin类：\n\n>  Plugin类会被注册到Manifest从而接收系统消息，并在对应的回调方法中将消息转发给极光SDK处理。\n\n在网易云信兼容厂商推送之前这一切工作的都很好，应用进程被杀后，push推送可正常收到，问题从云信消息推送兼容厂商推送开始：\n\n### 问题一\n\n按照网易云信提供的 **[接入方法](https://dev.yunxin.163.com/docs/product/IM即时通讯/SDK开发集成/Android开发集成/推送?#小米推送)** 需要接入小米的推送SDK，因为极光的已经引入，所以再次引入会冲突，这里就直接不引入，使用极光的就行，然后按照接入流程接入即可，在接入流程后面我们注意到AndroidManifest.xml文件中会插入如下内容：\n\n```xml\n<receiver\n    android:name=\"com.netease.nimlib.mixpush.mi.MiPushReceiver\"\n    android:exported=\"true\">\n    <intent-filter android:priority=\"0x7fffffff\"> //这里设置了优先级\n        <action android:name=\"com.xiaomi.mipush.RECEIVE_MESSAGE\" />\n        <action android:name=\"com.xiaomi.mipush.MESSAGE_ARRIVED\" />\n        <action android:name=\"com.xiaomi.mipush.ERROR\" />\n    </intent-filter>\n</receiver>\n```\n\n这个`MiPushReceiver`我们查看源码会发现它主要是处理并转发小米厂商推送的各种事件，`MiPushReceiver`同样是继承自小米push sdk中的`PushMessageReceiver`，`MiPushReceiver`代码如下：\n\n![](https://img.carlwe.com/xiaomi_push_receiver.png)\n\n到这里官方文档说已经可以开始测试推送消息，于是把手机进程杀掉，给手机发送一条消息，确实能够收到。但进程杀掉后原本接收正常的极光推送，现在却收不到了🤪，其他厂商机型有的能收到，但点击推送消息不能打开App，我们看下图来分析原因：\n\n![](https://img.carlwe.com/push_confilt_xiaomi.png)\n\n>不管是极光的消息还是云信的消息，首先都会把消息推给小米的推送云服务，然后小米手机系统会和小米的推送云服务保持一个长链接，MiPush SDK收到后，首先会找到继承了`PushMessageReceiver` 并且注册到Manifest的Receiver，并把消息传给这个Receiver，因为极光和云信在Manifest中都注册了`PushMessageReceiver`，所以这个时候谁能收到就存在不确定性了。如果配置了`priority` 优先级，则优先级高的会收到。\n\n回到上面我们注意到网易云信的 `MiPushReceiver `设置了优先级，所以要解释为什么极光的消息就收不到呢，我赶紧查看了下打包后Manifest中极光的`PluginXiaomiPlatformsReceiver` 如下：\n\n```xml\n <receiver\n     android:name=\"cn.jpush.android.service.PluginXiaomiPlatformsReceiver\"\n     android:exported=\"true\">\n     <intent-filter>\n         <action android:name=\"com.xiaomi.mipush.RECEIVE_MESSAGE\" />\n     </intent-filter>\n     <intent-filter>\n         <action android:name=\"com.xiaomi.mipush.MESSAGE_ARRIVED\" />\n     </intent-filter>\n     <intent-filter>\n         <action android:name=\"com.xiaomi.mipush.ERROR\" />\n     </intent-filter>\n </receiver>\n```\n\n果真，极光并没有设置优先级，这就能解释为什么极光的推送在网易云信接入厂商推送后收不到了。\n\n由于不同的厂商接入厂商推送的方式不同，对于上述这种冲突的表现也不太一样，像小米手机云信的消息总是优先于极光的推送，oppo、vivo都会显示消息，但点击通知栏消息无反应(消息没有传到对应的Receiver)，而华为的部分手机则能正常区分。**总之两个Receiver同时去接收厂商的推送，会出现冲突的情况。**\n\n然后我们继续在网易云信和极光的集成文档中寻找解决这种冲突的方案，终于我们在网易云信的文档后面找到了，紧接着我们遇到了第二个问题。\n\n### 问题二\n\n网易云信的推送文档中提供了**[小米推送兼容性](https://dev.yunxin.163.com/docs/product/IM即时通讯/SDK开发集成/Android开发集成/推送?pos=toc-0-0-2)**的处理方案，云信提供了一个`MiPushMessageReceiver` ,让其他接入了厂商推送并处理推送转发逻辑的Receiver继承这个`MiPushMessageReceiver`，然后在对应的回调方法中处理处理相应的逻辑，`MiPushMessageReceiver`如下：\n\n```java\npublic class MiPushMessageReceiver extends BroadcastReceiver{\n    @Override\n    public final void onReceive(Context context, Intent intent) {}\n    public void onReceivePassThroughMessage(Context context, MiPushMessage message) {}\n    public void onNotificationMessageClicked(Context context, MiPushMessage message) {}\n    public void onNotificationMessageArrived(Context context, MiPushMessage message) {}\n    public void onReceiveRegisterResult(Context context, MiPushCommandMessage message) {}\n    public void onCommandResult(Context context, MiPushCommandMessage message) {}\n}\n```\n\n然后将自己的Receiver添加到Manifest中，不去设置priority优先级：\n\n```xml\n<receiver android:name=\"xxx.YourSelfReceiver\">\n    <intent-filter>\n        <action android:name=\"com.xiaomi.mipush.RECEIVE_MESSAGE\"/>\n        <action android:name=\"com.xiaomi.mipush.MESSAGE_ARRIVED\"/>\n        <action android:name=\"com.xiaomi.mipush.ERROR\"/>\n    </intent-filter>\n</receiver>\n```\n\n这样就能保证推送都由网易云信的`MiPushReceiver`先接收到，然后通过判断是否是自己的推送消息，是自己的就直接处理，不是自己的就交给继承自`MiPushMessageReceiver`的Receiver处理，查看网易云信的源码发现确实是这样：\n\n```java\npublic final class MiPushReceiver extends PushMessageReceiver {\n    public MiPushReceiver() {}\n\n    public final void onNotificationMessageClicked(Context var1, MiPushMessage var2) {\n        if (g.a(var2.getExtra())) {\n            c.a(5).onNotificationClick(var1, var2); //自己处理\n        } else {\n            MiPushMessageReceiver var3;\n            if ((var3 = a.a(var1)) != null) {\n                var3.onNotificationMessageClicked(var1, var2);//交给MiPushMessageReceiver处理\n            }\n        }\n    }\n    ...\n}\n```\n\n如果按照云信推荐的方法，处理之后就是这样的流程：\n\n![](https://img.carlwe.com/push_confilct_right.png)\n\n好了到这里处理方式和原理都弄清楚了，我们现在也就只需要将极光处理推送的`PluginXiaomiPlatformsReceiver`改为继承`MiPushMessageReceiver`，然后按照上面的方法将其添加到Manifest中即可，看起来很简单，然后我们再来看看极光的`PluginXiaomiPlatformsReceiver`：\n\n![](https://img.carlwe.com/plugin_xiaomi_push.png)\n\n呃... 那么问题来了，这个类是包在极光推送的arr中的，**怎么去修改打好的arr包中类的继承呢？**这个问题似乎不太好解决啊～\n\n## 解决问题 \n\n### 寻求云信和极光的帮助\n\n首先想到的是这种处理同时监听厂商推送冲突的方案是云信提供的，那就先问问云信的技术有没有解决方案，云信给出的答复如下：\n\n![](https://img.carlwe.com/wechat_yunxin.png)\n\n云信的意思是，他们只提供这种继承的兼容方案，如果是第三方封装了，他们也没太好的办法，然后推荐我们去找极光技术人员，商量把对应的类拆出来，首先想到的是如果极光能提供源码，我们直接修改下继承关系就好了，于是就赶紧找了极光的技术进行了沟通：\n\n![](https://img.carlwe.com/wechat_jiguang.png)\n\n极光的技术表示他们只提供统一封装的版本，同时也没有考虑和其他第三方同时接入SDK导致的冲突问题，并且建议我们只集成一家的厂商通道... \n\n好吧！云信的人让我们找极光商量处理，极光的不但没有提供方案，还让我们别集成多家的厂商通道。不集成肯定满足不了业务需要。不过同时也能理解，不同的第三方在考虑接入厂商通道的时候应该也都是以自身能实现厂商通道来优先考虑，是否会影响其他的第三方，其他第三方是如何实现的，怎么去兼容，他们也管不了那么多，不过像云信还提供了兼容方案的，确实算不错了！后面发现极光的SDK混淆过，所以不提供源码也挺正常。看来拿不到极光`PluginXiaomiPlatformsReceiver` 的源码，云信和极光两方都提供不了有力帮助，问题只能我们自己想办法解决了。\n\n### 分析问题原理，找解决方案\n\n* 分析作用\n\n回过头来再思考下`PluginXiaomiPlatformsReceiver` 类的作用，在极光的SDK中，这个类继承了小米官方的`PushMessageReceiver` ，然后在打包后被添加到了Manifest文件中，从而有了监听小米系统推送、并转发消息给极光的SDK进行处理的能力，同时`PluginXiaomiPlatformsReceiver`类在其他地方并没有被调用。\n\n* 使用继承呢？\n\n既然我们修改不了源码，第一个想到的是能否通过继承该类来实现呢？不过java是单继承，继承了极光的，就没办法再去继承云信的兼容类了，看来继承行不通。\n\n* 从需求出发\n\n其实我们现在只需要有一个类，内部实现逻辑和云信的 `PluginXiaomiPlatformsReceiver` 一样，能将收到的消息转发给云信SDK，并且该类能任意修改继承关系。好了不知道你想到没有，我们可以在自己的代码里写一个一模一样的类，内部的代码直接把`PluginXiaomiPlatformsReceiver`的拷贝过来，然后修改继承关系不就可以了！是的，我们还是来看下云信的`PluginXiaomiPlatformsReceiver`：\n\n![](https://img.carlwe.com/plugin_xiaomi_push.png)\n\n看到虽然这个类混淆了，不过没关系，源码都在sdk中，在外部也可以调用，我们可以直接把代码拷贝到自己新建的类`PluginXiaomiPlatformsReceiverYx`中:\n\n```java\nimport cn.jpush.android.thirdpush.xiaomi.a;//引入极光被混淆的包\n...\n\npublic class PluginXiaomiPlatformsReceiverYx extends MiPushMessageReceiver {\n\n    private static final String TAG = \"XMPlatformsReceiver\";\n    public PluginXiaomiPlatformsReceiverYx() {}\n\n    public void onReceivePassThroughMessage(Context var1, MiPushMessage var2) {\n        Logger.dd(\"XMPlatformsReceiver\", \"onReceivePassThroughMessage is called. \" + var2);\n    }\n\n    public void onNotificationMessageClicked(Context var1, MiPushMessage var2) {\n        Logger.dd(\"XMPlatformsReceiver\", \"onNotificationMessageClicked is called. \" + var2);\n        if (var2 == null) {\n            Logger.v(\"XMPlatformsReceiver\", \"message was null\");\n        } else {\n            //虽然混淆了，但是用的都是极光sdk中的方法一样可以正常工作。\n            a.a(var1, var2, \"action_notification_clicked\");\n        }\n    }\n    ...\n}\n```\n\n可以看到这个类继承了云信提供的`MiPushMessageReceiver`，其每个回调实现和极光之前的一模一样，这样能把收到的消息传给极光处理，然后按照云信的文档将该类添加到Manifest中：\n\n![](https://img.carlwe.com/push_manifest.png)\n\n这里需要注意，为了只让云信去监听厂商的推送，还需要将极光SDK在编译时自动添加到Manifest中的`PluginXiaomiPlatformsReceiver` 手动remove掉，关于Manifest的merge规则我们可以查看Android文档[合并多个清单文件](https://developer.android.google.cn/studio/build/manifest-merge.html)。\n\n这样修改之后，相当于我们就把极光的`PluginXiaomiPlatformsReceiver` **“架空”**了，云信和极光的消息推送就统一由云信来接收，不是云信的消息会交给`PluginXiaomiPlatformsReceiverYx`转发到极光再去处理，流程和上面提到的就一样了：\n\n![](https://img.carlwe.com/push_confilct_right.png)\n\n这里只是以小米厂商推送的冲突为例，其他像华为、魅族、OPPO、VIVO等都可以以同样的方式处理。通过上述方案，可以顺利的完成云信和极光的厂商推送兼容。当升级极光SDK版本时，如果极光各厂商以\"Plugin\"开头的Receiver内部实现有变化，则直接拷贝对应的内容到自定义的Receiver中，这点需要注意。\n\n## 总结 \n\n虽然按照上面的方式可以解决当前的冲突问题，但这里面有一点就是厂商推送的SDK都是包在极光的SDK中，云信自己并没有单独的集成（如果单独集成会冲突）。这就导致后面云信和极光sdk有升级时，可能两家兼容厂商推送sdk的版本不同。比如华为推送sdk有更新，极光兼容了，但网易云信没有兼容，这个时候还是会出一些问题。所以在升级的时候还需要查看下各个厂商对应的兼容情况再升级，针对上述厂商通道推送冲突如果你有更好的解决方案，欢迎在留言区提出！peace ✌️","slug":"Android厂商推送冲突了","published":1,"updated":"2021-11-17T14:23:12.166Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnou0004t57sr8ud81hf","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/push_confilt_xiaomi.png\" alt=\"\"></p>\n<blockquote>\n<p>本文已授权在 <strong>郭霖公众号</strong> 发布</p>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li><strong>关于厂商推送</strong></li>\n</ul>\n<p>推送已经成为当下大部分App的必备功能了，相信大家每天都会收到新闻、聊天消息、普通App的活动等消息推送，而为了提升推送的到达率，大家也做了各种优化，最初应用进程被杀后，就收不到推送了，所以前几年就出了各种应用保活的方法，而Android 8.0以后应用保活的“妙招”就很难生效了。为了提升推送的到达率，当应用被杀后大家都会选择走厂商的推送通道，各大厂商在系统级别会有一个长链接来统一处理推送消息，从而确保当应用被杀后你也能顺利收到推送，下图描述了小米的厂商推送流程。</p>\n<p><img src=\"https://img.carlwe.com/MiPush逻辑图.png\" alt=\"\"></p>\n<ul>\n<li><strong>通知栏消息和透传消息</strong></li>\n</ul>\n<p>通知栏消息：很好理解，就是收到推送自动显示到通知栏的消息。</p>\n<p>透传消息：顾名思义就是直接把消息内容传到客户端，对用户来说是透明的，收到消息后是否显示及显示形式由客户端控制，使用起来更加灵活，很多第三方SDK中称之为自定义消息。一般App中的自定义消息也都是用的透传消息，App收到通知后可通过拿到的消息通知的类型，以及需要前往的页面进行相应处理。 </p>\n<h2 id=\"问题由来\"><a href=\"#问题由来\" class=\"headerlink\" title=\"问题由来\"></a>问题由来</h2><p>最开始我们App中使用网易云信来支持聊天业务；使用极光推送来处理业务的推送消息，由于上述Android版本的限制，进程保活变得困难，也是不推荐的方式。这也导致了应用被杀后消息收不到，所以极光和云信都陆续提供了自家关于厂商推送的接入方案。</p>\n<p>由于业务需要我们先接入了极光的厂商推送，极光针对不同厂商提供的<strong>厂商推送SDK</strong>进行了封装，你只需要引入对应封装好的包就行，如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    implementation <span class=\"string\">'cn.jiguang.sdk:jpush:3.3.9'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'cn.jiguang.sdk:jcore:2.1.6'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'cn.jiguang.sdk.plugin:xiaomi:3.3.9'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'cn.jiguang.sdk.plugin:huawei:3.3.9'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'cn.jiguang.sdk.plugin:oppo:3.3.9'</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以小米为例，我们看看极光引入的<code>cn.jiguang.sdk.plugin:xiaomi:3.3.9</code> arr包是如何工作的：</p>\n<p><img src=\"https://img.carlwe.com/plugin_xiaomi_push_remark.png\" alt=\"\"></p>\n<p>可以看到极光提供的这个arr包中直接把小米官方提供的<code>MiPush_SDK_Client_3_6_18.jar</code>(处理小米厂商推送的SDK) 包了进来，同时提供了一个<code>PluginXiaomiPlatformsReceiver</code>类，让其继承自上述小米jar包中的<code>PushMessageReceiver</code>，打包后<code>PluginXiaomiPlatformsReceiver</code>会被添加到Manifest文件，当系统收到推送后，会将消息转发到继承了<code>PushMessageReceiver</code>的类，所以<code>PluginXiaomiPlatformsReceiver</code>就会收到消息，并将消息传递给极光自己的SDK进行处理，后面的流程就和App在前台的推送流程一样了。简单总结下这个Plugin类：</p>\n<blockquote>\n<p> Plugin类会被注册到Manifest从而接收系统消息，并在对应的回调方法中将消息转发给极光SDK处理。</p>\n</blockquote>\n<p>在网易云信兼容厂商推送之前这一切工作的都很好，应用进程被杀后，push推送可正常收到，问题从云信消息推送兼容厂商推送开始：</p>\n<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><p>按照网易云信提供的 <strong><a href=\"https://dev.yunxin.163.com/docs/product/IM即时通讯/SDK开发集成/Android开发集成/推送?#小米推送\" target=\"_blank\" rel=\"noopener\">接入方法</a></strong> 需要接入小米的推送SDK，因为极光的已经引入，所以再次引入会冲突，这里就直接不引入，使用极光的就行，然后按照接入流程接入即可，在接入流程后面我们注意到AndroidManifest.xml文件中会插入如下内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">receiver</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.netease.nimlib.mixpush.mi.MiPushReceiver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span> <span class=\"attr\">android:priority</span>=<span class=\"string\">\"0x7fffffff\"</span>&gt;</span> //这里设置了优先级</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.RECEIVE_MESSAGE\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.MESSAGE_ARRIVED\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.ERROR\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个<code>MiPushReceiver</code>我们查看源码会发现它主要是处理并转发小米厂商推送的各种事件，<code>MiPushReceiver</code>同样是继承自小米push sdk中的<code>PushMessageReceiver</code>，<code>MiPushReceiver</code>代码如下：</p>\n<p><img src=\"https://img.carlwe.com/xiaomi_push_receiver.png\" alt=\"\"></p>\n<p>到这里官方文档说已经可以开始测试推送消息，于是把手机进程杀掉，给手机发送一条消息，确实能够收到。但进程杀掉后原本接收正常的极光推送，现在却收不到了🤪，其他厂商机型有的能收到，但点击推送消息不能打开App，我们看下图来分析原因：</p>\n<p><img src=\"https://img.carlwe.com/push_confilt_xiaomi.png\" alt=\"\"></p>\n<blockquote>\n<p>不管是极光的消息还是云信的消息，首先都会把消息推给小米的推送云服务，然后小米手机系统会和小米的推送云服务保持一个长链接，MiPush SDK收到后，首先会找到继承了<code>PushMessageReceiver</code> 并且注册到Manifest的Receiver，并把消息传给这个Receiver，因为极光和云信在Manifest中都注册了<code>PushMessageReceiver</code>，所以这个时候谁能收到就存在不确定性了。如果配置了<code>priority</code> 优先级，则优先级高的会收到。</p>\n</blockquote>\n<p>回到上面我们注意到网易云信的 <code>MiPushReceiver</code>设置了优先级，所以要解释为什么极光的消息就收不到呢，我赶紧查看了下打包后Manifest中极光的<code>PluginXiaomiPlatformsReceiver</code> 如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">receiver</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"cn.jpush.android.service.PluginXiaomiPlatformsReceiver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.RECEIVE_MESSAGE\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.MESSAGE_ARRIVED\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.ERROR\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>果真，极光并没有设置优先级，这就能解释为什么极光的推送在网易云信接入厂商推送后收不到了。</p>\n<p>由于不同的厂商接入厂商推送的方式不同，对于上述这种冲突的表现也不太一样，像小米手机云信的消息总是优先于极光的推送，oppo、vivo都会显示消息，但点击通知栏消息无反应(消息没有传到对应的Receiver)，而华为的部分手机则能正常区分。<strong>总之两个Receiver同时去接收厂商的推送，会出现冲突的情况。</strong></p>\n<p>然后我们继续在网易云信和极光的集成文档中寻找解决这种冲突的方案，终于我们在网易云信的文档后面找到了，紧接着我们遇到了第二个问题。</p>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><p>网易云信的推送文档中提供了<strong><a href=\"https://dev.yunxin.163.com/docs/product/IM即时通讯/SDK开发集成/Android开发集成/推送?pos=toc-0-0-2\" target=\"_blank\" rel=\"noopener\">小米推送兼容性</a></strong>的处理方案，云信提供了一个<code>MiPushMessageReceiver</code> ,让其他接入了厂商推送并处理推送转发逻辑的Receiver继承这个<code>MiPushMessageReceiver</code>，然后在对应的回调方法中处理处理相应的逻辑，<code>MiPushMessageReceiver</code>如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MiPushMessageReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivePassThroughMessage</span><span class=\"params\">(Context context, MiPushMessage message)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNotificationMessageClicked</span><span class=\"params\">(Context context, MiPushMessage message)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNotificationMessageArrived</span><span class=\"params\">(Context context, MiPushMessage message)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceiveRegisterResult</span><span class=\"params\">(Context context, MiPushCommandMessage message)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCommandResult</span><span class=\"params\">(Context context, MiPushCommandMessage message)</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将自己的Receiver添加到Manifest中，不去设置priority优先级：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">receiver</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"xxx.YourSelfReceiver\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.RECEIVE_MESSAGE\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.MESSAGE_ARRIVED\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.ERROR\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样就能保证推送都由网易云信的<code>MiPushReceiver</code>先接收到，然后通过判断是否是自己的推送消息，是自己的就直接处理，不是自己的就交给继承自<code>MiPushMessageReceiver</code>的Receiver处理，查看网易云信的源码发现确实是这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MiPushReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">PushMessageReceiver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MiPushReceiver</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">onNotificationMessageClicked</span><span class=\"params\">(Context var1, MiPushMessage var2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g.a(var2.getExtra())) &#123;</span><br><span class=\"line\">            c.a(<span class=\"number\">5</span>).onNotificationClick(var1, var2); <span class=\"comment\">//自己处理</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            MiPushMessageReceiver var3;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((var3 = a.a(var1)) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                var3.onNotificationMessageClicked(var1, var2);<span class=\"comment\">//交给MiPushMessageReceiver处理</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果按照云信推荐的方法，处理之后就是这样的流程：</p>\n<p><img src=\"https://img.carlwe.com/push_confilct_right.png\" alt=\"\"></p>\n<p>好了到这里处理方式和原理都弄清楚了，我们现在也就只需要将极光处理推送的<code>PluginXiaomiPlatformsReceiver</code>改为继承<code>MiPushMessageReceiver</code>，然后按照上面的方法将其添加到Manifest中即可，看起来很简单，然后我们再来看看极光的<code>PluginXiaomiPlatformsReceiver</code>：</p>\n<p><img src=\"https://img.carlwe.com/plugin_xiaomi_push.png\" alt=\"\"></p>\n<p>呃… 那么问题来了，这个类是包在极光推送的arr中的，<strong>怎么去修改打好的arr包中类的继承呢？</strong>这个问题似乎不太好解决啊～</p>\n<h2 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h2><h3 id=\"寻求云信和极光的帮助\"><a href=\"#寻求云信和极光的帮助\" class=\"headerlink\" title=\"寻求云信和极光的帮助\"></a>寻求云信和极光的帮助</h3><p>首先想到的是这种处理同时监听厂商推送冲突的方案是云信提供的，那就先问问云信的技术有没有解决方案，云信给出的答复如下：</p>\n<p><img src=\"https://img.carlwe.com/wechat_yunxin.png\" alt=\"\"></p>\n<p>云信的意思是，他们只提供这种继承的兼容方案，如果是第三方封装了，他们也没太好的办法，然后推荐我们去找极光技术人员，商量把对应的类拆出来，首先想到的是如果极光能提供源码，我们直接修改下继承关系就好了，于是就赶紧找了极光的技术进行了沟通：</p>\n<p><img src=\"https://img.carlwe.com/wechat_jiguang.png\" alt=\"\"></p>\n<p>极光的技术表示他们只提供统一封装的版本，同时也没有考虑和其他第三方同时接入SDK导致的冲突问题，并且建议我们只集成一家的厂商通道… </p>\n<p>好吧！云信的人让我们找极光商量处理，极光的不但没有提供方案，还让我们别集成多家的厂商通道。不集成肯定满足不了业务需要。不过同时也能理解，不同的第三方在考虑接入厂商通道的时候应该也都是以自身能实现厂商通道来优先考虑，是否会影响其他的第三方，其他第三方是如何实现的，怎么去兼容，他们也管不了那么多，不过像云信还提供了兼容方案的，确实算不错了！后面发现极光的SDK混淆过，所以不提供源码也挺正常。看来拿不到极光<code>PluginXiaomiPlatformsReceiver</code> 的源码，云信和极光两方都提供不了有力帮助，问题只能我们自己想办法解决了。</p>\n<h3 id=\"分析问题原理，找解决方案\"><a href=\"#分析问题原理，找解决方案\" class=\"headerlink\" title=\"分析问题原理，找解决方案\"></a>分析问题原理，找解决方案</h3><ul>\n<li>分析作用</li>\n</ul>\n<p>回过头来再思考下<code>PluginXiaomiPlatformsReceiver</code> 类的作用，在极光的SDK中，这个类继承了小米官方的<code>PushMessageReceiver</code> ，然后在打包后被添加到了Manifest文件中，从而有了监听小米系统推送、并转发消息给极光的SDK进行处理的能力，同时<code>PluginXiaomiPlatformsReceiver</code>类在其他地方并没有被调用。</p>\n<ul>\n<li>使用继承呢？</li>\n</ul>\n<p>既然我们修改不了源码，第一个想到的是能否通过继承该类来实现呢？不过java是单继承，继承了极光的，就没办法再去继承云信的兼容类了，看来继承行不通。</p>\n<ul>\n<li>从需求出发</li>\n</ul>\n<p>其实我们现在只需要有一个类，内部实现逻辑和云信的 <code>PluginXiaomiPlatformsReceiver</code> 一样，能将收到的消息转发给云信SDK，并且该类能任意修改继承关系。好了不知道你想到没有，我们可以在自己的代码里写一个一模一样的类，内部的代码直接把<code>PluginXiaomiPlatformsReceiver</code>的拷贝过来，然后修改继承关系不就可以了！是的，我们还是来看下云信的<code>PluginXiaomiPlatformsReceiver</code>：</p>\n<p><img src=\"https://img.carlwe.com/plugin_xiaomi_push.png\" alt=\"\"></p>\n<p>看到虽然这个类混淆了，不过没关系，源码都在sdk中，在外部也可以调用，我们可以直接把代码拷贝到自己新建的类<code>PluginXiaomiPlatformsReceiverYx</code>中:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cn.jpush.android.thirdpush.xiaomi.a;<span class=\"comment\">//引入极光被混淆的包</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PluginXiaomiPlatformsReceiverYx</span> <span class=\"keyword\">extends</span> <span class=\"title\">MiPushMessageReceiver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"XMPlatformsReceiver\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PluginXiaomiPlatformsReceiverYx</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivePassThroughMessage</span><span class=\"params\">(Context var1, MiPushMessage var2)</span> </span>&#123;</span><br><span class=\"line\">        Logger.dd(<span class=\"string\">\"XMPlatformsReceiver\"</span>, <span class=\"string\">\"onReceivePassThroughMessage is called. \"</span> + var2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNotificationMessageClicked</span><span class=\"params\">(Context var1, MiPushMessage var2)</span> </span>&#123;</span><br><span class=\"line\">        Logger.dd(<span class=\"string\">\"XMPlatformsReceiver\"</span>, <span class=\"string\">\"onNotificationMessageClicked is called. \"</span> + var2);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var2 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Logger.v(<span class=\"string\">\"XMPlatformsReceiver\"</span>, <span class=\"string\">\"message was null\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//虽然混淆了，但是用的都是极光sdk中的方法一样可以正常工作。</span></span><br><span class=\"line\">            a.a(var1, var2, <span class=\"string\">\"action_notification_clicked\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到这个类继承了云信提供的<code>MiPushMessageReceiver</code>，其每个回调实现和极光之前的一模一样，这样能把收到的消息传给极光处理，然后按照云信的文档将该类添加到Manifest中：</p>\n<p><img src=\"https://img.carlwe.com/push_manifest.png\" alt=\"\"></p>\n<p>这里需要注意，为了只让云信去监听厂商的推送，还需要将极光SDK在编译时自动添加到Manifest中的<code>PluginXiaomiPlatformsReceiver</code> 手动remove掉，关于Manifest的merge规则我们可以查看Android文档<a href=\"https://developer.android.google.cn/studio/build/manifest-merge.html\" target=\"_blank\" rel=\"noopener\">合并多个清单文件</a>。</p>\n<p>这样修改之后，相当于我们就把极光的<code>PluginXiaomiPlatformsReceiver</code> <strong>“架空”</strong>了，云信和极光的消息推送就统一由云信来接收，不是云信的消息会交给<code>PluginXiaomiPlatformsReceiverYx</code>转发到极光再去处理，流程和上面提到的就一样了：</p>\n<p><img src=\"https://img.carlwe.com/push_confilct_right.png\" alt=\"\"></p>\n<p>这里只是以小米厂商推送的冲突为例，其他像华为、魅族、OPPO、VIVO等都可以以同样的方式处理。通过上述方案，可以顺利的完成云信和极光的厂商推送兼容。当升级极光SDK版本时，如果极光各厂商以”Plugin”开头的Receiver内部实现有变化，则直接拷贝对应的内容到自定义的Receiver中，这点需要注意。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然按照上面的方式可以解决当前的冲突问题，但这里面有一点就是厂商推送的SDK都是包在极光的SDK中，云信自己并没有单独的集成（如果单独集成会冲突）。这就导致后面云信和极光sdk有升级时，可能两家兼容厂商推送sdk的版本不同。比如华为推送sdk有更新，极光兼容了，但网易云信没有兼容，这个时候还是会出一些问题。所以在升级的时候还需要查看下各个厂商对应的兼容情况再升级，针对上述厂商通道推送冲突如果你有更好的解决方案，欢迎在留言区提出！peace ✌️</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/push_confilt_xiaomi.png\" alt=\"\"></p>\n<blockquote>\n<p>本文已授权在 <strong>郭霖公众号</strong> 发布</p>\n</blockquote>","more":"<ul>\n<li><strong>关于厂商推送</strong></li>\n</ul>\n<p>推送已经成为当下大部分App的必备功能了，相信大家每天都会收到新闻、聊天消息、普通App的活动等消息推送，而为了提升推送的到达率，大家也做了各种优化，最初应用进程被杀后，就收不到推送了，所以前几年就出了各种应用保活的方法，而Android 8.0以后应用保活的“妙招”就很难生效了。为了提升推送的到达率，当应用被杀后大家都会选择走厂商的推送通道，各大厂商在系统级别会有一个长链接来统一处理推送消息，从而确保当应用被杀后你也能顺利收到推送，下图描述了小米的厂商推送流程。</p>\n<p><img src=\"https://img.carlwe.com/MiPush逻辑图.png\" alt=\"\"></p>\n<ul>\n<li><strong>通知栏消息和透传消息</strong></li>\n</ul>\n<p>通知栏消息：很好理解，就是收到推送自动显示到通知栏的消息。</p>\n<p>透传消息：顾名思义就是直接把消息内容传到客户端，对用户来说是透明的，收到消息后是否显示及显示形式由客户端控制，使用起来更加灵活，很多第三方SDK中称之为自定义消息。一般App中的自定义消息也都是用的透传消息，App收到通知后可通过拿到的消息通知的类型，以及需要前往的页面进行相应处理。 </p>\n<h2 id=\"问题由来\"><a href=\"#问题由来\" class=\"headerlink\" title=\"问题由来\"></a>问题由来</h2><p>最开始我们App中使用网易云信来支持聊天业务；使用极光推送来处理业务的推送消息，由于上述Android版本的限制，进程保活变得困难，也是不推荐的方式。这也导致了应用被杀后消息收不到，所以极光和云信都陆续提供了自家关于厂商推送的接入方案。</p>\n<p>由于业务需要我们先接入了极光的厂商推送，极光针对不同厂商提供的<strong>厂商推送SDK</strong>进行了封装，你只需要引入对应封装好的包就行，如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    implementation <span class=\"string\">'cn.jiguang.sdk:jpush:3.3.9'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'cn.jiguang.sdk:jcore:2.1.6'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'cn.jiguang.sdk.plugin:xiaomi:3.3.9'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'cn.jiguang.sdk.plugin:huawei:3.3.9'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'cn.jiguang.sdk.plugin:oppo:3.3.9'</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以小米为例，我们看看极光引入的<code>cn.jiguang.sdk.plugin:xiaomi:3.3.9</code> arr包是如何工作的：</p>\n<p><img src=\"https://img.carlwe.com/plugin_xiaomi_push_remark.png\" alt=\"\"></p>\n<p>可以看到极光提供的这个arr包中直接把小米官方提供的<code>MiPush_SDK_Client_3_6_18.jar</code>(处理小米厂商推送的SDK) 包了进来，同时提供了一个<code>PluginXiaomiPlatformsReceiver</code>类，让其继承自上述小米jar包中的<code>PushMessageReceiver</code>，打包后<code>PluginXiaomiPlatformsReceiver</code>会被添加到Manifest文件，当系统收到推送后，会将消息转发到继承了<code>PushMessageReceiver</code>的类，所以<code>PluginXiaomiPlatformsReceiver</code>就会收到消息，并将消息传递给极光自己的SDK进行处理，后面的流程就和App在前台的推送流程一样了。简单总结下这个Plugin类：</p>\n<blockquote>\n<p> Plugin类会被注册到Manifest从而接收系统消息，并在对应的回调方法中将消息转发给极光SDK处理。</p>\n</blockquote>\n<p>在网易云信兼容厂商推送之前这一切工作的都很好，应用进程被杀后，push推送可正常收到，问题从云信消息推送兼容厂商推送开始：</p>\n<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><p>按照网易云信提供的 <strong><a href=\"https://dev.yunxin.163.com/docs/product/IM即时通讯/SDK开发集成/Android开发集成/推送?#小米推送\" target=\"_blank\" rel=\"noopener\">接入方法</a></strong> 需要接入小米的推送SDK，因为极光的已经引入，所以再次引入会冲突，这里就直接不引入，使用极光的就行，然后按照接入流程接入即可，在接入流程后面我们注意到AndroidManifest.xml文件中会插入如下内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">receiver</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.netease.nimlib.mixpush.mi.MiPushReceiver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span> <span class=\"attr\">android:priority</span>=<span class=\"string\">\"0x7fffffff\"</span>&gt;</span> //这里设置了优先级</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.RECEIVE_MESSAGE\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.MESSAGE_ARRIVED\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.ERROR\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个<code>MiPushReceiver</code>我们查看源码会发现它主要是处理并转发小米厂商推送的各种事件，<code>MiPushReceiver</code>同样是继承自小米push sdk中的<code>PushMessageReceiver</code>，<code>MiPushReceiver</code>代码如下：</p>\n<p><img src=\"https://img.carlwe.com/xiaomi_push_receiver.png\" alt=\"\"></p>\n<p>到这里官方文档说已经可以开始测试推送消息，于是把手机进程杀掉，给手机发送一条消息，确实能够收到。但进程杀掉后原本接收正常的极光推送，现在却收不到了🤪，其他厂商机型有的能收到，但点击推送消息不能打开App，我们看下图来分析原因：</p>\n<p><img src=\"https://img.carlwe.com/push_confilt_xiaomi.png\" alt=\"\"></p>\n<blockquote>\n<p>不管是极光的消息还是云信的消息，首先都会把消息推给小米的推送云服务，然后小米手机系统会和小米的推送云服务保持一个长链接，MiPush SDK收到后，首先会找到继承了<code>PushMessageReceiver</code> 并且注册到Manifest的Receiver，并把消息传给这个Receiver，因为极光和云信在Manifest中都注册了<code>PushMessageReceiver</code>，所以这个时候谁能收到就存在不确定性了。如果配置了<code>priority</code> 优先级，则优先级高的会收到。</p>\n</blockquote>\n<p>回到上面我们注意到网易云信的 <code>MiPushReceiver</code>设置了优先级，所以要解释为什么极光的消息就收不到呢，我赶紧查看了下打包后Manifest中极光的<code>PluginXiaomiPlatformsReceiver</code> 如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">receiver</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"cn.jpush.android.service.PluginXiaomiPlatformsReceiver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.RECEIVE_MESSAGE\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.MESSAGE_ARRIVED\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.ERROR\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>果真，极光并没有设置优先级，这就能解释为什么极光的推送在网易云信接入厂商推送后收不到了。</p>\n<p>由于不同的厂商接入厂商推送的方式不同，对于上述这种冲突的表现也不太一样，像小米手机云信的消息总是优先于极光的推送，oppo、vivo都会显示消息，但点击通知栏消息无反应(消息没有传到对应的Receiver)，而华为的部分手机则能正常区分。<strong>总之两个Receiver同时去接收厂商的推送，会出现冲突的情况。</strong></p>\n<p>然后我们继续在网易云信和极光的集成文档中寻找解决这种冲突的方案，终于我们在网易云信的文档后面找到了，紧接着我们遇到了第二个问题。</p>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><p>网易云信的推送文档中提供了<strong><a href=\"https://dev.yunxin.163.com/docs/product/IM即时通讯/SDK开发集成/Android开发集成/推送?pos=toc-0-0-2\" target=\"_blank\" rel=\"noopener\">小米推送兼容性</a></strong>的处理方案，云信提供了一个<code>MiPushMessageReceiver</code> ,让其他接入了厂商推送并处理推送转发逻辑的Receiver继承这个<code>MiPushMessageReceiver</code>，然后在对应的回调方法中处理处理相应的逻辑，<code>MiPushMessageReceiver</code>如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MiPushMessageReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivePassThroughMessage</span><span class=\"params\">(Context context, MiPushMessage message)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNotificationMessageClicked</span><span class=\"params\">(Context context, MiPushMessage message)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNotificationMessageArrived</span><span class=\"params\">(Context context, MiPushMessage message)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceiveRegisterResult</span><span class=\"params\">(Context context, MiPushCommandMessage message)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCommandResult</span><span class=\"params\">(Context context, MiPushCommandMessage message)</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将自己的Receiver添加到Manifest中，不去设置priority优先级：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">receiver</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"xxx.YourSelfReceiver\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.RECEIVE_MESSAGE\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.MESSAGE_ARRIVED\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.xiaomi.mipush.ERROR\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样就能保证推送都由网易云信的<code>MiPushReceiver</code>先接收到，然后通过判断是否是自己的推送消息，是自己的就直接处理，不是自己的就交给继承自<code>MiPushMessageReceiver</code>的Receiver处理，查看网易云信的源码发现确实是这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MiPushReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">PushMessageReceiver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MiPushReceiver</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">onNotificationMessageClicked</span><span class=\"params\">(Context var1, MiPushMessage var2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g.a(var2.getExtra())) &#123;</span><br><span class=\"line\">            c.a(<span class=\"number\">5</span>).onNotificationClick(var1, var2); <span class=\"comment\">//自己处理</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            MiPushMessageReceiver var3;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((var3 = a.a(var1)) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                var3.onNotificationMessageClicked(var1, var2);<span class=\"comment\">//交给MiPushMessageReceiver处理</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果按照云信推荐的方法，处理之后就是这样的流程：</p>\n<p><img src=\"https://img.carlwe.com/push_confilct_right.png\" alt=\"\"></p>\n<p>好了到这里处理方式和原理都弄清楚了，我们现在也就只需要将极光处理推送的<code>PluginXiaomiPlatformsReceiver</code>改为继承<code>MiPushMessageReceiver</code>，然后按照上面的方法将其添加到Manifest中即可，看起来很简单，然后我们再来看看极光的<code>PluginXiaomiPlatformsReceiver</code>：</p>\n<p><img src=\"https://img.carlwe.com/plugin_xiaomi_push.png\" alt=\"\"></p>\n<p>呃… 那么问题来了，这个类是包在极光推送的arr中的，<strong>怎么去修改打好的arr包中类的继承呢？</strong>这个问题似乎不太好解决啊～</p>\n<h2 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h2><h3 id=\"寻求云信和极光的帮助\"><a href=\"#寻求云信和极光的帮助\" class=\"headerlink\" title=\"寻求云信和极光的帮助\"></a>寻求云信和极光的帮助</h3><p>首先想到的是这种处理同时监听厂商推送冲突的方案是云信提供的，那就先问问云信的技术有没有解决方案，云信给出的答复如下：</p>\n<p><img src=\"https://img.carlwe.com/wechat_yunxin.png\" alt=\"\"></p>\n<p>云信的意思是，他们只提供这种继承的兼容方案，如果是第三方封装了，他们也没太好的办法，然后推荐我们去找极光技术人员，商量把对应的类拆出来，首先想到的是如果极光能提供源码，我们直接修改下继承关系就好了，于是就赶紧找了极光的技术进行了沟通：</p>\n<p><img src=\"https://img.carlwe.com/wechat_jiguang.png\" alt=\"\"></p>\n<p>极光的技术表示他们只提供统一封装的版本，同时也没有考虑和其他第三方同时接入SDK导致的冲突问题，并且建议我们只集成一家的厂商通道… </p>\n<p>好吧！云信的人让我们找极光商量处理，极光的不但没有提供方案，还让我们别集成多家的厂商通道。不集成肯定满足不了业务需要。不过同时也能理解，不同的第三方在考虑接入厂商通道的时候应该也都是以自身能实现厂商通道来优先考虑，是否会影响其他的第三方，其他第三方是如何实现的，怎么去兼容，他们也管不了那么多，不过像云信还提供了兼容方案的，确实算不错了！后面发现极光的SDK混淆过，所以不提供源码也挺正常。看来拿不到极光<code>PluginXiaomiPlatformsReceiver</code> 的源码，云信和极光两方都提供不了有力帮助，问题只能我们自己想办法解决了。</p>\n<h3 id=\"分析问题原理，找解决方案\"><a href=\"#分析问题原理，找解决方案\" class=\"headerlink\" title=\"分析问题原理，找解决方案\"></a>分析问题原理，找解决方案</h3><ul>\n<li>分析作用</li>\n</ul>\n<p>回过头来再思考下<code>PluginXiaomiPlatformsReceiver</code> 类的作用，在极光的SDK中，这个类继承了小米官方的<code>PushMessageReceiver</code> ，然后在打包后被添加到了Manifest文件中，从而有了监听小米系统推送、并转发消息给极光的SDK进行处理的能力，同时<code>PluginXiaomiPlatformsReceiver</code>类在其他地方并没有被调用。</p>\n<ul>\n<li>使用继承呢？</li>\n</ul>\n<p>既然我们修改不了源码，第一个想到的是能否通过继承该类来实现呢？不过java是单继承，继承了极光的，就没办法再去继承云信的兼容类了，看来继承行不通。</p>\n<ul>\n<li>从需求出发</li>\n</ul>\n<p>其实我们现在只需要有一个类，内部实现逻辑和云信的 <code>PluginXiaomiPlatformsReceiver</code> 一样，能将收到的消息转发给云信SDK，并且该类能任意修改继承关系。好了不知道你想到没有，我们可以在自己的代码里写一个一模一样的类，内部的代码直接把<code>PluginXiaomiPlatformsReceiver</code>的拷贝过来，然后修改继承关系不就可以了！是的，我们还是来看下云信的<code>PluginXiaomiPlatformsReceiver</code>：</p>\n<p><img src=\"https://img.carlwe.com/plugin_xiaomi_push.png\" alt=\"\"></p>\n<p>看到虽然这个类混淆了，不过没关系，源码都在sdk中，在外部也可以调用，我们可以直接把代码拷贝到自己新建的类<code>PluginXiaomiPlatformsReceiverYx</code>中:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cn.jpush.android.thirdpush.xiaomi.a;<span class=\"comment\">//引入极光被混淆的包</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PluginXiaomiPlatformsReceiverYx</span> <span class=\"keyword\">extends</span> <span class=\"title\">MiPushMessageReceiver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"XMPlatformsReceiver\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PluginXiaomiPlatformsReceiverYx</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivePassThroughMessage</span><span class=\"params\">(Context var1, MiPushMessage var2)</span> </span>&#123;</span><br><span class=\"line\">        Logger.dd(<span class=\"string\">\"XMPlatformsReceiver\"</span>, <span class=\"string\">\"onReceivePassThroughMessage is called. \"</span> + var2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNotificationMessageClicked</span><span class=\"params\">(Context var1, MiPushMessage var2)</span> </span>&#123;</span><br><span class=\"line\">        Logger.dd(<span class=\"string\">\"XMPlatformsReceiver\"</span>, <span class=\"string\">\"onNotificationMessageClicked is called. \"</span> + var2);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var2 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Logger.v(<span class=\"string\">\"XMPlatformsReceiver\"</span>, <span class=\"string\">\"message was null\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//虽然混淆了，但是用的都是极光sdk中的方法一样可以正常工作。</span></span><br><span class=\"line\">            a.a(var1, var2, <span class=\"string\">\"action_notification_clicked\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到这个类继承了云信提供的<code>MiPushMessageReceiver</code>，其每个回调实现和极光之前的一模一样，这样能把收到的消息传给极光处理，然后按照云信的文档将该类添加到Manifest中：</p>\n<p><img src=\"https://img.carlwe.com/push_manifest.png\" alt=\"\"></p>\n<p>这里需要注意，为了只让云信去监听厂商的推送，还需要将极光SDK在编译时自动添加到Manifest中的<code>PluginXiaomiPlatformsReceiver</code> 手动remove掉，关于Manifest的merge规则我们可以查看Android文档<a href=\"https://developer.android.google.cn/studio/build/manifest-merge.html\" target=\"_blank\" rel=\"noopener\">合并多个清单文件</a>。</p>\n<p>这样修改之后，相当于我们就把极光的<code>PluginXiaomiPlatformsReceiver</code> <strong>“架空”</strong>了，云信和极光的消息推送就统一由云信来接收，不是云信的消息会交给<code>PluginXiaomiPlatformsReceiverYx</code>转发到极光再去处理，流程和上面提到的就一样了：</p>\n<p><img src=\"https://img.carlwe.com/push_confilct_right.png\" alt=\"\"></p>\n<p>这里只是以小米厂商推送的冲突为例，其他像华为、魅族、OPPO、VIVO等都可以以同样的方式处理。通过上述方案，可以顺利的完成云信和极光的厂商推送兼容。当升级极光SDK版本时，如果极光各厂商以”Plugin”开头的Receiver内部实现有变化，则直接拷贝对应的内容到自定义的Receiver中，这点需要注意。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然按照上面的方式可以解决当前的冲突问题，但这里面有一点就是厂商推送的SDK都是包在极光的SDK中，云信自己并没有单独的集成（如果单独集成会冲突）。这就导致后面云信和极光sdk有升级时，可能两家兼容厂商推送sdk的版本不同。比如华为推送sdk有更新，极光兼容了，但网易云信没有兼容，这个时候还是会出一些问题。所以在升级的时候还需要查看下各个厂商对应的兼容情况再升级，针对上述厂商通道推送冲突如果你有更好的解决方案，欢迎在留言区提出！peace ✌️</p>"},{"title":"Kotlin中使用data class的代价","date":"2020-01-24T03:21:36.000Z","_content":"\n![](https://img.carlwe.com/data_class_user.png)\n\n<!--more-->\n\n## 偶然的发现\n\n最近在做业务删减及apk瘦身，当然得分析安装包的大小，首先就是资源文件以及其他文件的瘦身了，完成之后再继续看了下dex文件，然后按照体积从大到小依次往下找，找到了体积最大的一个类文件。让我惊奇的是，单个体积最大的类文件竟然是一个实体类，而查看代码后发现该类为Kotlin中以简洁著称的 **data class**，一个类文件就有20K😲，比项目中大部分的图片都大了，如下图：\n\n![](https://img.carlwe.com/bigest_data_class_path.png)\n\n下面就来具体讲讲 data class。\n\n## data class优点\n\n正如封面图所示，定义一个类及其属性，只需一行代码，相比java中的class，编译器会自动帮助我们实现构造方法、@Metadata信息及如下方法：\n\n```kotlin\nequals()\nhashCode()\ntoString()\ncomponentN()\ncopy()\n```\n\n使用起来可以说是非常方便了。\n\n## data class带来的问题\n\n当data class中的变量较少时，使用起来确实方便，就拿上述User类来说，编译之后会生成的代码如下：\n\n![](https://img.carlwe.com/user_data_class_decompiled.png)\n\n总共89行，看起来还ok，让我们回到上面那个Good类，属性比较多，总共加起来80个属性，通过Android Studio中Tools -> Kotlin -> show kotlin buytcode -> Decompile. 查看编译之后的java代码如下：\n\n![](https://img.carlwe.com/data_class_good_java.png)\n\n一共2320行！确实是比较大的一个文件。因为这个类其实没有用到编译器自动生成的几个方法，我尝试仅仅把data去掉，改成class. 同样查看编译之后的java文件如下：\n\n![](https://img.carlwe.com/class_with_good_java.png)\n\n1044行，少了近一半了，然后再打包之后看看最终的文件大小如下：\n\n![](https://img.carlwe.com/class_with_good_size.png)\n\n效果很明显，Good类大小从20.4K直接降到了6.3K，不到之前三分之一的大小。于是将所有的data class更换成了class，整个apk体积也小了不少。\n\n### 总结\n\n总的来说data class用起来确实很方便，但是这些方便却是通过牺牲最终的文件大小换来的。所以大家以后使用data class 可综合考虑使用场景。","source":"_posts/Kotlin中使用data class的代价.md","raw":"---\ntitle: Kotlin中使用data class的代价\ndate: 2020-01-24 11:21:36\ntags: 技术\n---\n\n![](https://img.carlwe.com/data_class_user.png)\n\n<!--more-->\n\n## 偶然的发现\n\n最近在做业务删减及apk瘦身，当然得分析安装包的大小，首先就是资源文件以及其他文件的瘦身了，完成之后再继续看了下dex文件，然后按照体积从大到小依次往下找，找到了体积最大的一个类文件。让我惊奇的是，单个体积最大的类文件竟然是一个实体类，而查看代码后发现该类为Kotlin中以简洁著称的 **data class**，一个类文件就有20K😲，比项目中大部分的图片都大了，如下图：\n\n![](https://img.carlwe.com/bigest_data_class_path.png)\n\n下面就来具体讲讲 data class。\n\n## data class优点\n\n正如封面图所示，定义一个类及其属性，只需一行代码，相比java中的class，编译器会自动帮助我们实现构造方法、@Metadata信息及如下方法：\n\n```kotlin\nequals()\nhashCode()\ntoString()\ncomponentN()\ncopy()\n```\n\n使用起来可以说是非常方便了。\n\n## data class带来的问题\n\n当data class中的变量较少时，使用起来确实方便，就拿上述User类来说，编译之后会生成的代码如下：\n\n![](https://img.carlwe.com/user_data_class_decompiled.png)\n\n总共89行，看起来还ok，让我们回到上面那个Good类，属性比较多，总共加起来80个属性，通过Android Studio中Tools -> Kotlin -> show kotlin buytcode -> Decompile. 查看编译之后的java代码如下：\n\n![](https://img.carlwe.com/data_class_good_java.png)\n\n一共2320行！确实是比较大的一个文件。因为这个类其实没有用到编译器自动生成的几个方法，我尝试仅仅把data去掉，改成class. 同样查看编译之后的java文件如下：\n\n![](https://img.carlwe.com/class_with_good_java.png)\n\n1044行，少了近一半了，然后再打包之后看看最终的文件大小如下：\n\n![](https://img.carlwe.com/class_with_good_size.png)\n\n效果很明显，Good类大小从20.4K直接降到了6.3K，不到之前三分之一的大小。于是将所有的data class更换成了class，整个apk体积也小了不少。\n\n### 总结\n\n总的来说data class用起来确实很方便，但是这些方便却是通过牺牲最终的文件大小换来的。所以大家以后使用data class 可综合考虑使用场景。","slug":"Kotlin中使用data class的代价","published":1,"updated":"2020-08-18T02:25:58.809Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnow0005t57sf7igei5h","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/data_class_user.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"偶然的发现\"><a href=\"#偶然的发现\" class=\"headerlink\" title=\"偶然的发现\"></a>偶然的发现</h2><p>最近在做业务删减及apk瘦身，当然得分析安装包的大小，首先就是资源文件以及其他文件的瘦身了，完成之后再继续看了下dex文件，然后按照体积从大到小依次往下找，找到了体积最大的一个类文件。让我惊奇的是，单个体积最大的类文件竟然是一个实体类，而查看代码后发现该类为Kotlin中以简洁著称的 <strong>data class</strong>，一个类文件就有20K😲，比项目中大部分的图片都大了，如下图：</p>\n<p><img src=\"https://img.carlwe.com/bigest_data_class_path.png\" alt=\"\"></p>\n<p>下面就来具体讲讲 data class。</p>\n<h2 id=\"data-class优点\"><a href=\"#data-class优点\" class=\"headerlink\" title=\"data class优点\"></a>data class优点</h2><p>正如封面图所示，定义一个类及其属性，只需一行代码，相比java中的class，编译器会自动帮助我们实现构造方法、@Metadata信息及如下方法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">equals()</span><br><span class=\"line\">hashCode()</span><br><span class=\"line\">toString()</span><br><span class=\"line\">componentN()</span><br><span class=\"line\">copy()</span><br></pre></td></tr></table></figure>\n<p>使用起来可以说是非常方便了。</p>\n<h2 id=\"data-class带来的问题\"><a href=\"#data-class带来的问题\" class=\"headerlink\" title=\"data class带来的问题\"></a>data class带来的问题</h2><p>当data class中的变量较少时，使用起来确实方便，就拿上述User类来说，编译之后会生成的代码如下：</p>\n<p><img src=\"https://img.carlwe.com/user_data_class_decompiled.png\" alt=\"\"></p>\n<p>总共89行，看起来还ok，让我们回到上面那个Good类，属性比较多，总共加起来80个属性，通过Android Studio中Tools -&gt; Kotlin -&gt; show kotlin buytcode -&gt; Decompile. 查看编译之后的java代码如下：</p>\n<p><img src=\"https://img.carlwe.com/data_class_good_java.png\" alt=\"\"></p>\n<p>一共2320行！确实是比较大的一个文件。因为这个类其实没有用到编译器自动生成的几个方法，我尝试仅仅把data去掉，改成class. 同样查看编译之后的java文件如下：</p>\n<p><img src=\"https://img.carlwe.com/class_with_good_java.png\" alt=\"\"></p>\n<p>1044行，少了近一半了，然后再打包之后看看最终的文件大小如下：</p>\n<p><img src=\"https://img.carlwe.com/class_with_good_size.png\" alt=\"\"></p>\n<p>效果很明显，Good类大小从20.4K直接降到了6.3K，不到之前三分之一的大小。于是将所有的data class更换成了class，整个apk体积也小了不少。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>总的来说data class用起来确实很方便，但是这些方便却是通过牺牲最终的文件大小换来的。所以大家以后使用data class 可综合考虑使用场景。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/data_class_user.png\" alt=\"\"></p>","more":"<h2 id=\"偶然的发现\"><a href=\"#偶然的发现\" class=\"headerlink\" title=\"偶然的发现\"></a>偶然的发现</h2><p>最近在做业务删减及apk瘦身，当然得分析安装包的大小，首先就是资源文件以及其他文件的瘦身了，完成之后再继续看了下dex文件，然后按照体积从大到小依次往下找，找到了体积最大的一个类文件。让我惊奇的是，单个体积最大的类文件竟然是一个实体类，而查看代码后发现该类为Kotlin中以简洁著称的 <strong>data class</strong>，一个类文件就有20K😲，比项目中大部分的图片都大了，如下图：</p>\n<p><img src=\"https://img.carlwe.com/bigest_data_class_path.png\" alt=\"\"></p>\n<p>下面就来具体讲讲 data class。</p>\n<h2 id=\"data-class优点\"><a href=\"#data-class优点\" class=\"headerlink\" title=\"data class优点\"></a>data class优点</h2><p>正如封面图所示，定义一个类及其属性，只需一行代码，相比java中的class，编译器会自动帮助我们实现构造方法、@Metadata信息及如下方法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">equals()</span><br><span class=\"line\">hashCode()</span><br><span class=\"line\">toString()</span><br><span class=\"line\">componentN()</span><br><span class=\"line\">copy()</span><br></pre></td></tr></table></figure>\n<p>使用起来可以说是非常方便了。</p>\n<h2 id=\"data-class带来的问题\"><a href=\"#data-class带来的问题\" class=\"headerlink\" title=\"data class带来的问题\"></a>data class带来的问题</h2><p>当data class中的变量较少时，使用起来确实方便，就拿上述User类来说，编译之后会生成的代码如下：</p>\n<p><img src=\"https://img.carlwe.com/user_data_class_decompiled.png\" alt=\"\"></p>\n<p>总共89行，看起来还ok，让我们回到上面那个Good类，属性比较多，总共加起来80个属性，通过Android Studio中Tools -&gt; Kotlin -&gt; show kotlin buytcode -&gt; Decompile. 查看编译之后的java代码如下：</p>\n<p><img src=\"https://img.carlwe.com/data_class_good_java.png\" alt=\"\"></p>\n<p>一共2320行！确实是比较大的一个文件。因为这个类其实没有用到编译器自动生成的几个方法，我尝试仅仅把data去掉，改成class. 同样查看编译之后的java文件如下：</p>\n<p><img src=\"https://img.carlwe.com/class_with_good_java.png\" alt=\"\"></p>\n<p>1044行，少了近一半了，然后再打包之后看看最终的文件大小如下：</p>\n<p><img src=\"https://img.carlwe.com/class_with_good_size.png\" alt=\"\"></p>\n<p>效果很明显，Good类大小从20.4K直接降到了6.3K，不到之前三分之一的大小。于是将所有的data class更换成了class，整个apk体积也小了不少。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>总的来说data class用起来确实很方便，但是这些方便却是通过牺牲最终的文件大小换来的。所以大家以后使用data class 可综合考虑使用场景。</p>"},{"title":"Android面试题集锦","date":"2019-12-07T15:19:23.000Z","_content":"\n![](https://img.carlwe.com/mianshi_loc.jpg)\n\n<!--more-->\n\n时间来到了2019年的11、12月之交，两个月没有更新博客了，这段时间经历了很多事情，而随之面临的紧迫任务就是重新找工作了。时间紧，任务重！两周共面试了15家公司。公司有大也有小，这篇文章主要分享下这些公司的面试题及面试感受。\n\n在面试之前就想着先去一些小公司面试，丰富面试经验了再去大公司，所以把几个内推大厂的机会都推迟了一周。\n\n## MetaApp\n\n1. 上机完成一个图片加载App，尽量考虑性能优化。\n2. 做完才能继续后面的面试。\n\n> 第一个面试，基本没有准备，不是很喜欢这种上机做一整个App的，感觉比较浪费时间。后面没有做完问能不能继续聊聊，hr给的答复是只有做完了才能进行后面的面试，我直接放弃了，感觉这样的规定会错过很多厉害的人，另外公司环境和几年前的网吧没什么区别。\n\n**公司规模**：★★☆☆☆\n**办公环境**：★☆☆☆☆\n**技术氛围**：★★★★☆\n\n\n\n## 车主帮\n\n1. 手画项目中MVVM的每一层架构图。\n2. 讲讲Binder。\n3. Lanucher启动App流程.\n4. 热修复原理。\n5. RxJava内部实现原理。\n6. Retrofit实现原理。\n7. 平衡二叉树和完全二叉树的区别。\n\n> 依旧是没怎么准备，回答的不是很好，不过面试官还是很nice，把要复习的东西都给我列了一遍，真的是感谢。\n\n**公司规模**：★★☆☆☆\n**办公环境**：★★★☆☆\n**技术氛围**：★★★☆☆\n\n\n\n## Opay\n\n1. 数组、链表、二叉树的特点，及插入、查找和删除的复杂度。\n2. LRU算法的具体实现\n3. ArrayList数据结构是什么样的，是否线程安全。\n4. 线程安全的数据结构有哪些？\n5. SpraseArray 实现原理。\n6. Kotlin中val和var的区别，kt单例如何实现，lateinit和by lazy的区别。\n7. Recyclerview和Listview的区别，如何获取当前屏幕第一个显示item的位置。\n8. Android如何开启多进程，多进程环境下Application是否会再次初始化。\n9. 数据库多线程操作会不会有问题？\n10. 空心圆如何绘制？\n11. 创建observer有哪些操作符？\n12. Livedata的数据拷贝。\n13. Jvm是如何分区的？\n14. 讲讲GC垃圾回收算法。\n15. handler的实现机制，子线程中如何使用handler， postdelay是如何实现的。\n16. ConstrantLayout三个button如何平分，ConstrantLayout中如何同时隐藏多个控件。\n17. Jetpack 熟悉吗？都用过哪些。\n18. 什么情况会出现栈溢出？\n19. 如何直接使用arr文件中的方法，而不初始化。\n\n> 一共三轮面试，面试官的问题都比较偏向于实际开发，公司在扩大规模，主要做非洲支付的业务。这次面试感觉比前两次好。\n\n**公司规模**：★★★☆☆\n**办公环境**：★★★☆☆\n**技术氛围**：★★★★☆\n\n\n\n\n## 梧桐车联\n\n1. 哪些方式可以让Activity执行finish方法。\n2. Activity A打开B的生命周期流程。\n3. onServiceConnected的回调时机。\n4. 子线程代码块中的打印语句和子线程下方主线程的打印语句执行顺序。\n5. Long类型的比较。\n6. 讲讲String、StringBuffer、StringBuilder的不同。\n7. Java访问修饰符各自的访问范围。\n8. 什么是多态？\n9. Equals 和 == 的区别。\n10. 手写二分查找。\n11. 手写字符串去重后打印。\n12. 字符串中只有一个字符只出现了一次，如何快速找到这字符。\n13. 抽象类必须要有抽象方法吗，抽象类和接口有什么区别？\n14. Stackoverflow什么情况会出现？\n15. 获取屏幕像素大小的方法是什么？\n\n> 腾讯投资的一家公司，在中关村，因为把期望工资写在了简历上，一面面试官一上来什么问题都没问，直接和我说，就算你面试全部通过了，你写的期望薪资也给不到。然后整个面试氛围就不对了，最关键的是二分查找，我写的是通过移位来计算除以2，结果面试官应是没看懂，还让我给他解释...\n\n**公司规模**：★★★☆☆\n**办公环境**：★★★★☆\n**技术氛围**：★★★☆☆\n\n\n\n## 多点科技\n\n1. MVVM的解读，对比MVC有哪些好处，为什么不用MVP?\n2. 用队列实现的有哪些数据结构？\n3. HashMap线程安全吗，如果多线程操作会有什么问题?\n4. SparseArray的优点，是如何实现的？\n5. Handler先Postdelay一个消息后，立刻sendmessage，此时是如何处理的？\n6. Invalidate、postinvalidate、requestlayout 的区别。\n7. Rxjava中map、flatmap、zip操作符的实现原理，异常是如何处理的？\n8. Glide缓存机制，是如何实现生命周期的？\n9. Livedata是如何感知生命周期的？\n10. Threadlocal的作用及实现原理。\n11. 讲讲Jvm内存分配和GC过程。\n12. NestedScrollView的实现机制，吸顶效果是如何实现的？\n\n> 一家中小型公司，面试官都比较负责，问到了很多知识盲点，公司是单独一栋楼，环境还可以，看起来加班不多。\n\n**公司规模**：★★☆☆☆\n**办公环境**：★★★★☆\n**技术氛围**：★★★☆☆\n\n\n\n\n## 寺库\n\n1. 具体讲讲动态代理。\n2. AsyncTsak的实现原理。\n3. 多态是什么？\n4. 内存优化都做了哪些？\n5. 类变量和成员变量有什么区别吗？\n6. 生产者消费者手写代码。\n7. 工厂模式在哪些地方有应用。\n8. Java中Object类有哪些方法？\n9. 具体讲讲JVM的分区。\n10. Java限定修饰符有哪些，修饰范围如何？\n\n> 这家公司在三里屯附近，面试官比较耐心，环境还不错。\n\n**公司规模**：★★★★☆\n**办公环境**：★★★★☆\n**技术氛围**：★★☆☆☆\n\n\n\n\n## 贝壳\n\n1. 线程池中有哪几个变量，分别是干什么用的？\n2. 如何直接定位到ListView最后一个。\n3. Activity A打开B的生命周期，介绍四种启动模式。\n4. 吸顶代码如何实现。\n5. 项目中有哪些你觉得是做的有亮点的？\n6. Flutter混合开发中闪屏是如何解决的？\n7. Glide、Okhttp实现原理。\n8. ActivityThread、ApplicationThread的区别。\n9. Handler和ThreadHandler的区别。\n10. 讲讲View绘制流程、事件分发机制。\n11. 性能优化都做了哪些方面。\n12. https是如何实现的。 \n13. 锁分为哪些类型，分别有什么特点？\n14. sleep和wait的区别？\n\n> 公司环境还可以，面试官也还行。\n\n**公司规模**：★★★★★\n**办公环境**：★★★★☆\n**技术氛围**：★★★☆☆\n\n\n\n##完美世界\n\n1. 手写两数相加，实现两个链表存储每个数字，然后相加后输出。\n2. 内存调优做了哪些？\n3. 你觉得你之前做过的哪些地方能给我们公司带来价值或者提升？\n4. Rxjava的线程是如何切换的。\n5. LeackCanary实现原理\n6. 在公司负责的事情。\n\n> 面试官虽然有些问题问的不太合适，但是总体还行。\n\n**公司规模**：★★★★☆\n**办公环境**：★★★☆☆\n**技术氛围**：★★★☆☆\n\n\n\n## 美术宝\n\n1. 引用传递和值传递的区别。\n2. 多态、静态内部类通过代码来考察。\n3. Hander中post和sendmessage的区别。\n4. Hander中postdelay是如何实现的？\n5. 说说View绘制流程。\n6. Jvm内存模型，new的对象和值分别存在哪里？\n\n> 面试官还不错，就是公司的各种薪酬福利都不行，估计真的没多少人愿意去。\n\n**公司规模**：★★★☆☆\n**办公环境**：★★★☆☆\n**技术氛围**：★★★☆☆\n\n\n\n## 滴滴\n\n**一面**：网约车面试官\n\n1. HashMap的数据结构，其中如何提高查找效率的，每种情况下的查询复杂度是多少？\n2. HashMa碰撞过多时是如何解决的？扩容具体是如何实现的？\n3. 内存优化和apk瘦身分别做了哪些？\n4. 内存里面分配一张大的bitmap会触发什么操作？\n5. Dalvik和Art有什么区别？每个Android版本具体有哪些改进。\n6. Bitmap的优化InsampleSize，着色模式有哪些，他们的区别？\n7. 项目中遇到最难的问题，如何解决的？\n8. 组件化做了哪些东西？\n9. Lint解决了哪些问题？\n10. 手写二叉树展开成链表。\n11. Kotlin中协程和Rxjava的实现有什么异同？\n\n**二面**：项目负责人\n\n1. 讲讲在公司都负责什么事情？\n2. 如何降低崩溃率的，你都做了哪些事情？\n3. 如何协调安排工期的，如果产品给的需求在规定时间内完不成如何处理。\n4. 和哪些人有过沟通？\n5. 觉得做的比较好的地方？\n6. 最难忘的事情。\n7. 为什么要换工作？\n8. 有哪些兴趣爱好。\n\n**三面**：总监\n\n1. 自我介绍。\n2. 现在公司承担的角色。\n3. 有哪些做的好的地方，有哪些做的不好的。\n4. 职业发展方向\n5. 有没有努力的对象，最崇拜的人是谁。\n6. 有什么问题要问我的吗？\n\n> 总体面试感受就是面试官会尝试引导你回答一些问题，而不是说在你不会的地方死扣。项目负责人很nice，总监问的问题比较不好回答。后面hr的流程较慢。\n\n**公司规模**：★★★★★\n**办公环境**：★★★★☆\n**技术氛围**：★★★★★\n\n\n\n## 快手\n\n**一面**：技术面\n\n1. 组件化和模块化的理解。\n2. handler中postdelay的原理。\n3. View的事件传递，手指移出view的事件触发流程。\n4. 父view已经拦截了，子view想处理时用什么方法。\n5. 自定义view的流程 ，测量模式，如何确定子view的测量模式。\n6. 什么view的测量模式是UNSPECIFIED。\n7. 打开支付宝后返回桌面 ，在进入支付宝，会看到刚刚的支付界面，原理是什么？\n8. Activity的启动模式 taskAfinity 什么情况下用。\n9. 图片列表和视频列表，按照顺序融合，取前200条返回，手写代码实现。\n\n**二面**：技术Leader面\n\n1. StartActivity启动流程。\n2. 说说你对Binder的理解。\n3. ActivityManagerService和zygote进程通信是如何实现的（socket）。\n4. 数据库多线程访问会出现什么问题。\n\n**三面**：技术面\n\n1. 线程池使用几个参数的意思。\n2. 双重判断单例手写代码，说说为什么这样写。\n3. 之前项目中事件总线怎么处理的。\n4. EventBus的实现原理，为什么现在项目没用？\n5. 项目中的多线程如何处理?\n6. Rxjava有哪些好处？\n7. HashMap的键是存在哪里的？\n8. Activity A打开B AB分别的生命周期（注意要考虑透明情况）。\n\n> 快手面试的效率很高，去了两次。一面面试官印象深刻，把我会的基本全问出来了，不太会的还会耐心的给你讲解原理。后面的面试感觉回答的中规中矩。手写代码都写出来了，给人的感觉就会自信很多。\n\n**公司规模**：★★★★★\n**办公环境**：★★★★☆\n**技术氛围**：★★★★★\n\n\n\n## 字节跳动\n\n1.  手写二维数组旋转打印。\n2.  https的安全协议是什么？具体做了哪些事情。\n3.  eventbus的内部实现原理。\n4.  apk瘦身做了哪些事情。\n5.  讲讲glide缓存策略。\n6.  说说APT(Annotation Processing Tool)。\n7.  Kt顶层属性和顶层方法的实现原理.\n8.  Java如何调用kotlin的高阶函数\n9.  Sophix热修复对比Andfix做了哪些优化。\n\n> 两位面试官一同面试，面试的时候是在员工食堂…问的问题都准备的不太好。最主要第一个题目没有写出来，后面就没信心了，然后问了好多好几年前项目的东西，虽然没有通过，但字节跳动还是我比较向往的。不好的地方就是加班比较严重。\n\n**公司规模**：★★★★★\n**办公环境**：★★★★☆\n**技术氛围**：★★★★★\n\n\n\n## 探探\n\n1. 透明Activity 启动流程。\n2. view的事件传递，什么时候会执行onCancel事件。\n3. 自定义view流程。\n4. 安装包瘦身。\n5. HashMap原理。\n\n> 公司在国贸附近，10点半去了看着大家都还比较清闲，面试官问的问题我都回答上来了，然后面完了就让我走了，感觉是没在好好招人。或者说面试官感觉我比他厉害，所以不想招我来了。谁知道呢？\n\n**公司规模**：★★★☆☆\n**办公环境**：★★★★☆\n**技术氛围**：★★★☆☆\n\n\n\n## 轻课\n\n1. 说一下HashMap原理\n2. 热修复原理\n3. Glide 缓存和生命周期管理\n\n> 又是一家浪费时间的公司，说HashMap原理的时候，面试官直接就打断了：“你说的网上都有，我想听听不一样的”，然后讲Glide缓存的时候，我还没讲完，面试官说：“那弱引用缓存怎么没说”，我说:“我还没说完”，面试官说：“你刚刚就是已经说完了”。最后面试官问：“我没什么问题了，你还有问题吗？”，直接了当的给了句：\"我也没了\"。\n\n**公司规模**：★★☆☆☆\n**办公环境**：★☆☆☆☆\n**技术氛围**：★★☆☆☆\n\n\n\n## 心上\n\n1. 讲讲https协议和通讯的过程\n2. notification如何不显示icon。\n3. 带阴影的图如何实现。\n4. 对象传递和值传递。\n5. HashMap如何扩容。\n6. GC的过程。\n7. Android版本的适配做了哪些。\n8. 说说对Android四大组件的理解。\n\n> 公司离家近，但是是单双休，面试官也很有耐心，给人的感觉还不错。\n\n**公司规模**：★★☆☆☆\n**办公环境**：★★★☆☆\n**技术氛围**：★★★★☆\n\n\n\n## 总结\n\n对于面试流程，先去一些小公司，可去可不去的那种，这样可以先让自己明确需要着重复习的地方，同时了解下市场行情。面试到后面就会慢慢找到感觉。跑面试不容易，尤其上午一场下午一场，中午经常没时间吃饭，大家经历过了的都明白，不过也不要灰心，坚持下去总会找到一份满意的工作。","source":"_posts/Android面试题集锦.md","raw":"---\ntitle: Android面试题集锦\ndate: 2019-12-07 23:19:23\ntags: 生活\n---\n\n![](https://img.carlwe.com/mianshi_loc.jpg)\n\n<!--more-->\n\n时间来到了2019年的11、12月之交，两个月没有更新博客了，这段时间经历了很多事情，而随之面临的紧迫任务就是重新找工作了。时间紧，任务重！两周共面试了15家公司。公司有大也有小，这篇文章主要分享下这些公司的面试题及面试感受。\n\n在面试之前就想着先去一些小公司面试，丰富面试经验了再去大公司，所以把几个内推大厂的机会都推迟了一周。\n\n## MetaApp\n\n1. 上机完成一个图片加载App，尽量考虑性能优化。\n2. 做完才能继续后面的面试。\n\n> 第一个面试，基本没有准备，不是很喜欢这种上机做一整个App的，感觉比较浪费时间。后面没有做完问能不能继续聊聊，hr给的答复是只有做完了才能进行后面的面试，我直接放弃了，感觉这样的规定会错过很多厉害的人，另外公司环境和几年前的网吧没什么区别。\n\n**公司规模**：★★☆☆☆\n**办公环境**：★☆☆☆☆\n**技术氛围**：★★★★☆\n\n\n\n## 车主帮\n\n1. 手画项目中MVVM的每一层架构图。\n2. 讲讲Binder。\n3. Lanucher启动App流程.\n4. 热修复原理。\n5. RxJava内部实现原理。\n6. Retrofit实现原理。\n7. 平衡二叉树和完全二叉树的区别。\n\n> 依旧是没怎么准备，回答的不是很好，不过面试官还是很nice，把要复习的东西都给我列了一遍，真的是感谢。\n\n**公司规模**：★★☆☆☆\n**办公环境**：★★★☆☆\n**技术氛围**：★★★☆☆\n\n\n\n## Opay\n\n1. 数组、链表、二叉树的特点，及插入、查找和删除的复杂度。\n2. LRU算法的具体实现\n3. ArrayList数据结构是什么样的，是否线程安全。\n4. 线程安全的数据结构有哪些？\n5. SpraseArray 实现原理。\n6. Kotlin中val和var的区别，kt单例如何实现，lateinit和by lazy的区别。\n7. Recyclerview和Listview的区别，如何获取当前屏幕第一个显示item的位置。\n8. Android如何开启多进程，多进程环境下Application是否会再次初始化。\n9. 数据库多线程操作会不会有问题？\n10. 空心圆如何绘制？\n11. 创建observer有哪些操作符？\n12. Livedata的数据拷贝。\n13. Jvm是如何分区的？\n14. 讲讲GC垃圾回收算法。\n15. handler的实现机制，子线程中如何使用handler， postdelay是如何实现的。\n16. ConstrantLayout三个button如何平分，ConstrantLayout中如何同时隐藏多个控件。\n17. Jetpack 熟悉吗？都用过哪些。\n18. 什么情况会出现栈溢出？\n19. 如何直接使用arr文件中的方法，而不初始化。\n\n> 一共三轮面试，面试官的问题都比较偏向于实际开发，公司在扩大规模，主要做非洲支付的业务。这次面试感觉比前两次好。\n\n**公司规模**：★★★☆☆\n**办公环境**：★★★☆☆\n**技术氛围**：★★★★☆\n\n\n\n\n## 梧桐车联\n\n1. 哪些方式可以让Activity执行finish方法。\n2. Activity A打开B的生命周期流程。\n3. onServiceConnected的回调时机。\n4. 子线程代码块中的打印语句和子线程下方主线程的打印语句执行顺序。\n5. Long类型的比较。\n6. 讲讲String、StringBuffer、StringBuilder的不同。\n7. Java访问修饰符各自的访问范围。\n8. 什么是多态？\n9. Equals 和 == 的区别。\n10. 手写二分查找。\n11. 手写字符串去重后打印。\n12. 字符串中只有一个字符只出现了一次，如何快速找到这字符。\n13. 抽象类必须要有抽象方法吗，抽象类和接口有什么区别？\n14. Stackoverflow什么情况会出现？\n15. 获取屏幕像素大小的方法是什么？\n\n> 腾讯投资的一家公司，在中关村，因为把期望工资写在了简历上，一面面试官一上来什么问题都没问，直接和我说，就算你面试全部通过了，你写的期望薪资也给不到。然后整个面试氛围就不对了，最关键的是二分查找，我写的是通过移位来计算除以2，结果面试官应是没看懂，还让我给他解释...\n\n**公司规模**：★★★☆☆\n**办公环境**：★★★★☆\n**技术氛围**：★★★☆☆\n\n\n\n## 多点科技\n\n1. MVVM的解读，对比MVC有哪些好处，为什么不用MVP?\n2. 用队列实现的有哪些数据结构？\n3. HashMap线程安全吗，如果多线程操作会有什么问题?\n4. SparseArray的优点，是如何实现的？\n5. Handler先Postdelay一个消息后，立刻sendmessage，此时是如何处理的？\n6. Invalidate、postinvalidate、requestlayout 的区别。\n7. Rxjava中map、flatmap、zip操作符的实现原理，异常是如何处理的？\n8. Glide缓存机制，是如何实现生命周期的？\n9. Livedata是如何感知生命周期的？\n10. Threadlocal的作用及实现原理。\n11. 讲讲Jvm内存分配和GC过程。\n12. NestedScrollView的实现机制，吸顶效果是如何实现的？\n\n> 一家中小型公司，面试官都比较负责，问到了很多知识盲点，公司是单独一栋楼，环境还可以，看起来加班不多。\n\n**公司规模**：★★☆☆☆\n**办公环境**：★★★★☆\n**技术氛围**：★★★☆☆\n\n\n\n\n## 寺库\n\n1. 具体讲讲动态代理。\n2. AsyncTsak的实现原理。\n3. 多态是什么？\n4. 内存优化都做了哪些？\n5. 类变量和成员变量有什么区别吗？\n6. 生产者消费者手写代码。\n7. 工厂模式在哪些地方有应用。\n8. Java中Object类有哪些方法？\n9. 具体讲讲JVM的分区。\n10. Java限定修饰符有哪些，修饰范围如何？\n\n> 这家公司在三里屯附近，面试官比较耐心，环境还不错。\n\n**公司规模**：★★★★☆\n**办公环境**：★★★★☆\n**技术氛围**：★★☆☆☆\n\n\n\n\n## 贝壳\n\n1. 线程池中有哪几个变量，分别是干什么用的？\n2. 如何直接定位到ListView最后一个。\n3. Activity A打开B的生命周期，介绍四种启动模式。\n4. 吸顶代码如何实现。\n5. 项目中有哪些你觉得是做的有亮点的？\n6. Flutter混合开发中闪屏是如何解决的？\n7. Glide、Okhttp实现原理。\n8. ActivityThread、ApplicationThread的区别。\n9. Handler和ThreadHandler的区别。\n10. 讲讲View绘制流程、事件分发机制。\n11. 性能优化都做了哪些方面。\n12. https是如何实现的。 \n13. 锁分为哪些类型，分别有什么特点？\n14. sleep和wait的区别？\n\n> 公司环境还可以，面试官也还行。\n\n**公司规模**：★★★★★\n**办公环境**：★★★★☆\n**技术氛围**：★★★☆☆\n\n\n\n##完美世界\n\n1. 手写两数相加，实现两个链表存储每个数字，然后相加后输出。\n2. 内存调优做了哪些？\n3. 你觉得你之前做过的哪些地方能给我们公司带来价值或者提升？\n4. Rxjava的线程是如何切换的。\n5. LeackCanary实现原理\n6. 在公司负责的事情。\n\n> 面试官虽然有些问题问的不太合适，但是总体还行。\n\n**公司规模**：★★★★☆\n**办公环境**：★★★☆☆\n**技术氛围**：★★★☆☆\n\n\n\n## 美术宝\n\n1. 引用传递和值传递的区别。\n2. 多态、静态内部类通过代码来考察。\n3. Hander中post和sendmessage的区别。\n4. Hander中postdelay是如何实现的？\n5. 说说View绘制流程。\n6. Jvm内存模型，new的对象和值分别存在哪里？\n\n> 面试官还不错，就是公司的各种薪酬福利都不行，估计真的没多少人愿意去。\n\n**公司规模**：★★★☆☆\n**办公环境**：★★★☆☆\n**技术氛围**：★★★☆☆\n\n\n\n## 滴滴\n\n**一面**：网约车面试官\n\n1. HashMap的数据结构，其中如何提高查找效率的，每种情况下的查询复杂度是多少？\n2. HashMa碰撞过多时是如何解决的？扩容具体是如何实现的？\n3. 内存优化和apk瘦身分别做了哪些？\n4. 内存里面分配一张大的bitmap会触发什么操作？\n5. Dalvik和Art有什么区别？每个Android版本具体有哪些改进。\n6. Bitmap的优化InsampleSize，着色模式有哪些，他们的区别？\n7. 项目中遇到最难的问题，如何解决的？\n8. 组件化做了哪些东西？\n9. Lint解决了哪些问题？\n10. 手写二叉树展开成链表。\n11. Kotlin中协程和Rxjava的实现有什么异同？\n\n**二面**：项目负责人\n\n1. 讲讲在公司都负责什么事情？\n2. 如何降低崩溃率的，你都做了哪些事情？\n3. 如何协调安排工期的，如果产品给的需求在规定时间内完不成如何处理。\n4. 和哪些人有过沟通？\n5. 觉得做的比较好的地方？\n6. 最难忘的事情。\n7. 为什么要换工作？\n8. 有哪些兴趣爱好。\n\n**三面**：总监\n\n1. 自我介绍。\n2. 现在公司承担的角色。\n3. 有哪些做的好的地方，有哪些做的不好的。\n4. 职业发展方向\n5. 有没有努力的对象，最崇拜的人是谁。\n6. 有什么问题要问我的吗？\n\n> 总体面试感受就是面试官会尝试引导你回答一些问题，而不是说在你不会的地方死扣。项目负责人很nice，总监问的问题比较不好回答。后面hr的流程较慢。\n\n**公司规模**：★★★★★\n**办公环境**：★★★★☆\n**技术氛围**：★★★★★\n\n\n\n## 快手\n\n**一面**：技术面\n\n1. 组件化和模块化的理解。\n2. handler中postdelay的原理。\n3. View的事件传递，手指移出view的事件触发流程。\n4. 父view已经拦截了，子view想处理时用什么方法。\n5. 自定义view的流程 ，测量模式，如何确定子view的测量模式。\n6. 什么view的测量模式是UNSPECIFIED。\n7. 打开支付宝后返回桌面 ，在进入支付宝，会看到刚刚的支付界面，原理是什么？\n8. Activity的启动模式 taskAfinity 什么情况下用。\n9. 图片列表和视频列表，按照顺序融合，取前200条返回，手写代码实现。\n\n**二面**：技术Leader面\n\n1. StartActivity启动流程。\n2. 说说你对Binder的理解。\n3. ActivityManagerService和zygote进程通信是如何实现的（socket）。\n4. 数据库多线程访问会出现什么问题。\n\n**三面**：技术面\n\n1. 线程池使用几个参数的意思。\n2. 双重判断单例手写代码，说说为什么这样写。\n3. 之前项目中事件总线怎么处理的。\n4. EventBus的实现原理，为什么现在项目没用？\n5. 项目中的多线程如何处理?\n6. Rxjava有哪些好处？\n7. HashMap的键是存在哪里的？\n8. Activity A打开B AB分别的生命周期（注意要考虑透明情况）。\n\n> 快手面试的效率很高，去了两次。一面面试官印象深刻，把我会的基本全问出来了，不太会的还会耐心的给你讲解原理。后面的面试感觉回答的中规中矩。手写代码都写出来了，给人的感觉就会自信很多。\n\n**公司规模**：★★★★★\n**办公环境**：★★★★☆\n**技术氛围**：★★★★★\n\n\n\n## 字节跳动\n\n1.  手写二维数组旋转打印。\n2.  https的安全协议是什么？具体做了哪些事情。\n3.  eventbus的内部实现原理。\n4.  apk瘦身做了哪些事情。\n5.  讲讲glide缓存策略。\n6.  说说APT(Annotation Processing Tool)。\n7.  Kt顶层属性和顶层方法的实现原理.\n8.  Java如何调用kotlin的高阶函数\n9.  Sophix热修复对比Andfix做了哪些优化。\n\n> 两位面试官一同面试，面试的时候是在员工食堂…问的问题都准备的不太好。最主要第一个题目没有写出来，后面就没信心了，然后问了好多好几年前项目的东西，虽然没有通过，但字节跳动还是我比较向往的。不好的地方就是加班比较严重。\n\n**公司规模**：★★★★★\n**办公环境**：★★★★☆\n**技术氛围**：★★★★★\n\n\n\n## 探探\n\n1. 透明Activity 启动流程。\n2. view的事件传递，什么时候会执行onCancel事件。\n3. 自定义view流程。\n4. 安装包瘦身。\n5. HashMap原理。\n\n> 公司在国贸附近，10点半去了看着大家都还比较清闲，面试官问的问题我都回答上来了，然后面完了就让我走了，感觉是没在好好招人。或者说面试官感觉我比他厉害，所以不想招我来了。谁知道呢？\n\n**公司规模**：★★★☆☆\n**办公环境**：★★★★☆\n**技术氛围**：★★★☆☆\n\n\n\n## 轻课\n\n1. 说一下HashMap原理\n2. 热修复原理\n3. Glide 缓存和生命周期管理\n\n> 又是一家浪费时间的公司，说HashMap原理的时候，面试官直接就打断了：“你说的网上都有，我想听听不一样的”，然后讲Glide缓存的时候，我还没讲完，面试官说：“那弱引用缓存怎么没说”，我说:“我还没说完”，面试官说：“你刚刚就是已经说完了”。最后面试官问：“我没什么问题了，你还有问题吗？”，直接了当的给了句：\"我也没了\"。\n\n**公司规模**：★★☆☆☆\n**办公环境**：★☆☆☆☆\n**技术氛围**：★★☆☆☆\n\n\n\n## 心上\n\n1. 讲讲https协议和通讯的过程\n2. notification如何不显示icon。\n3. 带阴影的图如何实现。\n4. 对象传递和值传递。\n5. HashMap如何扩容。\n6. GC的过程。\n7. Android版本的适配做了哪些。\n8. 说说对Android四大组件的理解。\n\n> 公司离家近，但是是单双休，面试官也很有耐心，给人的感觉还不错。\n\n**公司规模**：★★☆☆☆\n**办公环境**：★★★☆☆\n**技术氛围**：★★★★☆\n\n\n\n## 总结\n\n对于面试流程，先去一些小公司，可去可不去的那种，这样可以先让自己明确需要着重复习的地方，同时了解下市场行情。面试到后面就会慢慢找到感觉。跑面试不容易，尤其上午一场下午一场，中午经常没时间吃饭，大家经历过了的都明白，不过也不要灰心，坚持下去总会找到一份满意的工作。","slug":"Android面试题集锦","published":1,"updated":"2020-08-18T02:25:58.809Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnox0006t57sgnx7smhp","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/mianshi_loc.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>时间来到了2019年的11、12月之交，两个月没有更新博客了，这段时间经历了很多事情，而随之面临的紧迫任务就是重新找工作了。时间紧，任务重！两周共面试了15家公司。公司有大也有小，这篇文章主要分享下这些公司的面试题及面试感受。</p>\n<p>在面试之前就想着先去一些小公司面试，丰富面试经验了再去大公司，所以把几个内推大厂的机会都推迟了一周。</p>\n<h2 id=\"MetaApp\"><a href=\"#MetaApp\" class=\"headerlink\" title=\"MetaApp\"></a>MetaApp</h2><ol>\n<li>上机完成一个图片加载App，尽量考虑性能优化。</li>\n<li>做完才能继续后面的面试。</li>\n</ol>\n<blockquote>\n<p>第一个面试，基本没有准备，不是很喜欢这种上机做一整个App的，感觉比较浪费时间。后面没有做完问能不能继续聊聊，hr给的答复是只有做完了才能进行后面的面试，我直接放弃了，感觉这样的规定会错过很多厉害的人，另外公司环境和几年前的网吧没什么区别。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★☆☆☆<br><strong>办公环境</strong>：★☆☆☆☆<br><strong>技术氛围</strong>：★★★★☆</p>\n<h2 id=\"车主帮\"><a href=\"#车主帮\" class=\"headerlink\" title=\"车主帮\"></a>车主帮</h2><ol>\n<li>手画项目中MVVM的每一层架构图。</li>\n<li>讲讲Binder。</li>\n<li>Lanucher启动App流程.</li>\n<li>热修复原理。</li>\n<li>RxJava内部实现原理。</li>\n<li>Retrofit实现原理。</li>\n<li>平衡二叉树和完全二叉树的区别。</li>\n</ol>\n<blockquote>\n<p>依旧是没怎么准备，回答的不是很好，不过面试官还是很nice，把要复习的东西都给我列了一遍，真的是感谢。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★☆☆☆<br><strong>办公环境</strong>：★★★☆☆<br><strong>技术氛围</strong>：★★★☆☆</p>\n<h2 id=\"Opay\"><a href=\"#Opay\" class=\"headerlink\" title=\"Opay\"></a>Opay</h2><ol>\n<li>数组、链表、二叉树的特点，及插入、查找和删除的复杂度。</li>\n<li>LRU算法的具体实现</li>\n<li>ArrayList数据结构是什么样的，是否线程安全。</li>\n<li>线程安全的数据结构有哪些？</li>\n<li>SpraseArray 实现原理。</li>\n<li>Kotlin中val和var的区别，kt单例如何实现，lateinit和by lazy的区别。</li>\n<li>Recyclerview和Listview的区别，如何获取当前屏幕第一个显示item的位置。</li>\n<li>Android如何开启多进程，多进程环境下Application是否会再次初始化。</li>\n<li>数据库多线程操作会不会有问题？</li>\n<li>空心圆如何绘制？</li>\n<li>创建observer有哪些操作符？</li>\n<li>Livedata的数据拷贝。</li>\n<li>Jvm是如何分区的？</li>\n<li>讲讲GC垃圾回收算法。</li>\n<li>handler的实现机制，子线程中如何使用handler， postdelay是如何实现的。</li>\n<li>ConstrantLayout三个button如何平分，ConstrantLayout中如何同时隐藏多个控件。</li>\n<li>Jetpack 熟悉吗？都用过哪些。</li>\n<li>什么情况会出现栈溢出？</li>\n<li>如何直接使用arr文件中的方法，而不初始化。</li>\n</ol>\n<blockquote>\n<p>一共三轮面试，面试官的问题都比较偏向于实际开发，公司在扩大规模，主要做非洲支付的业务。这次面试感觉比前两次好。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★☆☆<br><strong>办公环境</strong>：★★★☆☆<br><strong>技术氛围</strong>：★★★★☆</p>\n<h2 id=\"梧桐车联\"><a href=\"#梧桐车联\" class=\"headerlink\" title=\"梧桐车联\"></a>梧桐车联</h2><ol>\n<li>哪些方式可以让Activity执行finish方法。</li>\n<li>Activity A打开B的生命周期流程。</li>\n<li>onServiceConnected的回调时机。</li>\n<li>子线程代码块中的打印语句和子线程下方主线程的打印语句执行顺序。</li>\n<li>Long类型的比较。</li>\n<li>讲讲String、StringBuffer、StringBuilder的不同。</li>\n<li>Java访问修饰符各自的访问范围。</li>\n<li>什么是多态？</li>\n<li>Equals 和 == 的区别。</li>\n<li>手写二分查找。</li>\n<li>手写字符串去重后打印。</li>\n<li>字符串中只有一个字符只出现了一次，如何快速找到这字符。</li>\n<li>抽象类必须要有抽象方法吗，抽象类和接口有什么区别？</li>\n<li>Stackoverflow什么情况会出现？</li>\n<li>获取屏幕像素大小的方法是什么？</li>\n</ol>\n<blockquote>\n<p>腾讯投资的一家公司，在中关村，因为把期望工资写在了简历上，一面面试官一上来什么问题都没问，直接和我说，就算你面试全部通过了，你写的期望薪资也给不到。然后整个面试氛围就不对了，最关键的是二分查找，我写的是通过移位来计算除以2，结果面试官应是没看懂，还让我给他解释…</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★☆☆<br><strong>办公环境</strong>：★★★★☆<br><strong>技术氛围</strong>：★★★☆☆</p>\n<h2 id=\"多点科技\"><a href=\"#多点科技\" class=\"headerlink\" title=\"多点科技\"></a>多点科技</h2><ol>\n<li>MVVM的解读，对比MVC有哪些好处，为什么不用MVP?</li>\n<li>用队列实现的有哪些数据结构？</li>\n<li>HashMap线程安全吗，如果多线程操作会有什么问题?</li>\n<li>SparseArray的优点，是如何实现的？</li>\n<li>Handler先Postdelay一个消息后，立刻sendmessage，此时是如何处理的？</li>\n<li>Invalidate、postinvalidate、requestlayout 的区别。</li>\n<li>Rxjava中map、flatmap、zip操作符的实现原理，异常是如何处理的？</li>\n<li>Glide缓存机制，是如何实现生命周期的？</li>\n<li>Livedata是如何感知生命周期的？</li>\n<li>Threadlocal的作用及实现原理。</li>\n<li>讲讲Jvm内存分配和GC过程。</li>\n<li>NestedScrollView的实现机制，吸顶效果是如何实现的？</li>\n</ol>\n<blockquote>\n<p>一家中小型公司，面试官都比较负责，问到了很多知识盲点，公司是单独一栋楼，环境还可以，看起来加班不多。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★☆☆☆<br><strong>办公环境</strong>：★★★★☆<br><strong>技术氛围</strong>：★★★☆☆</p>\n<h2 id=\"寺库\"><a href=\"#寺库\" class=\"headerlink\" title=\"寺库\"></a>寺库</h2><ol>\n<li>具体讲讲动态代理。</li>\n<li>AsyncTsak的实现原理。</li>\n<li>多态是什么？</li>\n<li>内存优化都做了哪些？</li>\n<li>类变量和成员变量有什么区别吗？</li>\n<li>生产者消费者手写代码。</li>\n<li>工厂模式在哪些地方有应用。</li>\n<li>Java中Object类有哪些方法？</li>\n<li>具体讲讲JVM的分区。</li>\n<li>Java限定修饰符有哪些，修饰范围如何？</li>\n</ol>\n<blockquote>\n<p>这家公司在三里屯附近，面试官比较耐心，环境还不错。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★★☆<br><strong>办公环境</strong>：★★★★☆<br><strong>技术氛围</strong>：★★☆☆☆</p>\n<h2 id=\"贝壳\"><a href=\"#贝壳\" class=\"headerlink\" title=\"贝壳\"></a>贝壳</h2><ol>\n<li>线程池中有哪几个变量，分别是干什么用的？</li>\n<li>如何直接定位到ListView最后一个。</li>\n<li>Activity A打开B的生命周期，介绍四种启动模式。</li>\n<li>吸顶代码如何实现。</li>\n<li>项目中有哪些你觉得是做的有亮点的？</li>\n<li>Flutter混合开发中闪屏是如何解决的？</li>\n<li>Glide、Okhttp实现原理。</li>\n<li>ActivityThread、ApplicationThread的区别。</li>\n<li>Handler和ThreadHandler的区别。</li>\n<li>讲讲View绘制流程、事件分发机制。</li>\n<li>性能优化都做了哪些方面。</li>\n<li>https是如何实现的。 </li>\n<li>锁分为哪些类型，分别有什么特点？</li>\n<li>sleep和wait的区别？</li>\n</ol>\n<blockquote>\n<p>公司环境还可以，面试官也还行。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★★★<br><strong>办公环境</strong>：★★★★☆<br><strong>技术氛围</strong>：★★★☆☆</p>\n<h2 id=\"完美世界\"><a href=\"#完美世界\" class=\"headerlink\" title=\"完美世界\"></a>完美世界</h2><ol>\n<li>手写两数相加，实现两个链表存储每个数字，然后相加后输出。</li>\n<li>内存调优做了哪些？</li>\n<li>你觉得你之前做过的哪些地方能给我们公司带来价值或者提升？</li>\n<li>Rxjava的线程是如何切换的。</li>\n<li>LeackCanary实现原理</li>\n<li>在公司负责的事情。</li>\n</ol>\n<blockquote>\n<p>面试官虽然有些问题问的不太合适，但是总体还行。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★★☆<br><strong>办公环境</strong>：★★★☆☆<br><strong>技术氛围</strong>：★★★☆☆</p>\n<h2 id=\"美术宝\"><a href=\"#美术宝\" class=\"headerlink\" title=\"美术宝\"></a>美术宝</h2><ol>\n<li>引用传递和值传递的区别。</li>\n<li>多态、静态内部类通过代码来考察。</li>\n<li>Hander中post和sendmessage的区别。</li>\n<li>Hander中postdelay是如何实现的？</li>\n<li>说说View绘制流程。</li>\n<li>Jvm内存模型，new的对象和值分别存在哪里？</li>\n</ol>\n<blockquote>\n<p>面试官还不错，就是公司的各种薪酬福利都不行，估计真的没多少人愿意去。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★☆☆<br><strong>办公环境</strong>：★★★☆☆<br><strong>技术氛围</strong>：★★★☆☆</p>\n<h2 id=\"滴滴\"><a href=\"#滴滴\" class=\"headerlink\" title=\"滴滴\"></a>滴滴</h2><p><strong>一面</strong>：网约车面试官</p>\n<ol>\n<li>HashMap的数据结构，其中如何提高查找效率的，每种情况下的查询复杂度是多少？</li>\n<li>HashMa碰撞过多时是如何解决的？扩容具体是如何实现的？</li>\n<li>内存优化和apk瘦身分别做了哪些？</li>\n<li>内存里面分配一张大的bitmap会触发什么操作？</li>\n<li>Dalvik和Art有什么区别？每个Android版本具体有哪些改进。</li>\n<li>Bitmap的优化InsampleSize，着色模式有哪些，他们的区别？</li>\n<li>项目中遇到最难的问题，如何解决的？</li>\n<li>组件化做了哪些东西？</li>\n<li>Lint解决了哪些问题？</li>\n<li>手写二叉树展开成链表。</li>\n<li>Kotlin中协程和Rxjava的实现有什么异同？</li>\n</ol>\n<p><strong>二面</strong>：项目负责人</p>\n<ol>\n<li>讲讲在公司都负责什么事情？</li>\n<li>如何降低崩溃率的，你都做了哪些事情？</li>\n<li>如何协调安排工期的，如果产品给的需求在规定时间内完不成如何处理。</li>\n<li>和哪些人有过沟通？</li>\n<li>觉得做的比较好的地方？</li>\n<li>最难忘的事情。</li>\n<li>为什么要换工作？</li>\n<li>有哪些兴趣爱好。</li>\n</ol>\n<p><strong>三面</strong>：总监</p>\n<ol>\n<li>自我介绍。</li>\n<li>现在公司承担的角色。</li>\n<li>有哪些做的好的地方，有哪些做的不好的。</li>\n<li>职业发展方向</li>\n<li>有没有努力的对象，最崇拜的人是谁。</li>\n<li>有什么问题要问我的吗？</li>\n</ol>\n<blockquote>\n<p>总体面试感受就是面试官会尝试引导你回答一些问题，而不是说在你不会的地方死扣。项目负责人很nice，总监问的问题比较不好回答。后面hr的流程较慢。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★★★<br><strong>办公环境</strong>：★★★★☆<br><strong>技术氛围</strong>：★★★★★</p>\n<h2 id=\"快手\"><a href=\"#快手\" class=\"headerlink\" title=\"快手\"></a>快手</h2><p><strong>一面</strong>：技术面</p>\n<ol>\n<li>组件化和模块化的理解。</li>\n<li>handler中postdelay的原理。</li>\n<li>View的事件传递，手指移出view的事件触发流程。</li>\n<li>父view已经拦截了，子view想处理时用什么方法。</li>\n<li>自定义view的流程 ，测量模式，如何确定子view的测量模式。</li>\n<li>什么view的测量模式是UNSPECIFIED。</li>\n<li>打开支付宝后返回桌面 ，在进入支付宝，会看到刚刚的支付界面，原理是什么？</li>\n<li>Activity的启动模式 taskAfinity 什么情况下用。</li>\n<li>图片列表和视频列表，按照顺序融合，取前200条返回，手写代码实现。</li>\n</ol>\n<p><strong>二面</strong>：技术Leader面</p>\n<ol>\n<li>StartActivity启动流程。</li>\n<li>说说你对Binder的理解。</li>\n<li>ActivityManagerService和zygote进程通信是如何实现的（socket）。</li>\n<li>数据库多线程访问会出现什么问题。</li>\n</ol>\n<p><strong>三面</strong>：技术面</p>\n<ol>\n<li>线程池使用几个参数的意思。</li>\n<li>双重判断单例手写代码，说说为什么这样写。</li>\n<li>之前项目中事件总线怎么处理的。</li>\n<li>EventBus的实现原理，为什么现在项目没用？</li>\n<li>项目中的多线程如何处理?</li>\n<li>Rxjava有哪些好处？</li>\n<li>HashMap的键是存在哪里的？</li>\n<li>Activity A打开B AB分别的生命周期（注意要考虑透明情况）。</li>\n</ol>\n<blockquote>\n<p>快手面试的效率很高，去了两次。一面面试官印象深刻，把我会的基本全问出来了，不太会的还会耐心的给你讲解原理。后面的面试感觉回答的中规中矩。手写代码都写出来了，给人的感觉就会自信很多。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★★★<br><strong>办公环境</strong>：★★★★☆<br><strong>技术氛围</strong>：★★★★★</p>\n<h2 id=\"字节跳动\"><a href=\"#字节跳动\" class=\"headerlink\" title=\"字节跳动\"></a>字节跳动</h2><ol>\n<li>手写二维数组旋转打印。</li>\n<li>https的安全协议是什么？具体做了哪些事情。</li>\n<li>eventbus的内部实现原理。</li>\n<li>apk瘦身做了哪些事情。</li>\n<li>讲讲glide缓存策略。</li>\n<li>说说APT(Annotation Processing Tool)。</li>\n<li>Kt顶层属性和顶层方法的实现原理.</li>\n<li>Java如何调用kotlin的高阶函数</li>\n<li>Sophix热修复对比Andfix做了哪些优化。</li>\n</ol>\n<blockquote>\n<p>两位面试官一同面试，面试的时候是在员工食堂…问的问题都准备的不太好。最主要第一个题目没有写出来，后面就没信心了，然后问了好多好几年前项目的东西，虽然没有通过，但字节跳动还是我比较向往的。不好的地方就是加班比较严重。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★★★<br><strong>办公环境</strong>：★★★★☆<br><strong>技术氛围</strong>：★★★★★</p>\n<h2 id=\"探探\"><a href=\"#探探\" class=\"headerlink\" title=\"探探\"></a>探探</h2><ol>\n<li>透明Activity 启动流程。</li>\n<li>view的事件传递，什么时候会执行onCancel事件。</li>\n<li>自定义view流程。</li>\n<li>安装包瘦身。</li>\n<li>HashMap原理。</li>\n</ol>\n<blockquote>\n<p>公司在国贸附近，10点半去了看着大家都还比较清闲，面试官问的问题我都回答上来了，然后面完了就让我走了，感觉是没在好好招人。或者说面试官感觉我比他厉害，所以不想招我来了。谁知道呢？</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★☆☆<br><strong>办公环境</strong>：★★★★☆<br><strong>技术氛围</strong>：★★★☆☆</p>\n<h2 id=\"轻课\"><a href=\"#轻课\" class=\"headerlink\" title=\"轻课\"></a>轻课</h2><ol>\n<li>说一下HashMap原理</li>\n<li>热修复原理</li>\n<li>Glide 缓存和生命周期管理</li>\n</ol>\n<blockquote>\n<p>又是一家浪费时间的公司，说HashMap原理的时候，面试官直接就打断了：“你说的网上都有，我想听听不一样的”，然后讲Glide缓存的时候，我还没讲完，面试官说：“那弱引用缓存怎么没说”，我说:“我还没说完”，面试官说：“你刚刚就是已经说完了”。最后面试官问：“我没什么问题了，你还有问题吗？”，直接了当的给了句：”我也没了”。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★☆☆☆<br><strong>办公环境</strong>：★☆☆☆☆<br><strong>技术氛围</strong>：★★☆☆☆</p>\n<h2 id=\"心上\"><a href=\"#心上\" class=\"headerlink\" title=\"心上\"></a>心上</h2><ol>\n<li>讲讲https协议和通讯的过程</li>\n<li>notification如何不显示icon。</li>\n<li>带阴影的图如何实现。</li>\n<li>对象传递和值传递。</li>\n<li>HashMap如何扩容。</li>\n<li>GC的过程。</li>\n<li>Android版本的适配做了哪些。</li>\n<li>说说对Android四大组件的理解。</li>\n</ol>\n<blockquote>\n<p>公司离家近，但是是单双休，面试官也很有耐心，给人的感觉还不错。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★☆☆☆<br><strong>办公环境</strong>：★★★☆☆<br><strong>技术氛围</strong>：★★★★☆</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>对于面试流程，先去一些小公司，可去可不去的那种，这样可以先让自己明确需要着重复习的地方，同时了解下市场行情。面试到后面就会慢慢找到感觉。跑面试不容易，尤其上午一场下午一场，中午经常没时间吃饭，大家经历过了的都明白，不过也不要灰心，坚持下去总会找到一份满意的工作。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/mianshi_loc.jpg\" alt=\"\"></p>","more":"<p>时间来到了2019年的11、12月之交，两个月没有更新博客了，这段时间经历了很多事情，而随之面临的紧迫任务就是重新找工作了。时间紧，任务重！两周共面试了15家公司。公司有大也有小，这篇文章主要分享下这些公司的面试题及面试感受。</p>\n<p>在面试之前就想着先去一些小公司面试，丰富面试经验了再去大公司，所以把几个内推大厂的机会都推迟了一周。</p>\n<h2 id=\"MetaApp\"><a href=\"#MetaApp\" class=\"headerlink\" title=\"MetaApp\"></a>MetaApp</h2><ol>\n<li>上机完成一个图片加载App，尽量考虑性能优化。</li>\n<li>做完才能继续后面的面试。</li>\n</ol>\n<blockquote>\n<p>第一个面试，基本没有准备，不是很喜欢这种上机做一整个App的，感觉比较浪费时间。后面没有做完问能不能继续聊聊，hr给的答复是只有做完了才能进行后面的面试，我直接放弃了，感觉这样的规定会错过很多厉害的人，另外公司环境和几年前的网吧没什么区别。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★☆☆☆<br><strong>办公环境</strong>：★☆☆☆☆<br><strong>技术氛围</strong>：★★★★☆</p>\n<h2 id=\"车主帮\"><a href=\"#车主帮\" class=\"headerlink\" title=\"车主帮\"></a>车主帮</h2><ol>\n<li>手画项目中MVVM的每一层架构图。</li>\n<li>讲讲Binder。</li>\n<li>Lanucher启动App流程.</li>\n<li>热修复原理。</li>\n<li>RxJava内部实现原理。</li>\n<li>Retrofit实现原理。</li>\n<li>平衡二叉树和完全二叉树的区别。</li>\n</ol>\n<blockquote>\n<p>依旧是没怎么准备，回答的不是很好，不过面试官还是很nice，把要复习的东西都给我列了一遍，真的是感谢。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★☆☆☆<br><strong>办公环境</strong>：★★★☆☆<br><strong>技术氛围</strong>：★★★☆☆</p>\n<h2 id=\"Opay\"><a href=\"#Opay\" class=\"headerlink\" title=\"Opay\"></a>Opay</h2><ol>\n<li>数组、链表、二叉树的特点，及插入、查找和删除的复杂度。</li>\n<li>LRU算法的具体实现</li>\n<li>ArrayList数据结构是什么样的，是否线程安全。</li>\n<li>线程安全的数据结构有哪些？</li>\n<li>SpraseArray 实现原理。</li>\n<li>Kotlin中val和var的区别，kt单例如何实现，lateinit和by lazy的区别。</li>\n<li>Recyclerview和Listview的区别，如何获取当前屏幕第一个显示item的位置。</li>\n<li>Android如何开启多进程，多进程环境下Application是否会再次初始化。</li>\n<li>数据库多线程操作会不会有问题？</li>\n<li>空心圆如何绘制？</li>\n<li>创建observer有哪些操作符？</li>\n<li>Livedata的数据拷贝。</li>\n<li>Jvm是如何分区的？</li>\n<li>讲讲GC垃圾回收算法。</li>\n<li>handler的实现机制，子线程中如何使用handler， postdelay是如何实现的。</li>\n<li>ConstrantLayout三个button如何平分，ConstrantLayout中如何同时隐藏多个控件。</li>\n<li>Jetpack 熟悉吗？都用过哪些。</li>\n<li>什么情况会出现栈溢出？</li>\n<li>如何直接使用arr文件中的方法，而不初始化。</li>\n</ol>\n<blockquote>\n<p>一共三轮面试，面试官的问题都比较偏向于实际开发，公司在扩大规模，主要做非洲支付的业务。这次面试感觉比前两次好。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★☆☆<br><strong>办公环境</strong>：★★★☆☆<br><strong>技术氛围</strong>：★★★★☆</p>\n<h2 id=\"梧桐车联\"><a href=\"#梧桐车联\" class=\"headerlink\" title=\"梧桐车联\"></a>梧桐车联</h2><ol>\n<li>哪些方式可以让Activity执行finish方法。</li>\n<li>Activity A打开B的生命周期流程。</li>\n<li>onServiceConnected的回调时机。</li>\n<li>子线程代码块中的打印语句和子线程下方主线程的打印语句执行顺序。</li>\n<li>Long类型的比较。</li>\n<li>讲讲String、StringBuffer、StringBuilder的不同。</li>\n<li>Java访问修饰符各自的访问范围。</li>\n<li>什么是多态？</li>\n<li>Equals 和 == 的区别。</li>\n<li>手写二分查找。</li>\n<li>手写字符串去重后打印。</li>\n<li>字符串中只有一个字符只出现了一次，如何快速找到这字符。</li>\n<li>抽象类必须要有抽象方法吗，抽象类和接口有什么区别？</li>\n<li>Stackoverflow什么情况会出现？</li>\n<li>获取屏幕像素大小的方法是什么？</li>\n</ol>\n<blockquote>\n<p>腾讯投资的一家公司，在中关村，因为把期望工资写在了简历上，一面面试官一上来什么问题都没问，直接和我说，就算你面试全部通过了，你写的期望薪资也给不到。然后整个面试氛围就不对了，最关键的是二分查找，我写的是通过移位来计算除以2，结果面试官应是没看懂，还让我给他解释…</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★☆☆<br><strong>办公环境</strong>：★★★★☆<br><strong>技术氛围</strong>：★★★☆☆</p>\n<h2 id=\"多点科技\"><a href=\"#多点科技\" class=\"headerlink\" title=\"多点科技\"></a>多点科技</h2><ol>\n<li>MVVM的解读，对比MVC有哪些好处，为什么不用MVP?</li>\n<li>用队列实现的有哪些数据结构？</li>\n<li>HashMap线程安全吗，如果多线程操作会有什么问题?</li>\n<li>SparseArray的优点，是如何实现的？</li>\n<li>Handler先Postdelay一个消息后，立刻sendmessage，此时是如何处理的？</li>\n<li>Invalidate、postinvalidate、requestlayout 的区别。</li>\n<li>Rxjava中map、flatmap、zip操作符的实现原理，异常是如何处理的？</li>\n<li>Glide缓存机制，是如何实现生命周期的？</li>\n<li>Livedata是如何感知生命周期的？</li>\n<li>Threadlocal的作用及实现原理。</li>\n<li>讲讲Jvm内存分配和GC过程。</li>\n<li>NestedScrollView的实现机制，吸顶效果是如何实现的？</li>\n</ol>\n<blockquote>\n<p>一家中小型公司，面试官都比较负责，问到了很多知识盲点，公司是单独一栋楼，环境还可以，看起来加班不多。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★☆☆☆<br><strong>办公环境</strong>：★★★★☆<br><strong>技术氛围</strong>：★★★☆☆</p>\n<h2 id=\"寺库\"><a href=\"#寺库\" class=\"headerlink\" title=\"寺库\"></a>寺库</h2><ol>\n<li>具体讲讲动态代理。</li>\n<li>AsyncTsak的实现原理。</li>\n<li>多态是什么？</li>\n<li>内存优化都做了哪些？</li>\n<li>类变量和成员变量有什么区别吗？</li>\n<li>生产者消费者手写代码。</li>\n<li>工厂模式在哪些地方有应用。</li>\n<li>Java中Object类有哪些方法？</li>\n<li>具体讲讲JVM的分区。</li>\n<li>Java限定修饰符有哪些，修饰范围如何？</li>\n</ol>\n<blockquote>\n<p>这家公司在三里屯附近，面试官比较耐心，环境还不错。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★★☆<br><strong>办公环境</strong>：★★★★☆<br><strong>技术氛围</strong>：★★☆☆☆</p>\n<h2 id=\"贝壳\"><a href=\"#贝壳\" class=\"headerlink\" title=\"贝壳\"></a>贝壳</h2><ol>\n<li>线程池中有哪几个变量，分别是干什么用的？</li>\n<li>如何直接定位到ListView最后一个。</li>\n<li>Activity A打开B的生命周期，介绍四种启动模式。</li>\n<li>吸顶代码如何实现。</li>\n<li>项目中有哪些你觉得是做的有亮点的？</li>\n<li>Flutter混合开发中闪屏是如何解决的？</li>\n<li>Glide、Okhttp实现原理。</li>\n<li>ActivityThread、ApplicationThread的区别。</li>\n<li>Handler和ThreadHandler的区别。</li>\n<li>讲讲View绘制流程、事件分发机制。</li>\n<li>性能优化都做了哪些方面。</li>\n<li>https是如何实现的。 </li>\n<li>锁分为哪些类型，分别有什么特点？</li>\n<li>sleep和wait的区别？</li>\n</ol>\n<blockquote>\n<p>公司环境还可以，面试官也还行。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★★★<br><strong>办公环境</strong>：★★★★☆<br><strong>技术氛围</strong>：★★★☆☆</p>\n<h2 id=\"完美世界\"><a href=\"#完美世界\" class=\"headerlink\" title=\"完美世界\"></a>完美世界</h2><ol>\n<li>手写两数相加，实现两个链表存储每个数字，然后相加后输出。</li>\n<li>内存调优做了哪些？</li>\n<li>你觉得你之前做过的哪些地方能给我们公司带来价值或者提升？</li>\n<li>Rxjava的线程是如何切换的。</li>\n<li>LeackCanary实现原理</li>\n<li>在公司负责的事情。</li>\n</ol>\n<blockquote>\n<p>面试官虽然有些问题问的不太合适，但是总体还行。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★★☆<br><strong>办公环境</strong>：★★★☆☆<br><strong>技术氛围</strong>：★★★☆☆</p>\n<h2 id=\"美术宝\"><a href=\"#美术宝\" class=\"headerlink\" title=\"美术宝\"></a>美术宝</h2><ol>\n<li>引用传递和值传递的区别。</li>\n<li>多态、静态内部类通过代码来考察。</li>\n<li>Hander中post和sendmessage的区别。</li>\n<li>Hander中postdelay是如何实现的？</li>\n<li>说说View绘制流程。</li>\n<li>Jvm内存模型，new的对象和值分别存在哪里？</li>\n</ol>\n<blockquote>\n<p>面试官还不错，就是公司的各种薪酬福利都不行，估计真的没多少人愿意去。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★☆☆<br><strong>办公环境</strong>：★★★☆☆<br><strong>技术氛围</strong>：★★★☆☆</p>\n<h2 id=\"滴滴\"><a href=\"#滴滴\" class=\"headerlink\" title=\"滴滴\"></a>滴滴</h2><p><strong>一面</strong>：网约车面试官</p>\n<ol>\n<li>HashMap的数据结构，其中如何提高查找效率的，每种情况下的查询复杂度是多少？</li>\n<li>HashMa碰撞过多时是如何解决的？扩容具体是如何实现的？</li>\n<li>内存优化和apk瘦身分别做了哪些？</li>\n<li>内存里面分配一张大的bitmap会触发什么操作？</li>\n<li>Dalvik和Art有什么区别？每个Android版本具体有哪些改进。</li>\n<li>Bitmap的优化InsampleSize，着色模式有哪些，他们的区别？</li>\n<li>项目中遇到最难的问题，如何解决的？</li>\n<li>组件化做了哪些东西？</li>\n<li>Lint解决了哪些问题？</li>\n<li>手写二叉树展开成链表。</li>\n<li>Kotlin中协程和Rxjava的实现有什么异同？</li>\n</ol>\n<p><strong>二面</strong>：项目负责人</p>\n<ol>\n<li>讲讲在公司都负责什么事情？</li>\n<li>如何降低崩溃率的，你都做了哪些事情？</li>\n<li>如何协调安排工期的，如果产品给的需求在规定时间内完不成如何处理。</li>\n<li>和哪些人有过沟通？</li>\n<li>觉得做的比较好的地方？</li>\n<li>最难忘的事情。</li>\n<li>为什么要换工作？</li>\n<li>有哪些兴趣爱好。</li>\n</ol>\n<p><strong>三面</strong>：总监</p>\n<ol>\n<li>自我介绍。</li>\n<li>现在公司承担的角色。</li>\n<li>有哪些做的好的地方，有哪些做的不好的。</li>\n<li>职业发展方向</li>\n<li>有没有努力的对象，最崇拜的人是谁。</li>\n<li>有什么问题要问我的吗？</li>\n</ol>\n<blockquote>\n<p>总体面试感受就是面试官会尝试引导你回答一些问题，而不是说在你不会的地方死扣。项目负责人很nice，总监问的问题比较不好回答。后面hr的流程较慢。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★★★<br><strong>办公环境</strong>：★★★★☆<br><strong>技术氛围</strong>：★★★★★</p>\n<h2 id=\"快手\"><a href=\"#快手\" class=\"headerlink\" title=\"快手\"></a>快手</h2><p><strong>一面</strong>：技术面</p>\n<ol>\n<li>组件化和模块化的理解。</li>\n<li>handler中postdelay的原理。</li>\n<li>View的事件传递，手指移出view的事件触发流程。</li>\n<li>父view已经拦截了，子view想处理时用什么方法。</li>\n<li>自定义view的流程 ，测量模式，如何确定子view的测量模式。</li>\n<li>什么view的测量模式是UNSPECIFIED。</li>\n<li>打开支付宝后返回桌面 ，在进入支付宝，会看到刚刚的支付界面，原理是什么？</li>\n<li>Activity的启动模式 taskAfinity 什么情况下用。</li>\n<li>图片列表和视频列表，按照顺序融合，取前200条返回，手写代码实现。</li>\n</ol>\n<p><strong>二面</strong>：技术Leader面</p>\n<ol>\n<li>StartActivity启动流程。</li>\n<li>说说你对Binder的理解。</li>\n<li>ActivityManagerService和zygote进程通信是如何实现的（socket）。</li>\n<li>数据库多线程访问会出现什么问题。</li>\n</ol>\n<p><strong>三面</strong>：技术面</p>\n<ol>\n<li>线程池使用几个参数的意思。</li>\n<li>双重判断单例手写代码，说说为什么这样写。</li>\n<li>之前项目中事件总线怎么处理的。</li>\n<li>EventBus的实现原理，为什么现在项目没用？</li>\n<li>项目中的多线程如何处理?</li>\n<li>Rxjava有哪些好处？</li>\n<li>HashMap的键是存在哪里的？</li>\n<li>Activity A打开B AB分别的生命周期（注意要考虑透明情况）。</li>\n</ol>\n<blockquote>\n<p>快手面试的效率很高，去了两次。一面面试官印象深刻，把我会的基本全问出来了，不太会的还会耐心的给你讲解原理。后面的面试感觉回答的中规中矩。手写代码都写出来了，给人的感觉就会自信很多。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★★★<br><strong>办公环境</strong>：★★★★☆<br><strong>技术氛围</strong>：★★★★★</p>\n<h2 id=\"字节跳动\"><a href=\"#字节跳动\" class=\"headerlink\" title=\"字节跳动\"></a>字节跳动</h2><ol>\n<li>手写二维数组旋转打印。</li>\n<li>https的安全协议是什么？具体做了哪些事情。</li>\n<li>eventbus的内部实现原理。</li>\n<li>apk瘦身做了哪些事情。</li>\n<li>讲讲glide缓存策略。</li>\n<li>说说APT(Annotation Processing Tool)。</li>\n<li>Kt顶层属性和顶层方法的实现原理.</li>\n<li>Java如何调用kotlin的高阶函数</li>\n<li>Sophix热修复对比Andfix做了哪些优化。</li>\n</ol>\n<blockquote>\n<p>两位面试官一同面试，面试的时候是在员工食堂…问的问题都准备的不太好。最主要第一个题目没有写出来，后面就没信心了，然后问了好多好几年前项目的东西，虽然没有通过，但字节跳动还是我比较向往的。不好的地方就是加班比较严重。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★★★<br><strong>办公环境</strong>：★★★★☆<br><strong>技术氛围</strong>：★★★★★</p>\n<h2 id=\"探探\"><a href=\"#探探\" class=\"headerlink\" title=\"探探\"></a>探探</h2><ol>\n<li>透明Activity 启动流程。</li>\n<li>view的事件传递，什么时候会执行onCancel事件。</li>\n<li>自定义view流程。</li>\n<li>安装包瘦身。</li>\n<li>HashMap原理。</li>\n</ol>\n<blockquote>\n<p>公司在国贸附近，10点半去了看着大家都还比较清闲，面试官问的问题我都回答上来了，然后面完了就让我走了，感觉是没在好好招人。或者说面试官感觉我比他厉害，所以不想招我来了。谁知道呢？</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★★☆☆<br><strong>办公环境</strong>：★★★★☆<br><strong>技术氛围</strong>：★★★☆☆</p>\n<h2 id=\"轻课\"><a href=\"#轻课\" class=\"headerlink\" title=\"轻课\"></a>轻课</h2><ol>\n<li>说一下HashMap原理</li>\n<li>热修复原理</li>\n<li>Glide 缓存和生命周期管理</li>\n</ol>\n<blockquote>\n<p>又是一家浪费时间的公司，说HashMap原理的时候，面试官直接就打断了：“你说的网上都有，我想听听不一样的”，然后讲Glide缓存的时候，我还没讲完，面试官说：“那弱引用缓存怎么没说”，我说:“我还没说完”，面试官说：“你刚刚就是已经说完了”。最后面试官问：“我没什么问题了，你还有问题吗？”，直接了当的给了句：”我也没了”。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★☆☆☆<br><strong>办公环境</strong>：★☆☆☆☆<br><strong>技术氛围</strong>：★★☆☆☆</p>\n<h2 id=\"心上\"><a href=\"#心上\" class=\"headerlink\" title=\"心上\"></a>心上</h2><ol>\n<li>讲讲https协议和通讯的过程</li>\n<li>notification如何不显示icon。</li>\n<li>带阴影的图如何实现。</li>\n<li>对象传递和值传递。</li>\n<li>HashMap如何扩容。</li>\n<li>GC的过程。</li>\n<li>Android版本的适配做了哪些。</li>\n<li>说说对Android四大组件的理解。</li>\n</ol>\n<blockquote>\n<p>公司离家近，但是是单双休，面试官也很有耐心，给人的感觉还不错。</p>\n</blockquote>\n<p><strong>公司规模</strong>：★★☆☆☆<br><strong>办公环境</strong>：★★★☆☆<br><strong>技术氛围</strong>：★★★★☆</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>对于面试流程，先去一些小公司，可去可不去的那种，这样可以先让自己明确需要着重复习的地方，同时了解下市场行情。面试到后面就会慢慢找到感觉。跑面试不容易，尤其上午一场下午一场，中午经常没时间吃饭，大家经历过了的都明白，不过也不要灰心，坚持下去总会找到一份满意的工作。</p>"},{"title":"Kotlin混合开发上","date":"2019-04-30T07:10:15.000Z","_content":"\n![](https://img.carlwe.com/kotlin_history.jpg-h)\n\n<!--more-->\n\n> 本文会从kotlin语言的发展引出kotlin一些特点和用法，从而对kotlin简单上手。\n\n## 了解Kotlin\n\n### Kotlin的发展\n\n如上图所示，kotlin已经经历了将近10年的发展。\"Kotlin\"来源于一个岛屿的名字，全称是 Kotlin Island，是英语「科特林岛」之意。这个小岛属于俄罗斯，但是开发Kotlin的公司JetBrains 是来自捷克的公司，公司总部位于捷克首都布拉格，那为什么找一个俄罗斯的小岛呢？那是因为JetBrains在俄罗斯的圣彼得堡设有分公司。Kotlin的主要开发工作正是由俄罗斯的圣彼得堡分公司的程序员团队完成的，他们想：Java语言的名字是来自于一个岛，那个岛就是印度尼西亚的爪哇（Java）岛，因盛产咖啡而闻名。Java如此伟大，所以 Kotlin 也得选一个岛作为名字，由此能看出Kotlin团队的雄心勃勃！哈哈哈...\n\n另外：2018 年10月29日发布了 kotlin 1.3，正式发布了\"协程\"，我们后面会进行介绍。\n\n### Kotlin的基本语法\n\nKotlin在基础语法上吸取了现代语言的很多优点，去除了很多不必要的标点符号，使得代码相对java简洁很多。\n\n#### 变量\n\n```kotlin\nval a = 1;\nvar str1:String = \"hello\"\nvar str2:String = null\nval list = arrayListOf(\"10\", \"11\", \"1001\")//kotlin方法自动识别类型\n```\n\n#### 条件\n\n```kotlin\nwhen(a){\n    1 -> println(\"等于1\")\n    2 -> println(\"等于2\")\n}\n```\n\n#### 循环\n\n```kotlin\nfor ((index, element) in list.withIndex()) {\n    println(\"$index = $element\")\n}\n```\n\n#### 方法\n\n```kotlin\nfun max(a: Int, b: Int): Int{\n    return if (a > b) a else b\n}\n```\n\n#### 类\n\n```kotlin\nclass Book(val title: String, val age: Int)\n```\n\n### Kotlin的特点\n\n![](https://img.carlwe.com/kotlin_advantage.jpg)\n\n#### 实用性\n\n1.单例：\n\n```java\n//Java\npublic class SingletonDemo {\n    private static SingletonDemo instance=new SingletonDemo();\n    private SingletonDemo(){\n    \n    }\n    public static SingletonDemo getInstance(){\n        return instance;\n    }\n}\n```\n\n```kotlin\n//Kotlin\nobject SingletonDemo\n```\n\n2.默认参数\n\n```java\n//Java\npublic void showEmpty(){\n   ...\n}\npublic void showEmpty(String buttonName){\n   ...\n}\npublic void showEmpty(String buttonName,String desc){\n   ...\n}\n```\n\n```kotlin\n//Kotlin 直接给出默认值，方法的参数，想传哪个就传哪个\n//当参数较多时，kotlin推荐在调用方法时显示声明参数名\nfun showEmpty(buttonName: String = \"\",desc: String = \"\"){\n    ...\n}\n```\n\n#### 简洁\n\n1.类定义\n\n```java\n//Java\nclass Book {\n    private String title;\n    private int age;\n    public String getTitle() {\n        return title;\n    }\n    public void setTitle(String title) {\n        this.title = title;\n    }\n    public int getAge() {\n        return age;\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n```\n\n```kotlin\n//Kotlin\nclass Book(val title: String, val age: Int)\n```\n\n2.集合操作\n\n```java\n//Java\nfor(People person: people){\n    if(person.getAge() > 20){\n        println(person.getName());\n    }\n}\n```\n\n```kotlin\n//Kotlin\nval people = listOf(Person(\"xiaohong\", 23),Person(\"xiaoming\", 15))\nprintln(peoples.filter { it.age > 20 }.map { it.name })\n```\n\n#### 安全\n\n```kotlin\n//先定义三个类 方便下面使用\nclass Address(val city: String, val country: String)\nclass Company(val name: String, val address: Address?)\nclass Person(val name: String, val company: Company?)\n```\n\n```kotlin\n//Kotlin\nfun Person.countryName(): String? {\n    return company?.address?.country ?: \"Unknow\"\n}\nfun Test(){\n    val person = Person(\"xiaohua\", null)\n    println(person.countryName())\n \tprintln(person.let{it.company})\n}\n```\n\n```Java\n//Java\npublic void getCountryName(Person person){\n    if(person!=null && person.company!=null \n       && person.company.address!=null \n       && person.company.address.country!=null){\n        return person.company.address.country;\n    }else{\n        return \"Unknow\";\n    }\n}\npublic void Test(){\n    Person person = new Person(\"xiaohua\",null)\n    System.out.println(getCountryName(person))\n}\n```\n\n> Kotlin推出了很多关键字来解决空安全，例如：`?.` `?:`  等，同时在编译时会对调用进行空检查，非常好的将空指针异常扼杀在了编译期。\n\n## Kotlin用法分享\n\n### 扩展函数\n\n当我们使用第三方框架时(例如Java），发现其现有的代码方法不能满足我们的需求，这个时候我们要么自己去继承这个类，重写方法，要么直接使用源码在里面去修改，但是这两种方法代价都比较大。那有没有什么好的方法呢，正好Kotlin的出现给我们带来了一个神奇的函数——扩展函数：\n\nKotlin 可以直接对一个类的属性和方法进行扩展，且不需要继承，扩展是一种静态行为，对被扩展的类代码本身不会造成任何影响，只是定义在类的外面，而且扩展后在任意地方都可以直接调用该方法。\n\n例如给String类添加一个方法：\n\n```kotlin\nfun String.lastChar():Char = this.get(this.length - 1)\n//使用\nval name = \"xiaohong\"\nprintln(name.lastChar()) //输出 g\n```\n\n### 运算符重载\n\nKotiln中的很多特性的实现都十分相似，很多时候都是通过调用自己代码中的函数来实现特定的功能。例如如果你在类中定义了一个名为plus的特殊方法，那么按照kotlin`约定`你就可以使用+运算符。Kotlin中把这种通过简单的运算符就可以调用特定方法的技术称之为**约定** 。\n\n例如定义两个点的相加操作：\n\n```kotlin\ndata class Point(val x:Int,val y:Int){\n    operator fun plus(other: Point):Point{\n        return Point(x + other.x, y + other.y)//具体相加实现可按照实际需求定义\n    }\n}\n//使用\nval p1 = Point(2,3)\nval p2 = Point(4,1)\nprintln(p1+ p2) //输出 Point(6,4)\n```\n\n### Lambada编程\n\nLambda 表达式，或简称 lambda，本质上就是可以传递给其他函数的一小段代码 。 有了 lambda，可以轻松地把通用的代码结构抽取成库函数， Kotlin标准库就大量地 使用了它们。最常见的一种lambda用途就是和集合一起工作。lambda在kotlin中的常用的两个函数就是 with和apply\n\n**with** ：with 标准库函数允许你调用同 一个对象的多个方法，而不需要反复写出这个对象的引用 。例如：\n\n```kotlin\nval leftAmount = with(mBuyInfo){\n    println(totalamount)\n    leftamount//直接调用mBuyInfo的属性 在最后一行作为返回值\n}\n```\n\n**apply** : apply 函数让你使用构建者风格的 API 创建和初始化任何对象。 \n\n```kotlin\nfun createTextView(context:Context) = TextView(context).apply{\n    text = \"sample text\"\n    textSize = 20.0f\n}\n```\n\n### 高阶函数\n\nLambda 是一个构建抽象概念的强大工具，它的能力并不局限于标准库中提供的集合和其他类，我们可以创建属于自己的高阶函数。 类似于数学中的高阶函数 f(g(x))，高阶函数的概念是：以函数作为参数或者返回值的函数。\n\n在了解高阶函数之前，我们先来看看**函数类型**：\n\n```kotlin\nval sum = { x: Int,y: Int -> x + y }\n```\n\n能够清晰的看出，函数类型分为参数定义和具体的逻辑实现。在kotlin中函数也可以当作一个变量存储起来。\n\n下面让我们来看看高阶函数的定义：\n\n```kotlin\nfun twoAndThree(operation: (Int, Int)-> Int){\n    val result = operation(2, 3)\n    println(\"this result is $result\")\n}\n//调用twoAndThree函数传入上面定义的sum函数\ntwoAndThree(sum)//this result is 5\n```\n\n可以看到我们将一个函数类型当作参数传入到了高阶函数中，operation方法调用的就是sum函数类型定义的操作。\n\n### 协程\n\n上面讲到Kotlin从1.3开始正式发布了协程，主要的目的是让异步执行的代码，转变成看起来是顺序执行的，之前开启一个异步任务，我们肯跟会想到如下几种方式：\n\n> 1. 开启一个线程处理\n> 2. 利用AsyncTask\n> 3. 利用CallBack\n> 4. 利用RxJava\n\n上面的方式都是在一个线程处理比较好耗时的操作，然后还会涉及到线程的切换，只是写法上有的会更先进一些。但是通过kotlin的协程则可以使其变得更人性化，代码开起来更直观。\n\n例之前在安卓上下载文件的例子：\n\n```java\n private class DownloadFilesTask extends AsyncTask<URL, Integer, Long> {\n     protected Long doInBackground(URL... urls) {\n         int count = urls.length;\n         long totalSize = 0;\n         for (int i = 0; i < count; i++) {\n             totalSize += Downloader.downloadFile(urls[i]);\n             publishProgress((int) ((i / (float) count) * 100));\n             // Escape early if cancel() is called\n             if (isCancelled()) break;\n         }\n         return totalSize;\n     }\n\n     protected void onProgressUpdate(Integer... progress) {\n         setProgressPercent(progress[0]);\n     }\n\n     protected void onPostExecute(Long result) {\n         showDialog(\"Downloaded \" + result + \" bytes\");\n     }\n }\n```\n\n当回调过多，代码层级嵌套就会越来愈多，从而形成了地狱回调。但通过使用Kotlin的async/await之后呢：\n\n```kotlin\nfun main(args: Array<String>) {\n    val future = async<String> {\n        (1..5).map {\n            await(startLongAsyncOperation(it)) \n        }.joinToString(\"\\n\")\n    }\n    println(future.get())\n}\n```\n\n代码看起来是不是简洁很多，kotlin通过协程完美的解决了之前在java上会出现的地狱回调的问题。\n\n## 总结\n\n本文简要的介绍的kotlin的一些特性和用法，对于想上手的朋友来说，了解了这些已经足够进行日常的开发工作了。但是想要深入的了解背后的原理，和一些特殊的用法，推荐如下两种方式：\n\n1.可以通过阅读 **《kotlin实战》**这本书系统学习kotlin。\n2.通过查阅[官方文档](<https://kotlinlang.org/docs/reference/>)进行学习和了解最新的特性和用法。\n\n如果说这篇文章是kotlin混合开发的开胃菜，那么下篇文章则将会给大家带来kotlin混合开发中最需要注意的问题，都是我在实际开发中的一些总结，值得期待。\n\n","source":"_posts/Kotlin混合开发上.md","raw":"---\ntitle: Kotlin混合开发上\ndate: 2019-04-30 15:10:15\ntags: 技术\n---\n\n![](https://img.carlwe.com/kotlin_history.jpg-h)\n\n<!--more-->\n\n> 本文会从kotlin语言的发展引出kotlin一些特点和用法，从而对kotlin简单上手。\n\n## 了解Kotlin\n\n### Kotlin的发展\n\n如上图所示，kotlin已经经历了将近10年的发展。\"Kotlin\"来源于一个岛屿的名字，全称是 Kotlin Island，是英语「科特林岛」之意。这个小岛属于俄罗斯，但是开发Kotlin的公司JetBrains 是来自捷克的公司，公司总部位于捷克首都布拉格，那为什么找一个俄罗斯的小岛呢？那是因为JetBrains在俄罗斯的圣彼得堡设有分公司。Kotlin的主要开发工作正是由俄罗斯的圣彼得堡分公司的程序员团队完成的，他们想：Java语言的名字是来自于一个岛，那个岛就是印度尼西亚的爪哇（Java）岛，因盛产咖啡而闻名。Java如此伟大，所以 Kotlin 也得选一个岛作为名字，由此能看出Kotlin团队的雄心勃勃！哈哈哈...\n\n另外：2018 年10月29日发布了 kotlin 1.3，正式发布了\"协程\"，我们后面会进行介绍。\n\n### Kotlin的基本语法\n\nKotlin在基础语法上吸取了现代语言的很多优点，去除了很多不必要的标点符号，使得代码相对java简洁很多。\n\n#### 变量\n\n```kotlin\nval a = 1;\nvar str1:String = \"hello\"\nvar str2:String = null\nval list = arrayListOf(\"10\", \"11\", \"1001\")//kotlin方法自动识别类型\n```\n\n#### 条件\n\n```kotlin\nwhen(a){\n    1 -> println(\"等于1\")\n    2 -> println(\"等于2\")\n}\n```\n\n#### 循环\n\n```kotlin\nfor ((index, element) in list.withIndex()) {\n    println(\"$index = $element\")\n}\n```\n\n#### 方法\n\n```kotlin\nfun max(a: Int, b: Int): Int{\n    return if (a > b) a else b\n}\n```\n\n#### 类\n\n```kotlin\nclass Book(val title: String, val age: Int)\n```\n\n### Kotlin的特点\n\n![](https://img.carlwe.com/kotlin_advantage.jpg)\n\n#### 实用性\n\n1.单例：\n\n```java\n//Java\npublic class SingletonDemo {\n    private static SingletonDemo instance=new SingletonDemo();\n    private SingletonDemo(){\n    \n    }\n    public static SingletonDemo getInstance(){\n        return instance;\n    }\n}\n```\n\n```kotlin\n//Kotlin\nobject SingletonDemo\n```\n\n2.默认参数\n\n```java\n//Java\npublic void showEmpty(){\n   ...\n}\npublic void showEmpty(String buttonName){\n   ...\n}\npublic void showEmpty(String buttonName,String desc){\n   ...\n}\n```\n\n```kotlin\n//Kotlin 直接给出默认值，方法的参数，想传哪个就传哪个\n//当参数较多时，kotlin推荐在调用方法时显示声明参数名\nfun showEmpty(buttonName: String = \"\",desc: String = \"\"){\n    ...\n}\n```\n\n#### 简洁\n\n1.类定义\n\n```java\n//Java\nclass Book {\n    private String title;\n    private int age;\n    public String getTitle() {\n        return title;\n    }\n    public void setTitle(String title) {\n        this.title = title;\n    }\n    public int getAge() {\n        return age;\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n```\n\n```kotlin\n//Kotlin\nclass Book(val title: String, val age: Int)\n```\n\n2.集合操作\n\n```java\n//Java\nfor(People person: people){\n    if(person.getAge() > 20){\n        println(person.getName());\n    }\n}\n```\n\n```kotlin\n//Kotlin\nval people = listOf(Person(\"xiaohong\", 23),Person(\"xiaoming\", 15))\nprintln(peoples.filter { it.age > 20 }.map { it.name })\n```\n\n#### 安全\n\n```kotlin\n//先定义三个类 方便下面使用\nclass Address(val city: String, val country: String)\nclass Company(val name: String, val address: Address?)\nclass Person(val name: String, val company: Company?)\n```\n\n```kotlin\n//Kotlin\nfun Person.countryName(): String? {\n    return company?.address?.country ?: \"Unknow\"\n}\nfun Test(){\n    val person = Person(\"xiaohua\", null)\n    println(person.countryName())\n \tprintln(person.let{it.company})\n}\n```\n\n```Java\n//Java\npublic void getCountryName(Person person){\n    if(person!=null && person.company!=null \n       && person.company.address!=null \n       && person.company.address.country!=null){\n        return person.company.address.country;\n    }else{\n        return \"Unknow\";\n    }\n}\npublic void Test(){\n    Person person = new Person(\"xiaohua\",null)\n    System.out.println(getCountryName(person))\n}\n```\n\n> Kotlin推出了很多关键字来解决空安全，例如：`?.` `?:`  等，同时在编译时会对调用进行空检查，非常好的将空指针异常扼杀在了编译期。\n\n## Kotlin用法分享\n\n### 扩展函数\n\n当我们使用第三方框架时(例如Java），发现其现有的代码方法不能满足我们的需求，这个时候我们要么自己去继承这个类，重写方法，要么直接使用源码在里面去修改，但是这两种方法代价都比较大。那有没有什么好的方法呢，正好Kotlin的出现给我们带来了一个神奇的函数——扩展函数：\n\nKotlin 可以直接对一个类的属性和方法进行扩展，且不需要继承，扩展是一种静态行为，对被扩展的类代码本身不会造成任何影响，只是定义在类的外面，而且扩展后在任意地方都可以直接调用该方法。\n\n例如给String类添加一个方法：\n\n```kotlin\nfun String.lastChar():Char = this.get(this.length - 1)\n//使用\nval name = \"xiaohong\"\nprintln(name.lastChar()) //输出 g\n```\n\n### 运算符重载\n\nKotiln中的很多特性的实现都十分相似，很多时候都是通过调用自己代码中的函数来实现特定的功能。例如如果你在类中定义了一个名为plus的特殊方法，那么按照kotlin`约定`你就可以使用+运算符。Kotlin中把这种通过简单的运算符就可以调用特定方法的技术称之为**约定** 。\n\n例如定义两个点的相加操作：\n\n```kotlin\ndata class Point(val x:Int,val y:Int){\n    operator fun plus(other: Point):Point{\n        return Point(x + other.x, y + other.y)//具体相加实现可按照实际需求定义\n    }\n}\n//使用\nval p1 = Point(2,3)\nval p2 = Point(4,1)\nprintln(p1+ p2) //输出 Point(6,4)\n```\n\n### Lambada编程\n\nLambda 表达式，或简称 lambda，本质上就是可以传递给其他函数的一小段代码 。 有了 lambda，可以轻松地把通用的代码结构抽取成库函数， Kotlin标准库就大量地 使用了它们。最常见的一种lambda用途就是和集合一起工作。lambda在kotlin中的常用的两个函数就是 with和apply\n\n**with** ：with 标准库函数允许你调用同 一个对象的多个方法，而不需要反复写出这个对象的引用 。例如：\n\n```kotlin\nval leftAmount = with(mBuyInfo){\n    println(totalamount)\n    leftamount//直接调用mBuyInfo的属性 在最后一行作为返回值\n}\n```\n\n**apply** : apply 函数让你使用构建者风格的 API 创建和初始化任何对象。 \n\n```kotlin\nfun createTextView(context:Context) = TextView(context).apply{\n    text = \"sample text\"\n    textSize = 20.0f\n}\n```\n\n### 高阶函数\n\nLambda 是一个构建抽象概念的强大工具，它的能力并不局限于标准库中提供的集合和其他类，我们可以创建属于自己的高阶函数。 类似于数学中的高阶函数 f(g(x))，高阶函数的概念是：以函数作为参数或者返回值的函数。\n\n在了解高阶函数之前，我们先来看看**函数类型**：\n\n```kotlin\nval sum = { x: Int,y: Int -> x + y }\n```\n\n能够清晰的看出，函数类型分为参数定义和具体的逻辑实现。在kotlin中函数也可以当作一个变量存储起来。\n\n下面让我们来看看高阶函数的定义：\n\n```kotlin\nfun twoAndThree(operation: (Int, Int)-> Int){\n    val result = operation(2, 3)\n    println(\"this result is $result\")\n}\n//调用twoAndThree函数传入上面定义的sum函数\ntwoAndThree(sum)//this result is 5\n```\n\n可以看到我们将一个函数类型当作参数传入到了高阶函数中，operation方法调用的就是sum函数类型定义的操作。\n\n### 协程\n\n上面讲到Kotlin从1.3开始正式发布了协程，主要的目的是让异步执行的代码，转变成看起来是顺序执行的，之前开启一个异步任务，我们肯跟会想到如下几种方式：\n\n> 1. 开启一个线程处理\n> 2. 利用AsyncTask\n> 3. 利用CallBack\n> 4. 利用RxJava\n\n上面的方式都是在一个线程处理比较好耗时的操作，然后还会涉及到线程的切换，只是写法上有的会更先进一些。但是通过kotlin的协程则可以使其变得更人性化，代码开起来更直观。\n\n例之前在安卓上下载文件的例子：\n\n```java\n private class DownloadFilesTask extends AsyncTask<URL, Integer, Long> {\n     protected Long doInBackground(URL... urls) {\n         int count = urls.length;\n         long totalSize = 0;\n         for (int i = 0; i < count; i++) {\n             totalSize += Downloader.downloadFile(urls[i]);\n             publishProgress((int) ((i / (float) count) * 100));\n             // Escape early if cancel() is called\n             if (isCancelled()) break;\n         }\n         return totalSize;\n     }\n\n     protected void onProgressUpdate(Integer... progress) {\n         setProgressPercent(progress[0]);\n     }\n\n     protected void onPostExecute(Long result) {\n         showDialog(\"Downloaded \" + result + \" bytes\");\n     }\n }\n```\n\n当回调过多，代码层级嵌套就会越来愈多，从而形成了地狱回调。但通过使用Kotlin的async/await之后呢：\n\n```kotlin\nfun main(args: Array<String>) {\n    val future = async<String> {\n        (1..5).map {\n            await(startLongAsyncOperation(it)) \n        }.joinToString(\"\\n\")\n    }\n    println(future.get())\n}\n```\n\n代码看起来是不是简洁很多，kotlin通过协程完美的解决了之前在java上会出现的地狱回调的问题。\n\n## 总结\n\n本文简要的介绍的kotlin的一些特性和用法，对于想上手的朋友来说，了解了这些已经足够进行日常的开发工作了。但是想要深入的了解背后的原理，和一些特殊的用法，推荐如下两种方式：\n\n1.可以通过阅读 **《kotlin实战》**这本书系统学习kotlin。\n2.通过查阅[官方文档](<https://kotlinlang.org/docs/reference/>)进行学习和了解最新的特性和用法。\n\n如果说这篇文章是kotlin混合开发的开胃菜，那么下篇文章则将会给大家带来kotlin混合开发中最需要注意的问题，都是我在实际开发中的一些总结，值得期待。\n\n","slug":"Kotlin混合开发上","published":1,"updated":"2020-08-18T02:25:58.809Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnoz0009t57sfzaoyhg9","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/kotlin_history.jpg-h\" alt=\"\"></p>\n<a id=\"more\"></a>\n<blockquote>\n<p>本文会从kotlin语言的发展引出kotlin一些特点和用法，从而对kotlin简单上手。</p>\n</blockquote>\n<h2 id=\"了解Kotlin\"><a href=\"#了解Kotlin\" class=\"headerlink\" title=\"了解Kotlin\"></a>了解Kotlin</h2><h3 id=\"Kotlin的发展\"><a href=\"#Kotlin的发展\" class=\"headerlink\" title=\"Kotlin的发展\"></a>Kotlin的发展</h3><p>如上图所示，kotlin已经经历了将近10年的发展。”Kotlin”来源于一个岛屿的名字，全称是 Kotlin Island，是英语「科特林岛」之意。这个小岛属于俄罗斯，但是开发Kotlin的公司JetBrains 是来自捷克的公司，公司总部位于捷克首都布拉格，那为什么找一个俄罗斯的小岛呢？那是因为JetBrains在俄罗斯的圣彼得堡设有分公司。Kotlin的主要开发工作正是由俄罗斯的圣彼得堡分公司的程序员团队完成的，他们想：Java语言的名字是来自于一个岛，那个岛就是印度尼西亚的爪哇（Java）岛，因盛产咖啡而闻名。Java如此伟大，所以 Kotlin 也得选一个岛作为名字，由此能看出Kotlin团队的雄心勃勃！哈哈哈…</p>\n<p>另外：2018 年10月29日发布了 kotlin 1.3，正式发布了”协程”，我们后面会进行介绍。</p>\n<h3 id=\"Kotlin的基本语法\"><a href=\"#Kotlin的基本语法\" class=\"headerlink\" title=\"Kotlin的基本语法\"></a>Kotlin的基本语法</h3><p>Kotlin在基础语法上吸取了现代语言的很多优点，去除了很多不必要的标点符号，使得代码相对java简洁很多。</p>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str1:String = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2:String = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> list = arrayListOf(<span class=\"string\">\"10\"</span>, <span class=\"string\">\"11\"</span>, <span class=\"string\">\"1001\"</span>)<span class=\"comment\">//kotlin方法自动识别类型</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">when</span>(a)&#123;</span><br><span class=\"line\">    <span class=\"number\">1</span> -&gt; println(<span class=\"string\">\"等于1\"</span>)</span><br><span class=\"line\">    <span class=\"number\">2</span> -&gt; println(<span class=\"string\">\"等于2\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ((index, element) <span class=\"keyword\">in</span> list.withIndex()) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"<span class=\"variable\">$index</span> = <span class=\"variable\">$element</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">max</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">if</span> (a &gt; b) a <span class=\"keyword\">else</span> b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span></span>(<span class=\"keyword\">val</span> title: String, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Kotlin的特点\"><a href=\"#Kotlin的特点\" class=\"headerlink\" title=\"Kotlin的特点\"></a>Kotlin的特点</h3><p><img src=\"https://img.carlwe.com/kotlin_advantage.jpg\" alt=\"\"></p>\n<h4 id=\"实用性\"><a href=\"#实用性\" class=\"headerlink\" title=\"实用性\"></a>实用性</h4><p>1.单例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo instance=<span class=\"keyword\">new</span> SingletonDemo();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDemo <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Kotlin</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> SingletonDemo</span><br></pre></td></tr></table></figure>\n<p>2.默认参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showEmpty</span><span class=\"params\">(String buttonName)</span></span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showEmpty</span><span class=\"params\">(String buttonName,String desc)</span></span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Kotlin 直接给出默认值，方法的参数，想传哪个就传哪个</span></span><br><span class=\"line\"><span class=\"comment\">//当参数较多时，kotlin推荐在调用方法时显示声明参数名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">showEmpty</span><span class=\"params\">(buttonName: <span class=\"type\">String</span> = <span class=\"string\">\"\"</span>,desc: <span class=\"type\">String</span> = <span class=\"string\">\"\"</span>)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"简洁\"><a href=\"#简洁\" class=\"headerlink\" title=\"简洁\"></a>简洁</h4><p>1.类定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTitle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">(String title)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Kotlin</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span></span>(<span class=\"keyword\">val</span> title: String, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span>)</span><br></pre></td></tr></table></figure>\n<p>2.集合操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(People person: people)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(person.getAge() &gt; <span class=\"number\">20</span>)&#123;</span><br><span class=\"line\">        println(person.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Kotlin</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> people = listOf(Person(<span class=\"string\">\"xiaohong\"</span>, <span class=\"number\">23</span>),Person(<span class=\"string\">\"xiaoming\"</span>, <span class=\"number\">15</span>))</span><br><span class=\"line\">println(peoples.filter &#123; it.age &gt; <span class=\"number\">20</span> &#125;.map &#123; it.name &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先定义三个类 方便下面使用</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span></span>(<span class=\"keyword\">val</span> city: String, <span class=\"keyword\">val</span> country: String)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Company</span></span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> address: Address?)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> company: Company?)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Kotlin</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> Person.<span class=\"title\">countryName</span><span class=\"params\">()</span></span>: String? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> company?.address?.country ?: <span class=\"string\">\"Unknow\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> person = Person(<span class=\"string\">\"xiaohua\"</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">    println(person.countryName())</span><br><span class=\"line\"> \tprintln(person.let&#123;it.company&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getCountryName</span><span class=\"params\">(Person person)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(person!=<span class=\"keyword\">null</span> &amp;&amp; person.company!=<span class=\"keyword\">null</span> </span><br><span class=\"line\">       &amp;&amp; person.company.address!=<span class=\"keyword\">null</span> </span><br><span class=\"line\">       &amp;&amp; person.company.address.country!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person.company.address.country;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Unknow\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Person person = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"xiaohua\"</span>,<span class=\"keyword\">null</span>)</span><br><span class=\"line\">    System.out.println(getCountryName(person))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Kotlin推出了很多关键字来解决空安全，例如：<code>?.</code> <code>?:</code>  等，同时在编译时会对调用进行空检查，非常好的将空指针异常扼杀在了编译期。</p>\n</blockquote>\n<h2 id=\"Kotlin用法分享\"><a href=\"#Kotlin用法分享\" class=\"headerlink\" title=\"Kotlin用法分享\"></a>Kotlin用法分享</h2><h3 id=\"扩展函数\"><a href=\"#扩展函数\" class=\"headerlink\" title=\"扩展函数\"></a>扩展函数</h3><p>当我们使用第三方框架时(例如Java），发现其现有的代码方法不能满足我们的需求，这个时候我们要么自己去继承这个类，重写方法，要么直接使用源码在里面去修改，但是这两种方法代价都比较大。那有没有什么好的方法呢，正好Kotlin的出现给我们带来了一个神奇的函数——扩展函数：</p>\n<p>Kotlin 可以直接对一个类的属性和方法进行扩展，且不需要继承，扩展是一种静态行为，对被扩展的类代码本身不会造成任何影响，只是定义在类的外面，而且扩展后在任意地方都可以直接调用该方法。</p>\n<p>例如给String类添加一个方法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> String.<span class=\"title\">lastChar</span><span class=\"params\">()</span></span>:<span class=\"built_in\">Char</span> = <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> name = <span class=\"string\">\"xiaohong\"</span></span><br><span class=\"line\">println(name.lastChar()) <span class=\"comment\">//输出 g</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"运算符重载\"><a href=\"#运算符重载\" class=\"headerlink\" title=\"运算符重载\"></a>运算符重载</h3><p>Kotiln中的很多特性的实现都十分相似，很多时候都是通过调用自己代码中的函数来实现特定的功能。例如如果你在类中定义了一个名为plus的特殊方法，那么按照kotlin<code>约定</code>你就可以使用+运算符。Kotlin中把这种通过简单的运算符就可以调用特定方法的技术称之为<strong>约定</strong> 。</p>\n<p>例如定义两个点的相加操作：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>(<span class=\"keyword\">val</span> x:<span class=\"built_in\">Int</span>,<span class=\"keyword\">val</span> y:<span class=\"built_in\">Int</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">plus</span><span class=\"params\">(other: <span class=\"type\">Point</span>)</span></span>:Point&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Point(x + other.x, y + other.y)<span class=\"comment\">//具体相加实现可按照实际需求定义</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> p1 = Point(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> p2 = Point(<span class=\"number\">4</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">println(p1+ p2) <span class=\"comment\">//输出 Point(6,4)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Lambada编程\"><a href=\"#Lambada编程\" class=\"headerlink\" title=\"Lambada编程\"></a>Lambada编程</h3><p>Lambda 表达式，或简称 lambda，本质上就是可以传递给其他函数的一小段代码 。 有了 lambda，可以轻松地把通用的代码结构抽取成库函数， Kotlin标准库就大量地 使用了它们。最常见的一种lambda用途就是和集合一起工作。lambda在kotlin中的常用的两个函数就是 with和apply</p>\n<p><strong>with</strong> ：with 标准库函数允许你调用同 一个对象的多个方法，而不需要反复写出这个对象的引用 。例如：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> leftAmount = with(mBuyInfo)&#123;</span><br><span class=\"line\">    println(totalamount)</span><br><span class=\"line\">    leftamount<span class=\"comment\">//直接调用mBuyInfo的属性 在最后一行作为返回值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>apply</strong> : apply 函数让你使用构建者风格的 API 创建和初始化任何对象。 </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createTextView</span><span class=\"params\">(context:<span class=\"type\">Context</span>)</span></span> = TextView(context).apply&#123;</span><br><span class=\"line\">    text = <span class=\"string\">\"sample text\"</span></span><br><span class=\"line\">    textSize = <span class=\"number\">20.0f</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>Lambda 是一个构建抽象概念的强大工具，它的能力并不局限于标准库中提供的集合和其他类，我们可以创建属于自己的高阶函数。 类似于数学中的高阶函数 f(g(x))，高阶函数的概念是：以函数作为参数或者返回值的函数。</p>\n<p>在了解高阶函数之前，我们先来看看<strong>函数类型</strong>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> sum = &#123; x: <span class=\"built_in\">Int</span>,y: <span class=\"built_in\">Int</span> -&gt; x + y &#125;</span><br></pre></td></tr></table></figure>\n<p>能够清晰的看出，函数类型分为参数定义和具体的逻辑实现。在kotlin中函数也可以当作一个变量存储起来。</p>\n<p>下面让我们来看看高阶函数的定义：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">twoAndThree</span><span class=\"params\">(operation: (<span class=\"type\">Int</span>, <span class=\"built_in\">Int</span>)</span></span>-&gt; <span class=\"built_in\">Int</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = operation(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    println(<span class=\"string\">\"this result is <span class=\"variable\">$result</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用twoAndThree函数传入上面定义的sum函数</span></span><br><span class=\"line\">twoAndThree(sum)<span class=\"comment\">//this result is 5</span></span><br></pre></td></tr></table></figure>\n<p>可以看到我们将一个函数类型当作参数传入到了高阶函数中，operation方法调用的就是sum函数类型定义的操作。</p>\n<h3 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h3><p>上面讲到Kotlin从1.3开始正式发布了协程，主要的目的是让异步执行的代码，转变成看起来是顺序执行的，之前开启一个异步任务，我们肯跟会想到如下几种方式：</p>\n<blockquote>\n<ol>\n<li>开启一个线程处理</li>\n<li>利用AsyncTask</li>\n<li>利用CallBack</li>\n<li>利用RxJava</li>\n</ol>\n</blockquote>\n<p>上面的方式都是在一个线程处理比较好耗时的操作，然后还会涉及到线程的切换，只是写法上有的会更先进一些。但是通过kotlin的协程则可以使其变得更人性化，代码开起来更直观。</p>\n<p>例之前在安卓上下载文件的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadFilesTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">URL</span>, <span class=\"title\">Integer</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Long <span class=\"title\">doInBackground</span><span class=\"params\">(URL... urls)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = urls.length;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> totalSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            totalSize += Downloader.downloadFile(urls[i]);</span><br><span class=\"line\">            publishProgress((<span class=\"keyword\">int</span>) ((i / (<span class=\"keyword\">float</span>) count) * <span class=\"number\">100</span>));</span><br><span class=\"line\">            <span class=\"comment\">// Escape early if cancel() is called</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isCancelled()) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> totalSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressUpdate</span><span class=\"params\">(Integer... progress)</span> </span>&#123;</span><br><span class=\"line\">        setProgressPercent(progress[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Long result)</span> </span>&#123;</span><br><span class=\"line\">        showDialog(<span class=\"string\">\"Downloaded \"</span> + result + <span class=\"string\">\" bytes\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当回调过多，代码层级嵌套就会越来愈多，从而形成了地狱回调。但通过使用Kotlin的async/await之后呢：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> future = async&lt;String&gt; &#123;</span><br><span class=\"line\">        (<span class=\"number\">1</span>..<span class=\"number\">5</span>).map &#123;</span><br><span class=\"line\">            await(startLongAsyncOperation(it)) </span><br><span class=\"line\">        &#125;.joinToString(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(future.<span class=\"keyword\">get</span>())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码看起来是不是简洁很多，kotlin通过协程完美的解决了之前在java上会出现的地狱回调的问题。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文简要的介绍的kotlin的一些特性和用法，对于想上手的朋友来说，了解了这些已经足够进行日常的开发工作了。但是想要深入的了解背后的原理，和一些特殊的用法，推荐如下两种方式：</p>\n<p>1.可以通过阅读 <strong>《kotlin实战》</strong>这本书系统学习kotlin。<br>2.通过查阅<a href=\"https://kotlinlang.org/docs/reference/\" target=\"_blank\" rel=\"noopener\">官方文档</a>进行学习和了解最新的特性和用法。</p>\n<p>如果说这篇文章是kotlin混合开发的开胃菜，那么下篇文章则将会给大家带来kotlin混合开发中最需要注意的问题，都是我在实际开发中的一些总结，值得期待。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/kotlin_history.jpg-h\" alt=\"\"></p>","more":"<blockquote>\n<p>本文会从kotlin语言的发展引出kotlin一些特点和用法，从而对kotlin简单上手。</p>\n</blockquote>\n<h2 id=\"了解Kotlin\"><a href=\"#了解Kotlin\" class=\"headerlink\" title=\"了解Kotlin\"></a>了解Kotlin</h2><h3 id=\"Kotlin的发展\"><a href=\"#Kotlin的发展\" class=\"headerlink\" title=\"Kotlin的发展\"></a>Kotlin的发展</h3><p>如上图所示，kotlin已经经历了将近10年的发展。”Kotlin”来源于一个岛屿的名字，全称是 Kotlin Island，是英语「科特林岛」之意。这个小岛属于俄罗斯，但是开发Kotlin的公司JetBrains 是来自捷克的公司，公司总部位于捷克首都布拉格，那为什么找一个俄罗斯的小岛呢？那是因为JetBrains在俄罗斯的圣彼得堡设有分公司。Kotlin的主要开发工作正是由俄罗斯的圣彼得堡分公司的程序员团队完成的，他们想：Java语言的名字是来自于一个岛，那个岛就是印度尼西亚的爪哇（Java）岛，因盛产咖啡而闻名。Java如此伟大，所以 Kotlin 也得选一个岛作为名字，由此能看出Kotlin团队的雄心勃勃！哈哈哈…</p>\n<p>另外：2018 年10月29日发布了 kotlin 1.3，正式发布了”协程”，我们后面会进行介绍。</p>\n<h3 id=\"Kotlin的基本语法\"><a href=\"#Kotlin的基本语法\" class=\"headerlink\" title=\"Kotlin的基本语法\"></a>Kotlin的基本语法</h3><p>Kotlin在基础语法上吸取了现代语言的很多优点，去除了很多不必要的标点符号，使得代码相对java简洁很多。</p>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str1:String = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2:String = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> list = arrayListOf(<span class=\"string\">\"10\"</span>, <span class=\"string\">\"11\"</span>, <span class=\"string\">\"1001\"</span>)<span class=\"comment\">//kotlin方法自动识别类型</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">when</span>(a)&#123;</span><br><span class=\"line\">    <span class=\"number\">1</span> -&gt; println(<span class=\"string\">\"等于1\"</span>)</span><br><span class=\"line\">    <span class=\"number\">2</span> -&gt; println(<span class=\"string\">\"等于2\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ((index, element) <span class=\"keyword\">in</span> list.withIndex()) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"<span class=\"variable\">$index</span> = <span class=\"variable\">$element</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">max</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">if</span> (a &gt; b) a <span class=\"keyword\">else</span> b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span></span>(<span class=\"keyword\">val</span> title: String, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Kotlin的特点\"><a href=\"#Kotlin的特点\" class=\"headerlink\" title=\"Kotlin的特点\"></a>Kotlin的特点</h3><p><img src=\"https://img.carlwe.com/kotlin_advantage.jpg\" alt=\"\"></p>\n<h4 id=\"实用性\"><a href=\"#实用性\" class=\"headerlink\" title=\"实用性\"></a>实用性</h4><p>1.单例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo instance=<span class=\"keyword\">new</span> SingletonDemo();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDemo <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Kotlin</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> SingletonDemo</span><br></pre></td></tr></table></figure>\n<p>2.默认参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showEmpty</span><span class=\"params\">(String buttonName)</span></span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showEmpty</span><span class=\"params\">(String buttonName,String desc)</span></span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Kotlin 直接给出默认值，方法的参数，想传哪个就传哪个</span></span><br><span class=\"line\"><span class=\"comment\">//当参数较多时，kotlin推荐在调用方法时显示声明参数名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">showEmpty</span><span class=\"params\">(buttonName: <span class=\"type\">String</span> = <span class=\"string\">\"\"</span>,desc: <span class=\"type\">String</span> = <span class=\"string\">\"\"</span>)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"简洁\"><a href=\"#简洁\" class=\"headerlink\" title=\"简洁\"></a>简洁</h4><p>1.类定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTitle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">(String title)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Kotlin</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span></span>(<span class=\"keyword\">val</span> title: String, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span>)</span><br></pre></td></tr></table></figure>\n<p>2.集合操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(People person: people)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(person.getAge() &gt; <span class=\"number\">20</span>)&#123;</span><br><span class=\"line\">        println(person.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Kotlin</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> people = listOf(Person(<span class=\"string\">\"xiaohong\"</span>, <span class=\"number\">23</span>),Person(<span class=\"string\">\"xiaoming\"</span>, <span class=\"number\">15</span>))</span><br><span class=\"line\">println(peoples.filter &#123; it.age &gt; <span class=\"number\">20</span> &#125;.map &#123; it.name &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先定义三个类 方便下面使用</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span></span>(<span class=\"keyword\">val</span> city: String, <span class=\"keyword\">val</span> country: String)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Company</span></span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> address: Address?)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> company: Company?)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Kotlin</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> Person.<span class=\"title\">countryName</span><span class=\"params\">()</span></span>: String? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> company?.address?.country ?: <span class=\"string\">\"Unknow\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> person = Person(<span class=\"string\">\"xiaohua\"</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">    println(person.countryName())</span><br><span class=\"line\"> \tprintln(person.let&#123;it.company&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getCountryName</span><span class=\"params\">(Person person)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(person!=<span class=\"keyword\">null</span> &amp;&amp; person.company!=<span class=\"keyword\">null</span> </span><br><span class=\"line\">       &amp;&amp; person.company.address!=<span class=\"keyword\">null</span> </span><br><span class=\"line\">       &amp;&amp; person.company.address.country!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person.company.address.country;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Unknow\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Person person = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"xiaohua\"</span>,<span class=\"keyword\">null</span>)</span><br><span class=\"line\">    System.out.println(getCountryName(person))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Kotlin推出了很多关键字来解决空安全，例如：<code>?.</code> <code>?:</code>  等，同时在编译时会对调用进行空检查，非常好的将空指针异常扼杀在了编译期。</p>\n</blockquote>\n<h2 id=\"Kotlin用法分享\"><a href=\"#Kotlin用法分享\" class=\"headerlink\" title=\"Kotlin用法分享\"></a>Kotlin用法分享</h2><h3 id=\"扩展函数\"><a href=\"#扩展函数\" class=\"headerlink\" title=\"扩展函数\"></a>扩展函数</h3><p>当我们使用第三方框架时(例如Java），发现其现有的代码方法不能满足我们的需求，这个时候我们要么自己去继承这个类，重写方法，要么直接使用源码在里面去修改，但是这两种方法代价都比较大。那有没有什么好的方法呢，正好Kotlin的出现给我们带来了一个神奇的函数——扩展函数：</p>\n<p>Kotlin 可以直接对一个类的属性和方法进行扩展，且不需要继承，扩展是一种静态行为，对被扩展的类代码本身不会造成任何影响，只是定义在类的外面，而且扩展后在任意地方都可以直接调用该方法。</p>\n<p>例如给String类添加一个方法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> String.<span class=\"title\">lastChar</span><span class=\"params\">()</span></span>:<span class=\"built_in\">Char</span> = <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> name = <span class=\"string\">\"xiaohong\"</span></span><br><span class=\"line\">println(name.lastChar()) <span class=\"comment\">//输出 g</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"运算符重载\"><a href=\"#运算符重载\" class=\"headerlink\" title=\"运算符重载\"></a>运算符重载</h3><p>Kotiln中的很多特性的实现都十分相似，很多时候都是通过调用自己代码中的函数来实现特定的功能。例如如果你在类中定义了一个名为plus的特殊方法，那么按照kotlin<code>约定</code>你就可以使用+运算符。Kotlin中把这种通过简单的运算符就可以调用特定方法的技术称之为<strong>约定</strong> 。</p>\n<p>例如定义两个点的相加操作：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>(<span class=\"keyword\">val</span> x:<span class=\"built_in\">Int</span>,<span class=\"keyword\">val</span> y:<span class=\"built_in\">Int</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">plus</span><span class=\"params\">(other: <span class=\"type\">Point</span>)</span></span>:Point&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Point(x + other.x, y + other.y)<span class=\"comment\">//具体相加实现可按照实际需求定义</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> p1 = Point(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> p2 = Point(<span class=\"number\">4</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">println(p1+ p2) <span class=\"comment\">//输出 Point(6,4)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Lambada编程\"><a href=\"#Lambada编程\" class=\"headerlink\" title=\"Lambada编程\"></a>Lambada编程</h3><p>Lambda 表达式，或简称 lambda，本质上就是可以传递给其他函数的一小段代码 。 有了 lambda，可以轻松地把通用的代码结构抽取成库函数， Kotlin标准库就大量地 使用了它们。最常见的一种lambda用途就是和集合一起工作。lambda在kotlin中的常用的两个函数就是 with和apply</p>\n<p><strong>with</strong> ：with 标准库函数允许你调用同 一个对象的多个方法，而不需要反复写出这个对象的引用 。例如：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> leftAmount = with(mBuyInfo)&#123;</span><br><span class=\"line\">    println(totalamount)</span><br><span class=\"line\">    leftamount<span class=\"comment\">//直接调用mBuyInfo的属性 在最后一行作为返回值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>apply</strong> : apply 函数让你使用构建者风格的 API 创建和初始化任何对象。 </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createTextView</span><span class=\"params\">(context:<span class=\"type\">Context</span>)</span></span> = TextView(context).apply&#123;</span><br><span class=\"line\">    text = <span class=\"string\">\"sample text\"</span></span><br><span class=\"line\">    textSize = <span class=\"number\">20.0f</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>Lambda 是一个构建抽象概念的强大工具，它的能力并不局限于标准库中提供的集合和其他类，我们可以创建属于自己的高阶函数。 类似于数学中的高阶函数 f(g(x))，高阶函数的概念是：以函数作为参数或者返回值的函数。</p>\n<p>在了解高阶函数之前，我们先来看看<strong>函数类型</strong>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> sum = &#123; x: <span class=\"built_in\">Int</span>,y: <span class=\"built_in\">Int</span> -&gt; x + y &#125;</span><br></pre></td></tr></table></figure>\n<p>能够清晰的看出，函数类型分为参数定义和具体的逻辑实现。在kotlin中函数也可以当作一个变量存储起来。</p>\n<p>下面让我们来看看高阶函数的定义：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">twoAndThree</span><span class=\"params\">(operation: (<span class=\"type\">Int</span>, <span class=\"built_in\">Int</span>)</span></span>-&gt; <span class=\"built_in\">Int</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = operation(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    println(<span class=\"string\">\"this result is <span class=\"variable\">$result</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用twoAndThree函数传入上面定义的sum函数</span></span><br><span class=\"line\">twoAndThree(sum)<span class=\"comment\">//this result is 5</span></span><br></pre></td></tr></table></figure>\n<p>可以看到我们将一个函数类型当作参数传入到了高阶函数中，operation方法调用的就是sum函数类型定义的操作。</p>\n<h3 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h3><p>上面讲到Kotlin从1.3开始正式发布了协程，主要的目的是让异步执行的代码，转变成看起来是顺序执行的，之前开启一个异步任务，我们肯跟会想到如下几种方式：</p>\n<blockquote>\n<ol>\n<li>开启一个线程处理</li>\n<li>利用AsyncTask</li>\n<li>利用CallBack</li>\n<li>利用RxJava</li>\n</ol>\n</blockquote>\n<p>上面的方式都是在一个线程处理比较好耗时的操作，然后还会涉及到线程的切换，只是写法上有的会更先进一些。但是通过kotlin的协程则可以使其变得更人性化，代码开起来更直观。</p>\n<p>例之前在安卓上下载文件的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadFilesTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">URL</span>, <span class=\"title\">Integer</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Long <span class=\"title\">doInBackground</span><span class=\"params\">(URL... urls)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = urls.length;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> totalSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            totalSize += Downloader.downloadFile(urls[i]);</span><br><span class=\"line\">            publishProgress((<span class=\"keyword\">int</span>) ((i / (<span class=\"keyword\">float</span>) count) * <span class=\"number\">100</span>));</span><br><span class=\"line\">            <span class=\"comment\">// Escape early if cancel() is called</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isCancelled()) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> totalSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressUpdate</span><span class=\"params\">(Integer... progress)</span> </span>&#123;</span><br><span class=\"line\">        setProgressPercent(progress[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Long result)</span> </span>&#123;</span><br><span class=\"line\">        showDialog(<span class=\"string\">\"Downloaded \"</span> + result + <span class=\"string\">\" bytes\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当回调过多，代码层级嵌套就会越来愈多，从而形成了地狱回调。但通过使用Kotlin的async/await之后呢：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> future = async&lt;String&gt; &#123;</span><br><span class=\"line\">        (<span class=\"number\">1</span>..<span class=\"number\">5</span>).map &#123;</span><br><span class=\"line\">            await(startLongAsyncOperation(it)) </span><br><span class=\"line\">        &#125;.joinToString(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(future.<span class=\"keyword\">get</span>())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码看起来是不是简洁很多，kotlin通过协程完美的解决了之前在java上会出现的地狱回调的问题。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文简要的介绍的kotlin的一些特性和用法，对于想上手的朋友来说，了解了这些已经足够进行日常的开发工作了。但是想要深入的了解背后的原理，和一些特殊的用法，推荐如下两种方式：</p>\n<p>1.可以通过阅读 <strong>《kotlin实战》</strong>这本书系统学习kotlin。<br>2.通过查阅<a href=\"https://kotlinlang.org/docs/reference/\" target=\"_blank\" rel=\"noopener\">官方文档</a>进行学习和了解最新的特性和用法。</p>\n<p>如果说这篇文章是kotlin混合开发的开胃菜，那么下篇文章则将会给大家带来kotlin混合开发中最需要注意的问题，都是我在实际开发中的一些总结，值得期待。</p>"},{"title":"RSA加密(一) 密码学基础","date":"2019-08-17T02:14:48.000Z","_content":"\n![](https://img.carlwe.com/rsa_logo1.png-h)\n\n<!--more-->\n\n加密在生活中其实无处不在，我们先来看几个例子：\n\n* 输入用户名和密码登陆手机中的App。\n* 菜市场买菜时输入微信、支付宝的支付密码进行结账。\n* 网上银行转账、银行卡取现金时输入密码的操作。\n\n为了安全考虑上面这些操作都会涉及到加密，可想而知加密在现实生活中的重要性。从这篇文章开始我们来讲解下密码学中最重要的一种加密方式：RSA加密。在讲RSA加密之前，我们先来看看密码学，讲讲密码的发展历史以及当下一些常见的加密算法，对密码学及一些常见的加密算法有一个初步的认识。\n\n### 密码学的发展历史\n\n![](https://img.carlwe.com/rsa_encrypt_history.jpg)\n\n从上图可以看出，密码学的发展主要分为三个阶段：古典密码学、近代密码学和现代密码学，下面我们来逐一介绍。\n\n#### 1.古典密码学\n\n1949年之前的密码学统称为古典密码学，古典密码学主要有三个特征，分别是：**隐藏法**、**移位法**和**替代法**。\n\n在我国古代隐藏法的藏头诗、藏尾诗、漏格诗及绘画等形式中有大量的运用。例如在《水浒传》中为了拉卢俊义入伙儿，智多星吴用和松江便想出一段《吴用智赚玉麒麟》的故事来，利用卢俊义正为躲避血光之灾的惶恐心理，口占四句卦歌：\n\n<center>芦花丛中一扁舟，<br>俊杰俄从此地游。<br>义士若能知此理，<br>反躬难逃可无忧。 </center>\n暗藏**卢俊义反**四字，后广为传播。结果成了官府治罪的证据，终于把卢俊义“逼”上了梁山。另外表达爱意的感情诗也颇多，例如唐伯虎写给秋香的诗：\n\n<center>我画蓝江水悠悠，<br>爱晚亭上枫叶愁。<br>秋月溶溶照佛寺，<br>香烟袅袅绕经楼。 </center>\n另外古人发明遇水才显现的墨，并利用人们不敢往名画上泼水的心理，隐藏一些信息。在电视剧《少年包青天Ⅱ》中包拯给无价之宝的名画泼了一盆水，揭开了牡丹亭少女之谜。\n\n![](https://img.carlwe.com/rsa_mudantingshaonv.jpg)\n\n在同时期的西方，人们最开始使用棋盘密码、滚筒密码和换位密码进行加密，达到混淆原文的目的。其中有名的**凯撒密码**（ 把一个字母替换为它后面固定位置的另一个字母）成为单表置换的经典，但是人们可以通过单表简单频率分析方法不断尝试从而将其破解。\n\n![](https://img.carlwe.com/rsa_caesar.jpg-s)\n\n<center>凯撒密码(key=3)</center>\n为了提升破解的困难程度，人们开始发明多表置换密码。即一个明文字母可以表示为多个密文字母，**[维吉尼亚密码](<https://www.cnblogs.com/inverseEntropy/p/10151176.html>)**随之出现，其使用一系列凯撒密码组成密码字母表的加密算法，故使得单表简单频率分析方法失效，维吉尼亚密码在法语写作：le chiffre indéchiffrable。意思是：不可破译的密码。自此密码破解的难度大大提升，维吉尼亚密码也成为了古典密码的里程碑。\n\n另外在近代密码出现之前，为了传递大量信息，一些加密算法加密过程过于耗时，尤其在战争中。时效性尤为重要，这时俚语加密便流行起来。太平洋战役中，美军招募了一批纳瓦霍族人作为通讯兵，由于其语言只有发音没有文字，且该语言未被研究过，所以即使敌人获取到，没有纳瓦霍族自己人的帮助也很难解密。美军在此基础上加上一些其他的加密处理来传递军事信息，效果出奇的好，最终顺利的帮助美国海军陆战队攻克了硫磺岛。故事具体情节可以移步这里👉[钠瓦霍密码](<https://baike.baidu.com/item/%E7%BA%B3%E7%93%A6%E9%9C%8D%E5%AF%86%E7%A0%81/9482868?fr=aladdin>)\n\n​\t![](https://img.carlwe.com/ras_nawahuo.jpg)\n\n<center>纳瓦霍通讯兵(左)&nbsp &nbsp 加密字典(右)</center>\n总的来说，古典密码学的思想主要通过隐藏、移位和替换来实现，而这一时期的密码学的体现形式则更像是一门艺术。\n\n#### 2.近代密码学\n\n时间来到了1949年，在这一年美国数学家、信息论创始人[香农](<https://baike.baidu.com/item/%E5%85%8B%E5%8A%B3%E5%BE%B7%C2%B7%E8%89%BE%E5%B0%94%E4%BC%8D%E5%BE%B7%C2%B7%E9%A6%99%E5%86%9C/10588593?fromtitle=%E9%A6%99%E5%86%9C&fromid=1146248&fr=aladdin>)发表了一篇名叫《保密系统的信息理论》的论文。该文提出了**混淆**和**扩散**两大设计原则。为**对称密码学**建立了理论基础，自此密码学成为了一门科学，其代表性加密算法为DES和AES。其原理简单来说就是在加密前先分组，分组的过程中充分利用混淆和扩散，这样可以有效的抵抗对手根据密文的统计特性推测明文或密钥。\n\n#### 3.现代密码学\n\n在不久后的1976年，迪菲－赫尔曼发表了论文《密码学的新方向》，论文中提出了“迪菲－赫尔曼密钥交换算法”该算法奠定了现代密码学的基础，因此也获得了2015年的图灵奖。其核心为单向陷门函数， 特点是：易计算，但难求逆难。人们通过这个思想设计出了**非对称加密**算法。简单来说就是通过两个相关联的密钥，将加密与解密操作分开，从而可以在不直接传递密钥的情况下完成解密。而“易计算，求逆难”正好可以利用数学界的三大难题：\n\n> 1.质因数分解\n>\n> 2.离散对数问题\n>\n> 3.椭圆曲线类\n\n其中最经典的公钥加密算法就是1978年由Rivest，Shamir和Adleman用数论方法构造的RSA算法（核心难题为质因数分解）是迄今为止理论上最成熟最完善的公钥密码体制，并已得到广泛应用，也是本系列文章所要着重介绍的加密算法。\n\n纵观密码学发展的三个阶段。从最原始基于隐藏、移位、替换法所形成的各种加密艺术，发展到后来以混淆和扩散为原则的加密科学，再到以通用数学难题为核心的现代非对称加密，可见密码学在发展的过程中，加密和破解始终在进行着激烈的博弈，进而催生着更安全的加密形式诞生。\n\n上面简单的介绍了密码学的发展历史，其中有两个概念我们来着重看下，那就是对称加密和非对称加密。\n\n### 对称加密与非对称加密\n\n* **对称加密**\n\n1976年以前，所有的加密方法都是同一种模式:\n\n> 1. 发送方选择某一种加密规则，对信息进行加密；\n> 2. 接受方使用同一种规则，对信息进行解密。\n\n![](https://img.carlwe.com/rsa_unsymmetric.jpg)\n\n缺点：如上图所示甲方必须把加密规则告诉乙方，否则无法解密。保存和传递密钥，就成了最头疼的问题。\n\n* **非对称加密**\n\n加密和解密过程：\n\n> 1. 接收方先创建两把钥匙：公钥和私钥，并将公钥传递给发送方；\n> 2. 发送发拿到公钥后对信息进行加密，并将加密后的信息发送给接收方；\n> 3. 接收方收到信息后用之前自己生成的私钥进行解密，得到原信息。\n\n![](https://img.carlwe.com/rsa_symmetric.jpg)\n\n<center>②代表上述加解密过程的第2、3步</center>\n从上图可以看出，可能被截获的就是在传输途中的公钥和加密后的信息。如果被公钥加密后的信息只有私钥才解得开，那么只要私钥不泄漏，通信就是安全的。\n\n非对称加密巧妙的通过两把钥匙，规避了密钥在传输过程中被泄漏的问题。自1976年后，非对称加密开始盛行，下面我们来看看如今在互联网中经常用到的一些加密算法。\n\n### 常见加密算法\n\n* **散列算法**\n\n![](https://img.carlwe.com/rsa_compare_sanlie.jpg)\n\n首先我们来看下散列算法，其中用到比较多的是MD5和SHA-1，MD5的生成用到了哈希函数，它的典型应用是对一段信息产生信息摘要，以防止被篡改，因而可以用来检查文件完整性和生成数字签名，从上表可以看出，MD5没有SHA-1的安全性高，但加密速度更快。\n\n另外MD5、SHA-1算法生成的结果一般而言是不可逆的（可通过碰撞法破解），严格来说MD5 不是一种加密算法而是摘要算法。\n\n* **对称加密**\n\n![](https://img.carlwe.com/rsa_compare_symmetric.jpg)\n\n通过上面我们知道对称加密是近代密码学的产物，但DES、AES加密算法依旧被广泛的使用着。3DES是基于 DES 的对称算法，即对一块数据用三个不同的密钥进行三次加密，强度更高，但必然会导致更高的资源消耗。\n\nAES 算法更易于各种硬件和软件实现，这种加密算法是美国联邦政府采用的区块加密标准。AES 的出现就是为了取代DES，AES 具有更好的安全性、效率和灵活性。相对于非对称加密，对称加密的速度要快上几百倍甚至上千倍，这对大文件进行加密非常友好，所以这就是为什么非对称加密如今依旧能够被广泛应用的原因。\n\n* **非对称加密**\n\n![](https://img.carlwe.com/rsa_compare_unsymmetric.jpg)\n\n最后就是非对称加密了算法了，除了我们所知道的RSA加密算法，还有一种叫做**[ECC加密算法](<https://www.jianshu.com/p/e41bc1eb1d81>)**，其显著特征是密钥长度低，故相同长度的密钥安全性比RSA更高，其在比特币中有大量运用，原理是通过上述提到的三大数学难题中的椭圆曲线问题，非对称加密算法相对于对称加密算法来说，安全性更高。拿RSA算法来说，一般认为密钥长度达到1024位基本安全，2048位的密钥极其安全。\n\n### 总结\n\n不管是哪个时代，密码学在发展过程中，总是伴随着破解与反破解，而这个过程中，加密也变得越来越安全。我们可以看到加密从一种艺术演变成一门科学，从对称加密发展到非对称加密，那下一个加密时代又是如何呢？\n\n关于加密的故事其实还有很多,欢迎在留言区说出你记忆中古今中外的加密故事。下一篇我们将介绍RSA加密相关的知识，尽请期待！","source":"_posts/RSA加密(一) 密码学基础.md","raw":"---\ntitle: RSA加密(一) 密码学基础\ndate: 2019-08-17 10:14:48\ntags: 技术\n---\n\n![](https://img.carlwe.com/rsa_logo1.png-h)\n\n<!--more-->\n\n加密在生活中其实无处不在，我们先来看几个例子：\n\n* 输入用户名和密码登陆手机中的App。\n* 菜市场买菜时输入微信、支付宝的支付密码进行结账。\n* 网上银行转账、银行卡取现金时输入密码的操作。\n\n为了安全考虑上面这些操作都会涉及到加密，可想而知加密在现实生活中的重要性。从这篇文章开始我们来讲解下密码学中最重要的一种加密方式：RSA加密。在讲RSA加密之前，我们先来看看密码学，讲讲密码的发展历史以及当下一些常见的加密算法，对密码学及一些常见的加密算法有一个初步的认识。\n\n### 密码学的发展历史\n\n![](https://img.carlwe.com/rsa_encrypt_history.jpg)\n\n从上图可以看出，密码学的发展主要分为三个阶段：古典密码学、近代密码学和现代密码学，下面我们来逐一介绍。\n\n#### 1.古典密码学\n\n1949年之前的密码学统称为古典密码学，古典密码学主要有三个特征，分别是：**隐藏法**、**移位法**和**替代法**。\n\n在我国古代隐藏法的藏头诗、藏尾诗、漏格诗及绘画等形式中有大量的运用。例如在《水浒传》中为了拉卢俊义入伙儿，智多星吴用和松江便想出一段《吴用智赚玉麒麟》的故事来，利用卢俊义正为躲避血光之灾的惶恐心理，口占四句卦歌：\n\n<center>芦花丛中一扁舟，<br>俊杰俄从此地游。<br>义士若能知此理，<br>反躬难逃可无忧。 </center>\n暗藏**卢俊义反**四字，后广为传播。结果成了官府治罪的证据，终于把卢俊义“逼”上了梁山。另外表达爱意的感情诗也颇多，例如唐伯虎写给秋香的诗：\n\n<center>我画蓝江水悠悠，<br>爱晚亭上枫叶愁。<br>秋月溶溶照佛寺，<br>香烟袅袅绕经楼。 </center>\n另外古人发明遇水才显现的墨，并利用人们不敢往名画上泼水的心理，隐藏一些信息。在电视剧《少年包青天Ⅱ》中包拯给无价之宝的名画泼了一盆水，揭开了牡丹亭少女之谜。\n\n![](https://img.carlwe.com/rsa_mudantingshaonv.jpg)\n\n在同时期的西方，人们最开始使用棋盘密码、滚筒密码和换位密码进行加密，达到混淆原文的目的。其中有名的**凯撒密码**（ 把一个字母替换为它后面固定位置的另一个字母）成为单表置换的经典，但是人们可以通过单表简单频率分析方法不断尝试从而将其破解。\n\n![](https://img.carlwe.com/rsa_caesar.jpg-s)\n\n<center>凯撒密码(key=3)</center>\n为了提升破解的困难程度，人们开始发明多表置换密码。即一个明文字母可以表示为多个密文字母，**[维吉尼亚密码](<https://www.cnblogs.com/inverseEntropy/p/10151176.html>)**随之出现，其使用一系列凯撒密码组成密码字母表的加密算法，故使得单表简单频率分析方法失效，维吉尼亚密码在法语写作：le chiffre indéchiffrable。意思是：不可破译的密码。自此密码破解的难度大大提升，维吉尼亚密码也成为了古典密码的里程碑。\n\n另外在近代密码出现之前，为了传递大量信息，一些加密算法加密过程过于耗时，尤其在战争中。时效性尤为重要，这时俚语加密便流行起来。太平洋战役中，美军招募了一批纳瓦霍族人作为通讯兵，由于其语言只有发音没有文字，且该语言未被研究过，所以即使敌人获取到，没有纳瓦霍族自己人的帮助也很难解密。美军在此基础上加上一些其他的加密处理来传递军事信息，效果出奇的好，最终顺利的帮助美国海军陆战队攻克了硫磺岛。故事具体情节可以移步这里👉[钠瓦霍密码](<https://baike.baidu.com/item/%E7%BA%B3%E7%93%A6%E9%9C%8D%E5%AF%86%E7%A0%81/9482868?fr=aladdin>)\n\n​\t![](https://img.carlwe.com/ras_nawahuo.jpg)\n\n<center>纳瓦霍通讯兵(左)&nbsp &nbsp 加密字典(右)</center>\n总的来说，古典密码学的思想主要通过隐藏、移位和替换来实现，而这一时期的密码学的体现形式则更像是一门艺术。\n\n#### 2.近代密码学\n\n时间来到了1949年，在这一年美国数学家、信息论创始人[香农](<https://baike.baidu.com/item/%E5%85%8B%E5%8A%B3%E5%BE%B7%C2%B7%E8%89%BE%E5%B0%94%E4%BC%8D%E5%BE%B7%C2%B7%E9%A6%99%E5%86%9C/10588593?fromtitle=%E9%A6%99%E5%86%9C&fromid=1146248&fr=aladdin>)发表了一篇名叫《保密系统的信息理论》的论文。该文提出了**混淆**和**扩散**两大设计原则。为**对称密码学**建立了理论基础，自此密码学成为了一门科学，其代表性加密算法为DES和AES。其原理简单来说就是在加密前先分组，分组的过程中充分利用混淆和扩散，这样可以有效的抵抗对手根据密文的统计特性推测明文或密钥。\n\n#### 3.现代密码学\n\n在不久后的1976年，迪菲－赫尔曼发表了论文《密码学的新方向》，论文中提出了“迪菲－赫尔曼密钥交换算法”该算法奠定了现代密码学的基础，因此也获得了2015年的图灵奖。其核心为单向陷门函数， 特点是：易计算，但难求逆难。人们通过这个思想设计出了**非对称加密**算法。简单来说就是通过两个相关联的密钥，将加密与解密操作分开，从而可以在不直接传递密钥的情况下完成解密。而“易计算，求逆难”正好可以利用数学界的三大难题：\n\n> 1.质因数分解\n>\n> 2.离散对数问题\n>\n> 3.椭圆曲线类\n\n其中最经典的公钥加密算法就是1978年由Rivest，Shamir和Adleman用数论方法构造的RSA算法（核心难题为质因数分解）是迄今为止理论上最成熟最完善的公钥密码体制，并已得到广泛应用，也是本系列文章所要着重介绍的加密算法。\n\n纵观密码学发展的三个阶段。从最原始基于隐藏、移位、替换法所形成的各种加密艺术，发展到后来以混淆和扩散为原则的加密科学，再到以通用数学难题为核心的现代非对称加密，可见密码学在发展的过程中，加密和破解始终在进行着激烈的博弈，进而催生着更安全的加密形式诞生。\n\n上面简单的介绍了密码学的发展历史，其中有两个概念我们来着重看下，那就是对称加密和非对称加密。\n\n### 对称加密与非对称加密\n\n* **对称加密**\n\n1976年以前，所有的加密方法都是同一种模式:\n\n> 1. 发送方选择某一种加密规则，对信息进行加密；\n> 2. 接受方使用同一种规则，对信息进行解密。\n\n![](https://img.carlwe.com/rsa_unsymmetric.jpg)\n\n缺点：如上图所示甲方必须把加密规则告诉乙方，否则无法解密。保存和传递密钥，就成了最头疼的问题。\n\n* **非对称加密**\n\n加密和解密过程：\n\n> 1. 接收方先创建两把钥匙：公钥和私钥，并将公钥传递给发送方；\n> 2. 发送发拿到公钥后对信息进行加密，并将加密后的信息发送给接收方；\n> 3. 接收方收到信息后用之前自己生成的私钥进行解密，得到原信息。\n\n![](https://img.carlwe.com/rsa_symmetric.jpg)\n\n<center>②代表上述加解密过程的第2、3步</center>\n从上图可以看出，可能被截获的就是在传输途中的公钥和加密后的信息。如果被公钥加密后的信息只有私钥才解得开，那么只要私钥不泄漏，通信就是安全的。\n\n非对称加密巧妙的通过两把钥匙，规避了密钥在传输过程中被泄漏的问题。自1976年后，非对称加密开始盛行，下面我们来看看如今在互联网中经常用到的一些加密算法。\n\n### 常见加密算法\n\n* **散列算法**\n\n![](https://img.carlwe.com/rsa_compare_sanlie.jpg)\n\n首先我们来看下散列算法，其中用到比较多的是MD5和SHA-1，MD5的生成用到了哈希函数，它的典型应用是对一段信息产生信息摘要，以防止被篡改，因而可以用来检查文件完整性和生成数字签名，从上表可以看出，MD5没有SHA-1的安全性高，但加密速度更快。\n\n另外MD5、SHA-1算法生成的结果一般而言是不可逆的（可通过碰撞法破解），严格来说MD5 不是一种加密算法而是摘要算法。\n\n* **对称加密**\n\n![](https://img.carlwe.com/rsa_compare_symmetric.jpg)\n\n通过上面我们知道对称加密是近代密码学的产物，但DES、AES加密算法依旧被广泛的使用着。3DES是基于 DES 的对称算法，即对一块数据用三个不同的密钥进行三次加密，强度更高，但必然会导致更高的资源消耗。\n\nAES 算法更易于各种硬件和软件实现，这种加密算法是美国联邦政府采用的区块加密标准。AES 的出现就是为了取代DES，AES 具有更好的安全性、效率和灵活性。相对于非对称加密，对称加密的速度要快上几百倍甚至上千倍，这对大文件进行加密非常友好，所以这就是为什么非对称加密如今依旧能够被广泛应用的原因。\n\n* **非对称加密**\n\n![](https://img.carlwe.com/rsa_compare_unsymmetric.jpg)\n\n最后就是非对称加密了算法了，除了我们所知道的RSA加密算法，还有一种叫做**[ECC加密算法](<https://www.jianshu.com/p/e41bc1eb1d81>)**，其显著特征是密钥长度低，故相同长度的密钥安全性比RSA更高，其在比特币中有大量运用，原理是通过上述提到的三大数学难题中的椭圆曲线问题，非对称加密算法相对于对称加密算法来说，安全性更高。拿RSA算法来说，一般认为密钥长度达到1024位基本安全，2048位的密钥极其安全。\n\n### 总结\n\n不管是哪个时代，密码学在发展过程中，总是伴随着破解与反破解，而这个过程中，加密也变得越来越安全。我们可以看到加密从一种艺术演变成一门科学，从对称加密发展到非对称加密，那下一个加密时代又是如何呢？\n\n关于加密的故事其实还有很多,欢迎在留言区说出你记忆中古今中外的加密故事。下一篇我们将介绍RSA加密相关的知识，尽请期待！","slug":"RSA加密(一) 密码学基础","published":1,"updated":"2020-08-18T02:25:58.809Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnp0000bt57s74mkxtqd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/rsa_logo1.png-h\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>加密在生活中其实无处不在，我们先来看几个例子：</p>\n<ul>\n<li>输入用户名和密码登陆手机中的App。</li>\n<li>菜市场买菜时输入微信、支付宝的支付密码进行结账。</li>\n<li>网上银行转账、银行卡取现金时输入密码的操作。</li>\n</ul>\n<p>为了安全考虑上面这些操作都会涉及到加密，可想而知加密在现实生活中的重要性。从这篇文章开始我们来讲解下密码学中最重要的一种加密方式：RSA加密。在讲RSA加密之前，我们先来看看密码学，讲讲密码的发展历史以及当下一些常见的加密算法，对密码学及一些常见的加密算法有一个初步的认识。</p>\n<h3 id=\"密码学的发展历史\"><a href=\"#密码学的发展历史\" class=\"headerlink\" title=\"密码学的发展历史\"></a>密码学的发展历史</h3><p><img src=\"https://img.carlwe.com/rsa_encrypt_history.jpg\" alt=\"\"></p>\n<p>从上图可以看出，密码学的发展主要分为三个阶段：古典密码学、近代密码学和现代密码学，下面我们来逐一介绍。</p>\n<h4 id=\"1-古典密码学\"><a href=\"#1-古典密码学\" class=\"headerlink\" title=\"1.古典密码学\"></a>1.古典密码学</h4><p>1949年之前的密码学统称为古典密码学，古典密码学主要有三个特征，分别是：<strong>隐藏法</strong>、<strong>移位法</strong>和<strong>替代法</strong>。</p>\n<p>在我国古代隐藏法的藏头诗、藏尾诗、漏格诗及绘画等形式中有大量的运用。例如在《水浒传》中为了拉卢俊义入伙儿，智多星吴用和松江便想出一段《吴用智赚玉麒麟》的故事来，利用卢俊义正为躲避血光之灾的惶恐心理，口占四句卦歌：</p>\n<p><center>芦花丛中一扁舟，<br>俊杰俄从此地游。<br>义士若能知此理，<br>反躬难逃可无忧。 </center><br>暗藏<strong>卢俊义反</strong>四字，后广为传播。结果成了官府治罪的证据，终于把卢俊义“逼”上了梁山。另外表达爱意的感情诗也颇多，例如唐伯虎写给秋香的诗：</p>\n<p><center>我画蓝江水悠悠，<br>爱晚亭上枫叶愁。<br>秋月溶溶照佛寺，<br>香烟袅袅绕经楼。 </center><br>另外古人发明遇水才显现的墨，并利用人们不敢往名画上泼水的心理，隐藏一些信息。在电视剧《少年包青天Ⅱ》中包拯给无价之宝的名画泼了一盆水，揭开了牡丹亭少女之谜。</p>\n<p><img src=\"https://img.carlwe.com/rsa_mudantingshaonv.jpg\" alt=\"\"></p>\n<p>在同时期的西方，人们最开始使用棋盘密码、滚筒密码和换位密码进行加密，达到混淆原文的目的。其中有名的<strong>凯撒密码</strong>（ 把一个字母替换为它后面固定位置的另一个字母）成为单表置换的经典，但是人们可以通过单表简单频率分析方法不断尝试从而将其破解。</p>\n<p><img src=\"https://img.carlwe.com/rsa_caesar.jpg-s\" alt=\"\"></p>\n<p><center>凯撒密码(key=3)</center><br>为了提升破解的困难程度，人们开始发明多表置换密码。即一个明文字母可以表示为多个密文字母，<strong><a href=\"https://www.cnblogs.com/inverseEntropy/p/10151176.html\" target=\"_blank\" rel=\"noopener\">维吉尼亚密码</a></strong>随之出现，其使用一系列凯撒密码组成密码字母表的加密算法，故使得单表简单频率分析方法失效，维吉尼亚密码在法语写作：le chiffre indéchiffrable。意思是：不可破译的密码。自此密码破解的难度大大提升，维吉尼亚密码也成为了古典密码的里程碑。</p>\n<p>另外在近代密码出现之前，为了传递大量信息，一些加密算法加密过程过于耗时，尤其在战争中。时效性尤为重要，这时俚语加密便流行起来。太平洋战役中，美军招募了一批纳瓦霍族人作为通讯兵，由于其语言只有发音没有文字，且该语言未被研究过，所以即使敌人获取到，没有纳瓦霍族自己人的帮助也很难解密。美军在此基础上加上一些其他的加密处理来传递军事信息，效果出奇的好，最终顺利的帮助美国海军陆战队攻克了硫磺岛。故事具体情节可以移步这里👉<a href=\"https://baike.baidu.com/item/%E7%BA%B3%E7%93%A6%E9%9C%8D%E5%AF%86%E7%A0%81/9482868?fr=aladdin\" target=\"_blank\" rel=\"noopener\">钠瓦霍密码</a></p>\n<p>​    <img src=\"https://img.carlwe.com/ras_nawahuo.jpg\" alt=\"\"></p>\n<p><center>纳瓦霍通讯兵(左)&nbsp &nbsp 加密字典(右)</center><br>总的来说，古典密码学的思想主要通过隐藏、移位和替换来实现，而这一时期的密码学的体现形式则更像是一门艺术。</p>\n<h4 id=\"2-近代密码学\"><a href=\"#2-近代密码学\" class=\"headerlink\" title=\"2.近代密码学\"></a>2.近代密码学</h4><p>时间来到了1949年，在这一年美国数学家、信息论创始人<a href=\"https://baike.baidu.com/item/%E5%85%8B%E5%8A%B3%E5%BE%B7%C2%B7%E8%89%BE%E5%B0%94%E4%BC%8D%E5%BE%B7%C2%B7%E9%A6%99%E5%86%9C/10588593?fromtitle=%E9%A6%99%E5%86%9C&amp;fromid=1146248&amp;fr=aladdin\" target=\"_blank\" rel=\"noopener\">香农</a>发表了一篇名叫《保密系统的信息理论》的论文。该文提出了<strong>混淆</strong>和<strong>扩散</strong>两大设计原则。为<strong>对称密码学</strong>建立了理论基础，自此密码学成为了一门科学，其代表性加密算法为DES和AES。其原理简单来说就是在加密前先分组，分组的过程中充分利用混淆和扩散，这样可以有效的抵抗对手根据密文的统计特性推测明文或密钥。</p>\n<h4 id=\"3-现代密码学\"><a href=\"#3-现代密码学\" class=\"headerlink\" title=\"3.现代密码学\"></a>3.现代密码学</h4><p>在不久后的1976年，迪菲－赫尔曼发表了论文《密码学的新方向》，论文中提出了“迪菲－赫尔曼密钥交换算法”该算法奠定了现代密码学的基础，因此也获得了2015年的图灵奖。其核心为单向陷门函数， 特点是：易计算，但难求逆难。人们通过这个思想设计出了<strong>非对称加密</strong>算法。简单来说就是通过两个相关联的密钥，将加密与解密操作分开，从而可以在不直接传递密钥的情况下完成解密。而“易计算，求逆难”正好可以利用数学界的三大难题：</p>\n<blockquote>\n<p>1.质因数分解</p>\n<p>2.离散对数问题</p>\n<p>3.椭圆曲线类</p>\n</blockquote>\n<p>其中最经典的公钥加密算法就是1978年由Rivest，Shamir和Adleman用数论方法构造的RSA算法（核心难题为质因数分解）是迄今为止理论上最成熟最完善的公钥密码体制，并已得到广泛应用，也是本系列文章所要着重介绍的加密算法。</p>\n<p>纵观密码学发展的三个阶段。从最原始基于隐藏、移位、替换法所形成的各种加密艺术，发展到后来以混淆和扩散为原则的加密科学，再到以通用数学难题为核心的现代非对称加密，可见密码学在发展的过程中，加密和破解始终在进行着激烈的博弈，进而催生着更安全的加密形式诞生。</p>\n<p>上面简单的介绍了密码学的发展历史，其中有两个概念我们来着重看下，那就是对称加密和非对称加密。</p>\n<h3 id=\"对称加密与非对称加密\"><a href=\"#对称加密与非对称加密\" class=\"headerlink\" title=\"对称加密与非对称加密\"></a>对称加密与非对称加密</h3><ul>\n<li><strong>对称加密</strong></li>\n</ul>\n<p>1976年以前，所有的加密方法都是同一种模式:</p>\n<blockquote>\n<ol>\n<li>发送方选择某一种加密规则，对信息进行加密；</li>\n<li>接受方使用同一种规则，对信息进行解密。</li>\n</ol>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/rsa_unsymmetric.jpg\" alt=\"\"></p>\n<p>缺点：如上图所示甲方必须把加密规则告诉乙方，否则无法解密。保存和传递密钥，就成了最头疼的问题。</p>\n<ul>\n<li><strong>非对称加密</strong></li>\n</ul>\n<p>加密和解密过程：</p>\n<blockquote>\n<ol>\n<li>接收方先创建两把钥匙：公钥和私钥，并将公钥传递给发送方；</li>\n<li>发送发拿到公钥后对信息进行加密，并将加密后的信息发送给接收方；</li>\n<li>接收方收到信息后用之前自己生成的私钥进行解密，得到原信息。</li>\n</ol>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/rsa_symmetric.jpg\" alt=\"\"></p>\n<p><center>②代表上述加解密过程的第2、3步</center><br>从上图可以看出，可能被截获的就是在传输途中的公钥和加密后的信息。如果被公钥加密后的信息只有私钥才解得开，那么只要私钥不泄漏，通信就是安全的。</p>\n<p>非对称加密巧妙的通过两把钥匙，规避了密钥在传输过程中被泄漏的问题。自1976年后，非对称加密开始盛行，下面我们来看看如今在互联网中经常用到的一些加密算法。</p>\n<h3 id=\"常见加密算法\"><a href=\"#常见加密算法\" class=\"headerlink\" title=\"常见加密算法\"></a>常见加密算法</h3><ul>\n<li><strong>散列算法</strong></li>\n</ul>\n<p><img src=\"https://img.carlwe.com/rsa_compare_sanlie.jpg\" alt=\"\"></p>\n<p>首先我们来看下散列算法，其中用到比较多的是MD5和SHA-1，MD5的生成用到了哈希函数，它的典型应用是对一段信息产生信息摘要，以防止被篡改，因而可以用来检查文件完整性和生成数字签名，从上表可以看出，MD5没有SHA-1的安全性高，但加密速度更快。</p>\n<p>另外MD5、SHA-1算法生成的结果一般而言是不可逆的（可通过碰撞法破解），严格来说MD5 不是一种加密算法而是摘要算法。</p>\n<ul>\n<li><strong>对称加密</strong></li>\n</ul>\n<p><img src=\"https://img.carlwe.com/rsa_compare_symmetric.jpg\" alt=\"\"></p>\n<p>通过上面我们知道对称加密是近代密码学的产物，但DES、AES加密算法依旧被广泛的使用着。3DES是基于 DES 的对称算法，即对一块数据用三个不同的密钥进行三次加密，强度更高，但必然会导致更高的资源消耗。</p>\n<p>AES 算法更易于各种硬件和软件实现，这种加密算法是美国联邦政府采用的区块加密标准。AES 的出现就是为了取代DES，AES 具有更好的安全性、效率和灵活性。相对于非对称加密，对称加密的速度要快上几百倍甚至上千倍，这对大文件进行加密非常友好，所以这就是为什么非对称加密如今依旧能够被广泛应用的原因。</p>\n<ul>\n<li><strong>非对称加密</strong></li>\n</ul>\n<p><img src=\"https://img.carlwe.com/rsa_compare_unsymmetric.jpg\" alt=\"\"></p>\n<p>最后就是非对称加密了算法了，除了我们所知道的RSA加密算法，还有一种叫做<strong><a href=\"https://www.jianshu.com/p/e41bc1eb1d81\" target=\"_blank\" rel=\"noopener\">ECC加密算法</a></strong>，其显著特征是密钥长度低，故相同长度的密钥安全性比RSA更高，其在比特币中有大量运用，原理是通过上述提到的三大数学难题中的椭圆曲线问题，非对称加密算法相对于对称加密算法来说，安全性更高。拿RSA算法来说，一般认为密钥长度达到1024位基本安全，2048位的密钥极其安全。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>不管是哪个时代，密码学在发展过程中，总是伴随着破解与反破解，而这个过程中，加密也变得越来越安全。我们可以看到加密从一种艺术演变成一门科学，从对称加密发展到非对称加密，那下一个加密时代又是如何呢？</p>\n<p>关于加密的故事其实还有很多,欢迎在留言区说出你记忆中古今中外的加密故事。下一篇我们将介绍RSA加密相关的知识，尽请期待！</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/rsa_logo1.png-h\" alt=\"\"></p>","more":"<p>加密在生活中其实无处不在，我们先来看几个例子：</p>\n<ul>\n<li>输入用户名和密码登陆手机中的App。</li>\n<li>菜市场买菜时输入微信、支付宝的支付密码进行结账。</li>\n<li>网上银行转账、银行卡取现金时输入密码的操作。</li>\n</ul>\n<p>为了安全考虑上面这些操作都会涉及到加密，可想而知加密在现实生活中的重要性。从这篇文章开始我们来讲解下密码学中最重要的一种加密方式：RSA加密。在讲RSA加密之前，我们先来看看密码学，讲讲密码的发展历史以及当下一些常见的加密算法，对密码学及一些常见的加密算法有一个初步的认识。</p>\n<h3 id=\"密码学的发展历史\"><a href=\"#密码学的发展历史\" class=\"headerlink\" title=\"密码学的发展历史\"></a>密码学的发展历史</h3><p><img src=\"https://img.carlwe.com/rsa_encrypt_history.jpg\" alt=\"\"></p>\n<p>从上图可以看出，密码学的发展主要分为三个阶段：古典密码学、近代密码学和现代密码学，下面我们来逐一介绍。</p>\n<h4 id=\"1-古典密码学\"><a href=\"#1-古典密码学\" class=\"headerlink\" title=\"1.古典密码学\"></a>1.古典密码学</h4><p>1949年之前的密码学统称为古典密码学，古典密码学主要有三个特征，分别是：<strong>隐藏法</strong>、<strong>移位法</strong>和<strong>替代法</strong>。</p>\n<p>在我国古代隐藏法的藏头诗、藏尾诗、漏格诗及绘画等形式中有大量的运用。例如在《水浒传》中为了拉卢俊义入伙儿，智多星吴用和松江便想出一段《吴用智赚玉麒麟》的故事来，利用卢俊义正为躲避血光之灾的惶恐心理，口占四句卦歌：</p>\n<p><center>芦花丛中一扁舟，<br>俊杰俄从此地游。<br>义士若能知此理，<br>反躬难逃可无忧。 </center><br>暗藏<strong>卢俊义反</strong>四字，后广为传播。结果成了官府治罪的证据，终于把卢俊义“逼”上了梁山。另外表达爱意的感情诗也颇多，例如唐伯虎写给秋香的诗：</p>\n<p><center>我画蓝江水悠悠，<br>爱晚亭上枫叶愁。<br>秋月溶溶照佛寺，<br>香烟袅袅绕经楼。 </center><br>另外古人发明遇水才显现的墨，并利用人们不敢往名画上泼水的心理，隐藏一些信息。在电视剧《少年包青天Ⅱ》中包拯给无价之宝的名画泼了一盆水，揭开了牡丹亭少女之谜。</p>\n<p><img src=\"https://img.carlwe.com/rsa_mudantingshaonv.jpg\" alt=\"\"></p>\n<p>在同时期的西方，人们最开始使用棋盘密码、滚筒密码和换位密码进行加密，达到混淆原文的目的。其中有名的<strong>凯撒密码</strong>（ 把一个字母替换为它后面固定位置的另一个字母）成为单表置换的经典，但是人们可以通过单表简单频率分析方法不断尝试从而将其破解。</p>\n<p><img src=\"https://img.carlwe.com/rsa_caesar.jpg-s\" alt=\"\"></p>\n<p><center>凯撒密码(key=3)</center><br>为了提升破解的困难程度，人们开始发明多表置换密码。即一个明文字母可以表示为多个密文字母，<strong><a href=\"https://www.cnblogs.com/inverseEntropy/p/10151176.html\" target=\"_blank\" rel=\"noopener\">维吉尼亚密码</a></strong>随之出现，其使用一系列凯撒密码组成密码字母表的加密算法，故使得单表简单频率分析方法失效，维吉尼亚密码在法语写作：le chiffre indéchiffrable。意思是：不可破译的密码。自此密码破解的难度大大提升，维吉尼亚密码也成为了古典密码的里程碑。</p>\n<p>另外在近代密码出现之前，为了传递大量信息，一些加密算法加密过程过于耗时，尤其在战争中。时效性尤为重要，这时俚语加密便流行起来。太平洋战役中，美军招募了一批纳瓦霍族人作为通讯兵，由于其语言只有发音没有文字，且该语言未被研究过，所以即使敌人获取到，没有纳瓦霍族自己人的帮助也很难解密。美军在此基础上加上一些其他的加密处理来传递军事信息，效果出奇的好，最终顺利的帮助美国海军陆战队攻克了硫磺岛。故事具体情节可以移步这里👉<a href=\"https://baike.baidu.com/item/%E7%BA%B3%E7%93%A6%E9%9C%8D%E5%AF%86%E7%A0%81/9482868?fr=aladdin\" target=\"_blank\" rel=\"noopener\">钠瓦霍密码</a></p>\n<p>​    <img src=\"https://img.carlwe.com/ras_nawahuo.jpg\" alt=\"\"></p>\n<p><center>纳瓦霍通讯兵(左)&nbsp &nbsp 加密字典(右)</center><br>总的来说，古典密码学的思想主要通过隐藏、移位和替换来实现，而这一时期的密码学的体现形式则更像是一门艺术。</p>\n<h4 id=\"2-近代密码学\"><a href=\"#2-近代密码学\" class=\"headerlink\" title=\"2.近代密码学\"></a>2.近代密码学</h4><p>时间来到了1949年，在这一年美国数学家、信息论创始人<a href=\"https://baike.baidu.com/item/%E5%85%8B%E5%8A%B3%E5%BE%B7%C2%B7%E8%89%BE%E5%B0%94%E4%BC%8D%E5%BE%B7%C2%B7%E9%A6%99%E5%86%9C/10588593?fromtitle=%E9%A6%99%E5%86%9C&amp;fromid=1146248&amp;fr=aladdin\" target=\"_blank\" rel=\"noopener\">香农</a>发表了一篇名叫《保密系统的信息理论》的论文。该文提出了<strong>混淆</strong>和<strong>扩散</strong>两大设计原则。为<strong>对称密码学</strong>建立了理论基础，自此密码学成为了一门科学，其代表性加密算法为DES和AES。其原理简单来说就是在加密前先分组，分组的过程中充分利用混淆和扩散，这样可以有效的抵抗对手根据密文的统计特性推测明文或密钥。</p>\n<h4 id=\"3-现代密码学\"><a href=\"#3-现代密码学\" class=\"headerlink\" title=\"3.现代密码学\"></a>3.现代密码学</h4><p>在不久后的1976年，迪菲－赫尔曼发表了论文《密码学的新方向》，论文中提出了“迪菲－赫尔曼密钥交换算法”该算法奠定了现代密码学的基础，因此也获得了2015年的图灵奖。其核心为单向陷门函数， 特点是：易计算，但难求逆难。人们通过这个思想设计出了<strong>非对称加密</strong>算法。简单来说就是通过两个相关联的密钥，将加密与解密操作分开，从而可以在不直接传递密钥的情况下完成解密。而“易计算，求逆难”正好可以利用数学界的三大难题：</p>\n<blockquote>\n<p>1.质因数分解</p>\n<p>2.离散对数问题</p>\n<p>3.椭圆曲线类</p>\n</blockquote>\n<p>其中最经典的公钥加密算法就是1978年由Rivest，Shamir和Adleman用数论方法构造的RSA算法（核心难题为质因数分解）是迄今为止理论上最成熟最完善的公钥密码体制，并已得到广泛应用，也是本系列文章所要着重介绍的加密算法。</p>\n<p>纵观密码学发展的三个阶段。从最原始基于隐藏、移位、替换法所形成的各种加密艺术，发展到后来以混淆和扩散为原则的加密科学，再到以通用数学难题为核心的现代非对称加密，可见密码学在发展的过程中，加密和破解始终在进行着激烈的博弈，进而催生着更安全的加密形式诞生。</p>\n<p>上面简单的介绍了密码学的发展历史，其中有两个概念我们来着重看下，那就是对称加密和非对称加密。</p>\n<h3 id=\"对称加密与非对称加密\"><a href=\"#对称加密与非对称加密\" class=\"headerlink\" title=\"对称加密与非对称加密\"></a>对称加密与非对称加密</h3><ul>\n<li><strong>对称加密</strong></li>\n</ul>\n<p>1976年以前，所有的加密方法都是同一种模式:</p>\n<blockquote>\n<ol>\n<li>发送方选择某一种加密规则，对信息进行加密；</li>\n<li>接受方使用同一种规则，对信息进行解密。</li>\n</ol>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/rsa_unsymmetric.jpg\" alt=\"\"></p>\n<p>缺点：如上图所示甲方必须把加密规则告诉乙方，否则无法解密。保存和传递密钥，就成了最头疼的问题。</p>\n<ul>\n<li><strong>非对称加密</strong></li>\n</ul>\n<p>加密和解密过程：</p>\n<blockquote>\n<ol>\n<li>接收方先创建两把钥匙：公钥和私钥，并将公钥传递给发送方；</li>\n<li>发送发拿到公钥后对信息进行加密，并将加密后的信息发送给接收方；</li>\n<li>接收方收到信息后用之前自己生成的私钥进行解密，得到原信息。</li>\n</ol>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/rsa_symmetric.jpg\" alt=\"\"></p>\n<p><center>②代表上述加解密过程的第2、3步</center><br>从上图可以看出，可能被截获的就是在传输途中的公钥和加密后的信息。如果被公钥加密后的信息只有私钥才解得开，那么只要私钥不泄漏，通信就是安全的。</p>\n<p>非对称加密巧妙的通过两把钥匙，规避了密钥在传输过程中被泄漏的问题。自1976年后，非对称加密开始盛行，下面我们来看看如今在互联网中经常用到的一些加密算法。</p>\n<h3 id=\"常见加密算法\"><a href=\"#常见加密算法\" class=\"headerlink\" title=\"常见加密算法\"></a>常见加密算法</h3><ul>\n<li><strong>散列算法</strong></li>\n</ul>\n<p><img src=\"https://img.carlwe.com/rsa_compare_sanlie.jpg\" alt=\"\"></p>\n<p>首先我们来看下散列算法，其中用到比较多的是MD5和SHA-1，MD5的生成用到了哈希函数，它的典型应用是对一段信息产生信息摘要，以防止被篡改，因而可以用来检查文件完整性和生成数字签名，从上表可以看出，MD5没有SHA-1的安全性高，但加密速度更快。</p>\n<p>另外MD5、SHA-1算法生成的结果一般而言是不可逆的（可通过碰撞法破解），严格来说MD5 不是一种加密算法而是摘要算法。</p>\n<ul>\n<li><strong>对称加密</strong></li>\n</ul>\n<p><img src=\"https://img.carlwe.com/rsa_compare_symmetric.jpg\" alt=\"\"></p>\n<p>通过上面我们知道对称加密是近代密码学的产物，但DES、AES加密算法依旧被广泛的使用着。3DES是基于 DES 的对称算法，即对一块数据用三个不同的密钥进行三次加密，强度更高，但必然会导致更高的资源消耗。</p>\n<p>AES 算法更易于各种硬件和软件实现，这种加密算法是美国联邦政府采用的区块加密标准。AES 的出现就是为了取代DES，AES 具有更好的安全性、效率和灵活性。相对于非对称加密，对称加密的速度要快上几百倍甚至上千倍，这对大文件进行加密非常友好，所以这就是为什么非对称加密如今依旧能够被广泛应用的原因。</p>\n<ul>\n<li><strong>非对称加密</strong></li>\n</ul>\n<p><img src=\"https://img.carlwe.com/rsa_compare_unsymmetric.jpg\" alt=\"\"></p>\n<p>最后就是非对称加密了算法了，除了我们所知道的RSA加密算法，还有一种叫做<strong><a href=\"https://www.jianshu.com/p/e41bc1eb1d81\" target=\"_blank\" rel=\"noopener\">ECC加密算法</a></strong>，其显著特征是密钥长度低，故相同长度的密钥安全性比RSA更高，其在比特币中有大量运用，原理是通过上述提到的三大数学难题中的椭圆曲线问题，非对称加密算法相对于对称加密算法来说，安全性更高。拿RSA算法来说，一般认为密钥长度达到1024位基本安全，2048位的密钥极其安全。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>不管是哪个时代，密码学在发展过程中，总是伴随着破解与反破解，而这个过程中，加密也变得越来越安全。我们可以看到加密从一种艺术演变成一门科学，从对称加密发展到非对称加密，那下一个加密时代又是如何呢？</p>\n<p>关于加密的故事其实还有很多,欢迎在留言区说出你记忆中古今中外的加密故事。下一篇我们将介绍RSA加密相关的知识，尽请期待！</p>"},{"title":"RSA加密(二) 加密过程","date":"2019-09-16T08:56:20.000Z","mathjax":true,"_content":"\n![](https://img.carlwe.com/rsa_designers.jpg-h)\n\n<!--more-->\n\n上篇文章我们介绍了密码学的基础，相信你已经对密码学及相关的知识有所了解，如果还没有阅读过，可以点击这里查看👉 [RSA加密(一) 密码学基础](https://carlwe.com/2019/08/17/RSA%E5%8A%A0%E5%AF%86%28%E4%B8%80%29%20%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/) 。\n\n这篇文章主要给大家讲解下RSA加密的过程，但在讲加密过程前我们需要了解几个数学公式。都很简单，相信大家看了就会明白，文中遇到有链接的地方，可先跳过不影响阅读。下面我们先来看看RSA加密的介绍。\n\n## RSA加密简介\n\n本文开篇的这张图就是RSA加密的三位作者，RSA算法是由Rivest、Shamir和Adleman在1977年共同提出，他们当时正好都在麻省理工学院工作，RSA就是他们三人姓氏开头字母拼在一起组成的。\n\n![](https://img.carlwe.com/rsa_history.png-m)\n<center>当年的照片，留心下他们的发际线对比😅</center><p>\n\n但其实在RSA算法提出的4年前的1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中便提出了一个与之等效的算法，但该算法当时被列入机密，直到1997年才得到公开（稍微有一些些可惜了~）。\n\n从上篇文章我们了解到，RSA加密算法是通过分解质因数的困难性来实现的。换言之，对一个极大整数做因数分解愈困难，RSA算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用RSA加密的信息的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA钥匙才可能被强力方式破解。到当前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被破解的，正因为RSA加密的安全性，所以RSA加密算法在当今互联网信息传递中被广泛的使用。\n\n> 可以毫不夸张的说：只要有计算机网络的地方就有RSA加密算法。\n\n## 数学公式\n\n前面说到要理解RSA加密需要先了解一些数论相关的知识，这里我总结了几个必要的公式，方便后面能够更好的理解加密过程。\n\n### 1.互质关系\n\n1. 质数定义：除了1和它本身，不能被其它数整除的数。例如：2、3、5、7、11、13、17、19、23、29...\n2. 任意两个质数构成互质关系。例如5和7，除1之外没有其他数能够整除5和7。\n3. 质数A与不是它的倍数的数构成互质。例如5能和1、2、3、4、6、7、8、9、11构成互质关系。\n\n### 2.欧拉函数\n\n对于任意正整数n，欧拉函数就是计算比n小的数中与n互质的数有多少个，用φ(n)表示，例：\n\n> 计算整数8的欧拉函数：与8形成互质关系的是1、3、5、7共四个数，所以 φ(8) = 4。\n\n从上面互质关系中的第三条我们可以知道，当n是一个质数时，比n小的所有数都与n形成互质关系，所以有：\n\n>  n是质数：φ(n) = n-1\n\n根据中国[剩余定理](https://baike.baidu.com/item/孙子定理/2841597?fromtitle=剩余定理&fromid=2362542)(又称孙子定理)我们可以得到：两个互质整数p、q乘积的欧拉函数为：\n\n>  φ(pxq) = φ(p)φ(q)  （即可分开计算再相乘）\n\n所以当p、q都是质数的时候，根据上面的公式 `φ(n)=n-1` 我们可以得到：\n\n> φ(pxq)=(p-1)(q-1)\n\n我们知道上面这种情况的欧拉公式就够了，关于更多欧拉函数的相关知识我们可以查看👉[这里](https://blog.csdn.net/paxhujing/article/details/51353672)\n\n### 3.欧拉定理\n\n介绍欧拉定理之前，先说下取余操作。大家都知道 5除4余1，在数学中表示为 ` 5=1(mod4) ` ，因为在计算机中计算余数的符号为百分号%，所以下面公式统一用 ` 5%4=1 ` 这种既简洁又好理解的形式表示。\n\n**欧拉定理**：若正整数a和n互质则有\n\n> $a^{φ(n)}$ % n=1\n\n正如上面的式子，**伟大的定理往往都相当简洁！**关于欧拉定理如何证明，感兴趣的同学可以查看👉[这里](https://www.cnblogs.com/wangxiaodai/p/9758242.html)\n\n另外与之相关的一个概念，若正整数a和n互质则存在整数b使得：\n\n> ab % n=1\n\nb就叫做a的**模反元素**，那b就一定存在吗？欧拉定理我们可以写成:\n\n> a x $a^{φ(n)-1}$ % n=1\n\n所以b=$a^{φ(n)-1}$时上式成立，故b必然存在。\n\n对于后面的加解密过程，我们主要用到如下两个公式：\n\n![](https://img.carlwe.com/rsa_fomulai.jpg)\n\n## RSA加密、解密过程\n\n### 生成公钥、私钥\n\n**1. 随机找出两个不相等的质数 p、q**\n\n> 这里方便起见我们取 p=5，q=11（实际应用中p和q越大越难破解）\n\n**2. 计算p、q的乘积 n = p x q**\n\n> n = 5 x 11 = 55（n的二进制长度称为RSA加密的密钥长度，这里55表示成二进制是110111，长度只有6位，实际应用中为1024位或更高的2048位）\n>\n\n**3. 计算n的欧拉函数φ(n)**，根据上面我们所推导的欧拉函数，得到：φ(n)=(p-1)(q-1)\n\n> φ(n) = 4 x 10 = 40\n\n**4. 随机选择一个整数e，条件是1< e < φ(n)，且e与φ(n) 互质**。\n\n> e和40要互质，为了方便这里我们取 e = 3.（ 实际应用中这里一般取65537 ）\n\n**5. 计算e对于φ(n)的模反元素d**\n\n> 即 ed % φ(n)=1可以写成：3d = k40+1，当k=2时，我们得到d=27.\n\n**6. 将e和n封装作为公钥(e,n)，d和n封装作为私钥(d,n)**，即：\n\n> 公钥：（e=3，n=55）\n>\n> 私钥：（d=27，n=55）\n\n### 加密\n\n上面我们已经计算出了公钥和私钥，根据上篇文章中的非对称加密流程。发送发收到公钥后开始进行加密操作。\n\n假设现在我们要发送一段消息m=4，公钥为 (e=3,n=55)\n\n> m必须是一个整数（可将发送的消息通过[ASCII码](http://ascii.911cha.com/)转换成十进制），且m<n，这就导致RSA加密的内容长度受到了限制。\n\n计算密文：c = $m^e$ % n\n\n> 即密文c = $ 4^3$ % 55 = 64%55 = 9\n\n发送方便将密文9，通过网络等途径发送给接收方。\n\n### 解密\n\n接收方收到密文c=9后，使用自己创建的私钥 (d=27,n=55) 进行解密操作。\n\n计算原文：m =  $c^d$ % n\n\n> 即原文m = $9^{27}$ % 55 = 4 （简单推导见👉[这里](<https://zhidao.baidu.com/question/558432799.html>)，也可通过编程验证）\n\n于是接收方便得到了发送方想要发送的消息，整个加密和解密过程就结束了。\n\n## 总结\n\n可以看到RSA加密和解密的过程并不复杂，用到的公式也只有仅仅两个，但这里面还有一些问题等待着我们去探索，例如：\n\n* m<n，这就导致RSA加密的内容长度受到了限制，那如何加密发送一段很长的文本呢？\n* RSA在公钥和密文传输的过程中就真的很安全吗？\n* 为什么解密的时候原文：m 就等于  $c^d$ % n呢？ \n\n欢迎在留言区说出你的想法，我们将在下一篇文章中给大家带来解答。\n\n","source":"_posts/RSA加密(二) 加密过程.md","raw":"---\ntitle: RSA加密(二) 加密过程\ndate: 2019-09-16 16:56:20\ntags: 技术\nmathjax: true\n---\n\n![](https://img.carlwe.com/rsa_designers.jpg-h)\n\n<!--more-->\n\n上篇文章我们介绍了密码学的基础，相信你已经对密码学及相关的知识有所了解，如果还没有阅读过，可以点击这里查看👉 [RSA加密(一) 密码学基础](https://carlwe.com/2019/08/17/RSA%E5%8A%A0%E5%AF%86%28%E4%B8%80%29%20%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/) 。\n\n这篇文章主要给大家讲解下RSA加密的过程，但在讲加密过程前我们需要了解几个数学公式。都很简单，相信大家看了就会明白，文中遇到有链接的地方，可先跳过不影响阅读。下面我们先来看看RSA加密的介绍。\n\n## RSA加密简介\n\n本文开篇的这张图就是RSA加密的三位作者，RSA算法是由Rivest、Shamir和Adleman在1977年共同提出，他们当时正好都在麻省理工学院工作，RSA就是他们三人姓氏开头字母拼在一起组成的。\n\n![](https://img.carlwe.com/rsa_history.png-m)\n<center>当年的照片，留心下他们的发际线对比😅</center><p>\n\n但其实在RSA算法提出的4年前的1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中便提出了一个与之等效的算法，但该算法当时被列入机密，直到1997年才得到公开（稍微有一些些可惜了~）。\n\n从上篇文章我们了解到，RSA加密算法是通过分解质因数的困难性来实现的。换言之，对一个极大整数做因数分解愈困难，RSA算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用RSA加密的信息的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA钥匙才可能被强力方式破解。到当前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被破解的，正因为RSA加密的安全性，所以RSA加密算法在当今互联网信息传递中被广泛的使用。\n\n> 可以毫不夸张的说：只要有计算机网络的地方就有RSA加密算法。\n\n## 数学公式\n\n前面说到要理解RSA加密需要先了解一些数论相关的知识，这里我总结了几个必要的公式，方便后面能够更好的理解加密过程。\n\n### 1.互质关系\n\n1. 质数定义：除了1和它本身，不能被其它数整除的数。例如：2、3、5、7、11、13、17、19、23、29...\n2. 任意两个质数构成互质关系。例如5和7，除1之外没有其他数能够整除5和7。\n3. 质数A与不是它的倍数的数构成互质。例如5能和1、2、3、4、6、7、8、9、11构成互质关系。\n\n### 2.欧拉函数\n\n对于任意正整数n，欧拉函数就是计算比n小的数中与n互质的数有多少个，用φ(n)表示，例：\n\n> 计算整数8的欧拉函数：与8形成互质关系的是1、3、5、7共四个数，所以 φ(8) = 4。\n\n从上面互质关系中的第三条我们可以知道，当n是一个质数时，比n小的所有数都与n形成互质关系，所以有：\n\n>  n是质数：φ(n) = n-1\n\n根据中国[剩余定理](https://baike.baidu.com/item/孙子定理/2841597?fromtitle=剩余定理&fromid=2362542)(又称孙子定理)我们可以得到：两个互质整数p、q乘积的欧拉函数为：\n\n>  φ(pxq) = φ(p)φ(q)  （即可分开计算再相乘）\n\n所以当p、q都是质数的时候，根据上面的公式 `φ(n)=n-1` 我们可以得到：\n\n> φ(pxq)=(p-1)(q-1)\n\n我们知道上面这种情况的欧拉公式就够了，关于更多欧拉函数的相关知识我们可以查看👉[这里](https://blog.csdn.net/paxhujing/article/details/51353672)\n\n### 3.欧拉定理\n\n介绍欧拉定理之前，先说下取余操作。大家都知道 5除4余1，在数学中表示为 ` 5=1(mod4) ` ，因为在计算机中计算余数的符号为百分号%，所以下面公式统一用 ` 5%4=1 ` 这种既简洁又好理解的形式表示。\n\n**欧拉定理**：若正整数a和n互质则有\n\n> $a^{φ(n)}$ % n=1\n\n正如上面的式子，**伟大的定理往往都相当简洁！**关于欧拉定理如何证明，感兴趣的同学可以查看👉[这里](https://www.cnblogs.com/wangxiaodai/p/9758242.html)\n\n另外与之相关的一个概念，若正整数a和n互质则存在整数b使得：\n\n> ab % n=1\n\nb就叫做a的**模反元素**，那b就一定存在吗？欧拉定理我们可以写成:\n\n> a x $a^{φ(n)-1}$ % n=1\n\n所以b=$a^{φ(n)-1}$时上式成立，故b必然存在。\n\n对于后面的加解密过程，我们主要用到如下两个公式：\n\n![](https://img.carlwe.com/rsa_fomulai.jpg)\n\n## RSA加密、解密过程\n\n### 生成公钥、私钥\n\n**1. 随机找出两个不相等的质数 p、q**\n\n> 这里方便起见我们取 p=5，q=11（实际应用中p和q越大越难破解）\n\n**2. 计算p、q的乘积 n = p x q**\n\n> n = 5 x 11 = 55（n的二进制长度称为RSA加密的密钥长度，这里55表示成二进制是110111，长度只有6位，实际应用中为1024位或更高的2048位）\n>\n\n**3. 计算n的欧拉函数φ(n)**，根据上面我们所推导的欧拉函数，得到：φ(n)=(p-1)(q-1)\n\n> φ(n) = 4 x 10 = 40\n\n**4. 随机选择一个整数e，条件是1< e < φ(n)，且e与φ(n) 互质**。\n\n> e和40要互质，为了方便这里我们取 e = 3.（ 实际应用中这里一般取65537 ）\n\n**5. 计算e对于φ(n)的模反元素d**\n\n> 即 ed % φ(n)=1可以写成：3d = k40+1，当k=2时，我们得到d=27.\n\n**6. 将e和n封装作为公钥(e,n)，d和n封装作为私钥(d,n)**，即：\n\n> 公钥：（e=3，n=55）\n>\n> 私钥：（d=27，n=55）\n\n### 加密\n\n上面我们已经计算出了公钥和私钥，根据上篇文章中的非对称加密流程。发送发收到公钥后开始进行加密操作。\n\n假设现在我们要发送一段消息m=4，公钥为 (e=3,n=55)\n\n> m必须是一个整数（可将发送的消息通过[ASCII码](http://ascii.911cha.com/)转换成十进制），且m<n，这就导致RSA加密的内容长度受到了限制。\n\n计算密文：c = $m^e$ % n\n\n> 即密文c = $ 4^3$ % 55 = 64%55 = 9\n\n发送方便将密文9，通过网络等途径发送给接收方。\n\n### 解密\n\n接收方收到密文c=9后，使用自己创建的私钥 (d=27,n=55) 进行解密操作。\n\n计算原文：m =  $c^d$ % n\n\n> 即原文m = $9^{27}$ % 55 = 4 （简单推导见👉[这里](<https://zhidao.baidu.com/question/558432799.html>)，也可通过编程验证）\n\n于是接收方便得到了发送方想要发送的消息，整个加密和解密过程就结束了。\n\n## 总结\n\n可以看到RSA加密和解密的过程并不复杂，用到的公式也只有仅仅两个，但这里面还有一些问题等待着我们去探索，例如：\n\n* m<n，这就导致RSA加密的内容长度受到了限制，那如何加密发送一段很长的文本呢？\n* RSA在公钥和密文传输的过程中就真的很安全吗？\n* 为什么解密的时候原文：m 就等于  $c^d$ % n呢？ \n\n欢迎在留言区说出你的想法，我们将在下一篇文章中给大家带来解答。\n\n","slug":"RSA加密(二) 加密过程","published":1,"updated":"2020-08-18T02:25:58.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnp1000et57sos56eqna","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/rsa_designers.jpg-h\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>上篇文章我们介绍了密码学的基础，相信你已经对密码学及相关的知识有所了解，如果还没有阅读过，可以点击这里查看👉 <a href=\"https://carlwe.com/2019/08/17/RSA%E5%8A%A0%E5%AF%86%28%E4%B8%80%29%20%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/\">RSA加密(一) 密码学基础</a> 。</p>\n<p>这篇文章主要给大家讲解下RSA加密的过程，但在讲加密过程前我们需要了解几个数学公式。都很简单，相信大家看了就会明白，文中遇到有链接的地方，可先跳过不影响阅读。下面我们先来看看RSA加密的介绍。</p>\n<h2 id=\"RSA加密简介\"><a href=\"#RSA加密简介\" class=\"headerlink\" title=\"RSA加密简介\"></a>RSA加密简介</h2><p>本文开篇的这张图就是RSA加密的三位作者，RSA算法是由Rivest、Shamir和Adleman在1977年共同提出，他们当时正好都在麻省理工学院工作，RSA就是他们三人姓氏开头字母拼在一起组成的。</p>\n<p><img src=\"https://img.carlwe.com/rsa_history.png-m\" alt=\"\"></p>\n<p><center>当年的照片，留心下他们的发际线对比😅</center></p><p></p>\n<p>但其实在RSA算法提出的4年前的1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中便提出了一个与之等效的算法，但该算法当时被列入机密，直到1997年才得到公开（稍微有一些些可惜了~）。</p>\n<p>从上篇文章我们了解到，RSA加密算法是通过分解质因数的困难性来实现的。换言之，对一个极大整数做因数分解愈困难，RSA算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用RSA加密的信息的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA钥匙才可能被强力方式破解。到当前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被破解的，正因为RSA加密的安全性，所以RSA加密算法在当今互联网信息传递中被广泛的使用。</p>\n<blockquote>\n<p>可以毫不夸张的说：只要有计算机网络的地方就有RSA加密算法。</p>\n</blockquote>\n<h2 id=\"数学公式\"><a href=\"#数学公式\" class=\"headerlink\" title=\"数学公式\"></a>数学公式</h2><p>前面说到要理解RSA加密需要先了解一些数论相关的知识，这里我总结了几个必要的公式，方便后面能够更好的理解加密过程。</p>\n<h3 id=\"1-互质关系\"><a href=\"#1-互质关系\" class=\"headerlink\" title=\"1.互质关系\"></a>1.互质关系</h3><ol>\n<li>质数定义：除了1和它本身，不能被其它数整除的数。例如：2、3、5、7、11、13、17、19、23、29…</li>\n<li>任意两个质数构成互质关系。例如5和7，除1之外没有其他数能够整除5和7。</li>\n<li>质数A与不是它的倍数的数构成互质。例如5能和1、2、3、4、6、7、8、9、11构成互质关系。</li>\n</ol>\n<h3 id=\"2-欧拉函数\"><a href=\"#2-欧拉函数\" class=\"headerlink\" title=\"2.欧拉函数\"></a>2.欧拉函数</h3><p>对于任意正整数n，欧拉函数就是计算比n小的数中与n互质的数有多少个，用φ(n)表示，例：</p>\n<blockquote>\n<p>计算整数8的欧拉函数：与8形成互质关系的是1、3、5、7共四个数，所以 φ(8) = 4。</p>\n</blockquote>\n<p>从上面互质关系中的第三条我们可以知道，当n是一个质数时，比n小的所有数都与n形成互质关系，所以有：</p>\n<blockquote>\n<p> n是质数：φ(n) = n-1</p>\n</blockquote>\n<p>根据中国<a href=\"https://baike.baidu.com/item/孙子定理/2841597?fromtitle=剩余定理&amp;fromid=2362542\" target=\"_blank\" rel=\"noopener\">剩余定理</a>(又称孙子定理)我们可以得到：两个互质整数p、q乘积的欧拉函数为：</p>\n<blockquote>\n<p> φ(pxq) = φ(p)φ(q)  （即可分开计算再相乘）</p>\n</blockquote>\n<p>所以当p、q都是质数的时候，根据上面的公式 <code>φ(n)=n-1</code> 我们可以得到：</p>\n<blockquote>\n<p>φ(pxq)=(p-1)(q-1)</p>\n</blockquote>\n<p>我们知道上面这种情况的欧拉公式就够了，关于更多欧拉函数的相关知识我们可以查看👉<a href=\"https://blog.csdn.net/paxhujing/article/details/51353672\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h3 id=\"3-欧拉定理\"><a href=\"#3-欧拉定理\" class=\"headerlink\" title=\"3.欧拉定理\"></a>3.欧拉定理</h3><p>介绍欧拉定理之前，先说下取余操作。大家都知道 5除4余1，在数学中表示为 <code>5=1(mod4)</code> ，因为在计算机中计算余数的符号为百分号%，所以下面公式统一用 <code>5%4=1</code> 这种既简洁又好理解的形式表示。</p>\n<p><strong>欧拉定理</strong>：若正整数a和n互质则有</p>\n<blockquote>\n<p>$a^{φ(n)}$ % n=1</p>\n</blockquote>\n<p>正如上面的式子，<strong>伟大的定理往往都相当简洁！</strong>关于欧拉定理如何证明，感兴趣的同学可以查看👉<a href=\"https://www.cnblogs.com/wangxiaodai/p/9758242.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>另外与之相关的一个概念，若正整数a和n互质则存在整数b使得：</p>\n<blockquote>\n<p>ab % n=1</p>\n</blockquote>\n<p>b就叫做a的<strong>模反元素</strong>，那b就一定存在吗？欧拉定理我们可以写成:</p>\n<blockquote>\n<p>a x $a^{φ(n)-1}$ % n=1</p>\n</blockquote>\n<p>所以b=$a^{φ(n)-1}$时上式成立，故b必然存在。</p>\n<p>对于后面的加解密过程，我们主要用到如下两个公式：</p>\n<p><img src=\"https://img.carlwe.com/rsa_fomulai.jpg\" alt=\"\"></p>\n<h2 id=\"RSA加密、解密过程\"><a href=\"#RSA加密、解密过程\" class=\"headerlink\" title=\"RSA加密、解密过程\"></a>RSA加密、解密过程</h2><h3 id=\"生成公钥、私钥\"><a href=\"#生成公钥、私钥\" class=\"headerlink\" title=\"生成公钥、私钥\"></a>生成公钥、私钥</h3><p><strong>1. 随机找出两个不相等的质数 p、q</strong></p>\n<blockquote>\n<p>这里方便起见我们取 p=5，q=11（实际应用中p和q越大越难破解）</p>\n</blockquote>\n<p><strong>2. 计算p、q的乘积 n = p x q</strong></p>\n<blockquote>\n<p>n = 5 x 11 = 55（n的二进制长度称为RSA加密的密钥长度，这里55表示成二进制是110111，长度只有6位，实际应用中为1024位或更高的2048位）</p>\n</blockquote>\n<p><strong>3. 计算n的欧拉函数φ(n)</strong>，根据上面我们所推导的欧拉函数，得到：φ(n)=(p-1)(q-1)</p>\n<blockquote>\n<p>φ(n) = 4 x 10 = 40</p>\n</blockquote>\n<p><strong>4. 随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质</strong>。</p>\n<blockquote>\n<p>e和40要互质，为了方便这里我们取 e = 3.（ 实际应用中这里一般取65537 ）</p>\n</blockquote>\n<p><strong>5. 计算e对于φ(n)的模反元素d</strong></p>\n<blockquote>\n<p>即 ed % φ(n)=1可以写成：3d = k40+1，当k=2时，我们得到d=27.</p>\n</blockquote>\n<p><strong>6. 将e和n封装作为公钥(e,n)，d和n封装作为私钥(d,n)</strong>，即：</p>\n<blockquote>\n<p>公钥：（e=3，n=55）</p>\n<p>私钥：（d=27，n=55）</p>\n</blockquote>\n<h3 id=\"加密\"><a href=\"#加密\" class=\"headerlink\" title=\"加密\"></a>加密</h3><p>上面我们已经计算出了公钥和私钥，根据上篇文章中的非对称加密流程。发送发收到公钥后开始进行加密操作。</p>\n<p>假设现在我们要发送一段消息m=4，公钥为 (e=3,n=55)</p>\n<blockquote>\n<p>m必须是一个整数（可将发送的消息通过<a href=\"http://ascii.911cha.com/\" target=\"_blank\" rel=\"noopener\">ASCII码</a>转换成十进制），且m&lt;n，这就导致RSA加密的内容长度受到了限制。</p>\n</blockquote>\n<p>计算密文：c = $m^e$ % n</p>\n<blockquote>\n<p>即密文c = $ 4^3$ % 55 = 64%55 = 9</p>\n</blockquote>\n<p>发送方便将密文9，通过网络等途径发送给接收方。</p>\n<h3 id=\"解密\"><a href=\"#解密\" class=\"headerlink\" title=\"解密\"></a>解密</h3><p>接收方收到密文c=9后，使用自己创建的私钥 (d=27,n=55) 进行解密操作。</p>\n<p>计算原文：m =  $c^d$ % n</p>\n<blockquote>\n<p>即原文m = $9^{27}$ % 55 = 4 （简单推导见👉<a href=\"https://zhidao.baidu.com/question/558432799.html\" target=\"_blank\" rel=\"noopener\">这里</a>，也可通过编程验证）</p>\n</blockquote>\n<p>于是接收方便得到了发送方想要发送的消息，整个加密和解密过程就结束了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>可以看到RSA加密和解密的过程并不复杂，用到的公式也只有仅仅两个，但这里面还有一些问题等待着我们去探索，例如：</p>\n<ul>\n<li>m&lt;n，这就导致RSA加密的内容长度受到了限制，那如何加密发送一段很长的文本呢？</li>\n<li>RSA在公钥和密文传输的过程中就真的很安全吗？</li>\n<li>为什么解密的时候原文：m 就等于  $c^d$ % n呢？ </li>\n</ul>\n<p>欢迎在留言区说出你的想法，我们将在下一篇文章中给大家带来解答。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/rsa_designers.jpg-h\" alt=\"\"></p>","more":"<p>上篇文章我们介绍了密码学的基础，相信你已经对密码学及相关的知识有所了解，如果还没有阅读过，可以点击这里查看👉 <a href=\"https://carlwe.com/2019/08/17/RSA%E5%8A%A0%E5%AF%86%28%E4%B8%80%29%20%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/\">RSA加密(一) 密码学基础</a> 。</p>\n<p>这篇文章主要给大家讲解下RSA加密的过程，但在讲加密过程前我们需要了解几个数学公式。都很简单，相信大家看了就会明白，文中遇到有链接的地方，可先跳过不影响阅读。下面我们先来看看RSA加密的介绍。</p>\n<h2 id=\"RSA加密简介\"><a href=\"#RSA加密简介\" class=\"headerlink\" title=\"RSA加密简介\"></a>RSA加密简介</h2><p>本文开篇的这张图就是RSA加密的三位作者，RSA算法是由Rivest、Shamir和Adleman在1977年共同提出，他们当时正好都在麻省理工学院工作，RSA就是他们三人姓氏开头字母拼在一起组成的。</p>\n<p><img src=\"https://img.carlwe.com/rsa_history.png-m\" alt=\"\"></p>\n<p><center>当年的照片，留心下他们的发际线对比😅</center></p><p></p>\n<p>但其实在RSA算法提出的4年前的1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中便提出了一个与之等效的算法，但该算法当时被列入机密，直到1997年才得到公开（稍微有一些些可惜了~）。</p>\n<p>从上篇文章我们了解到，RSA加密算法是通过分解质因数的困难性来实现的。换言之，对一个极大整数做因数分解愈困难，RSA算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用RSA加密的信息的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA钥匙才可能被强力方式破解。到当前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被破解的，正因为RSA加密的安全性，所以RSA加密算法在当今互联网信息传递中被广泛的使用。</p>\n<blockquote>\n<p>可以毫不夸张的说：只要有计算机网络的地方就有RSA加密算法。</p>\n</blockquote>\n<h2 id=\"数学公式\"><a href=\"#数学公式\" class=\"headerlink\" title=\"数学公式\"></a>数学公式</h2><p>前面说到要理解RSA加密需要先了解一些数论相关的知识，这里我总结了几个必要的公式，方便后面能够更好的理解加密过程。</p>\n<h3 id=\"1-互质关系\"><a href=\"#1-互质关系\" class=\"headerlink\" title=\"1.互质关系\"></a>1.互质关系</h3><ol>\n<li>质数定义：除了1和它本身，不能被其它数整除的数。例如：2、3、5、7、11、13、17、19、23、29…</li>\n<li>任意两个质数构成互质关系。例如5和7，除1之外没有其他数能够整除5和7。</li>\n<li>质数A与不是它的倍数的数构成互质。例如5能和1、2、3、4、6、7、8、9、11构成互质关系。</li>\n</ol>\n<h3 id=\"2-欧拉函数\"><a href=\"#2-欧拉函数\" class=\"headerlink\" title=\"2.欧拉函数\"></a>2.欧拉函数</h3><p>对于任意正整数n，欧拉函数就是计算比n小的数中与n互质的数有多少个，用φ(n)表示，例：</p>\n<blockquote>\n<p>计算整数8的欧拉函数：与8形成互质关系的是1、3、5、7共四个数，所以 φ(8) = 4。</p>\n</blockquote>\n<p>从上面互质关系中的第三条我们可以知道，当n是一个质数时，比n小的所有数都与n形成互质关系，所以有：</p>\n<blockquote>\n<p> n是质数：φ(n) = n-1</p>\n</blockquote>\n<p>根据中国<a href=\"https://baike.baidu.com/item/孙子定理/2841597?fromtitle=剩余定理&amp;fromid=2362542\" target=\"_blank\" rel=\"noopener\">剩余定理</a>(又称孙子定理)我们可以得到：两个互质整数p、q乘积的欧拉函数为：</p>\n<blockquote>\n<p> φ(pxq) = φ(p)φ(q)  （即可分开计算再相乘）</p>\n</blockquote>\n<p>所以当p、q都是质数的时候，根据上面的公式 <code>φ(n)=n-1</code> 我们可以得到：</p>\n<blockquote>\n<p>φ(pxq)=(p-1)(q-1)</p>\n</blockquote>\n<p>我们知道上面这种情况的欧拉公式就够了，关于更多欧拉函数的相关知识我们可以查看👉<a href=\"https://blog.csdn.net/paxhujing/article/details/51353672\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h3 id=\"3-欧拉定理\"><a href=\"#3-欧拉定理\" class=\"headerlink\" title=\"3.欧拉定理\"></a>3.欧拉定理</h3><p>介绍欧拉定理之前，先说下取余操作。大家都知道 5除4余1，在数学中表示为 <code>5=1(mod4)</code> ，因为在计算机中计算余数的符号为百分号%，所以下面公式统一用 <code>5%4=1</code> 这种既简洁又好理解的形式表示。</p>\n<p><strong>欧拉定理</strong>：若正整数a和n互质则有</p>\n<blockquote>\n<p>$a^{φ(n)}$ % n=1</p>\n</blockquote>\n<p>正如上面的式子，<strong>伟大的定理往往都相当简洁！</strong>关于欧拉定理如何证明，感兴趣的同学可以查看👉<a href=\"https://www.cnblogs.com/wangxiaodai/p/9758242.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>另外与之相关的一个概念，若正整数a和n互质则存在整数b使得：</p>\n<blockquote>\n<p>ab % n=1</p>\n</blockquote>\n<p>b就叫做a的<strong>模反元素</strong>，那b就一定存在吗？欧拉定理我们可以写成:</p>\n<blockquote>\n<p>a x $a^{φ(n)-1}$ % n=1</p>\n</blockquote>\n<p>所以b=$a^{φ(n)-1}$时上式成立，故b必然存在。</p>\n<p>对于后面的加解密过程，我们主要用到如下两个公式：</p>\n<p><img src=\"https://img.carlwe.com/rsa_fomulai.jpg\" alt=\"\"></p>\n<h2 id=\"RSA加密、解密过程\"><a href=\"#RSA加密、解密过程\" class=\"headerlink\" title=\"RSA加密、解密过程\"></a>RSA加密、解密过程</h2><h3 id=\"生成公钥、私钥\"><a href=\"#生成公钥、私钥\" class=\"headerlink\" title=\"生成公钥、私钥\"></a>生成公钥、私钥</h3><p><strong>1. 随机找出两个不相等的质数 p、q</strong></p>\n<blockquote>\n<p>这里方便起见我们取 p=5，q=11（实际应用中p和q越大越难破解）</p>\n</blockquote>\n<p><strong>2. 计算p、q的乘积 n = p x q</strong></p>\n<blockquote>\n<p>n = 5 x 11 = 55（n的二进制长度称为RSA加密的密钥长度，这里55表示成二进制是110111，长度只有6位，实际应用中为1024位或更高的2048位）</p>\n</blockquote>\n<p><strong>3. 计算n的欧拉函数φ(n)</strong>，根据上面我们所推导的欧拉函数，得到：φ(n)=(p-1)(q-1)</p>\n<blockquote>\n<p>φ(n) = 4 x 10 = 40</p>\n</blockquote>\n<p><strong>4. 随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质</strong>。</p>\n<blockquote>\n<p>e和40要互质，为了方便这里我们取 e = 3.（ 实际应用中这里一般取65537 ）</p>\n</blockquote>\n<p><strong>5. 计算e对于φ(n)的模反元素d</strong></p>\n<blockquote>\n<p>即 ed % φ(n)=1可以写成：3d = k40+1，当k=2时，我们得到d=27.</p>\n</blockquote>\n<p><strong>6. 将e和n封装作为公钥(e,n)，d和n封装作为私钥(d,n)</strong>，即：</p>\n<blockquote>\n<p>公钥：（e=3，n=55）</p>\n<p>私钥：（d=27，n=55）</p>\n</blockquote>\n<h3 id=\"加密\"><a href=\"#加密\" class=\"headerlink\" title=\"加密\"></a>加密</h3><p>上面我们已经计算出了公钥和私钥，根据上篇文章中的非对称加密流程。发送发收到公钥后开始进行加密操作。</p>\n<p>假设现在我们要发送一段消息m=4，公钥为 (e=3,n=55)</p>\n<blockquote>\n<p>m必须是一个整数（可将发送的消息通过<a href=\"http://ascii.911cha.com/\" target=\"_blank\" rel=\"noopener\">ASCII码</a>转换成十进制），且m&lt;n，这就导致RSA加密的内容长度受到了限制。</p>\n</blockquote>\n<p>计算密文：c = $m^e$ % n</p>\n<blockquote>\n<p>即密文c = $ 4^3$ % 55 = 64%55 = 9</p>\n</blockquote>\n<p>发送方便将密文9，通过网络等途径发送给接收方。</p>\n<h3 id=\"解密\"><a href=\"#解密\" class=\"headerlink\" title=\"解密\"></a>解密</h3><p>接收方收到密文c=9后，使用自己创建的私钥 (d=27,n=55) 进行解密操作。</p>\n<p>计算原文：m =  $c^d$ % n</p>\n<blockquote>\n<p>即原文m = $9^{27}$ % 55 = 4 （简单推导见👉<a href=\"https://zhidao.baidu.com/question/558432799.html\" target=\"_blank\" rel=\"noopener\">这里</a>，也可通过编程验证）</p>\n</blockquote>\n<p>于是接收方便得到了发送方想要发送的消息，整个加密和解密过程就结束了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>可以看到RSA加密和解密的过程并不复杂，用到的公式也只有仅仅两个，但这里面还有一些问题等待着我们去探索，例如：</p>\n<ul>\n<li>m&lt;n，这就导致RSA加密的内容长度受到了限制，那如何加密发送一段很长的文本呢？</li>\n<li>RSA在公钥和密文传输的过程中就真的很安全吗？</li>\n<li>为什么解密的时候原文：m 就等于  $c^d$ % n呢？ </li>\n</ul>\n<p>欢迎在留言区说出你的想法，我们将在下一篇文章中给大家带来解答。</p>"},{"title":"RSA加密(三) 加密原理","date":"2019-09-26T04:06:46.000Z","mathjax":true,"_content":"\n![](https://img.carlwe.com/rsa_lock.jpg-h)\n\n<!--more-->\n\n在上篇文章**[RSA加密(二)](https://carlwe.com/2019/09/16/RSA%E5%8A%A0%E5%AF%86%28%E4%BA%8C%29%20%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B/)**中我们介绍了RSA加密的过程，并留下了三个问题：\n\n**遗留问题**：\n\n- RSA在公钥和密文传输的过程中就真的很安全吗？\n- 为什么解密的时候原文：m 就等于  $c^d$ % n呢？ \n- m<n，这就导致RSA加密的内容长度受到了限制，那如何加密发送一段很长的文本呢？\n\n在分析安全性之前，我们先简短的回顾下加解密过程：\n\n## 简单回顾\n\n### 1.生成共钥、私钥\n\n1. 找出质数p、q，p≠q.\n2. 计算n = p x q.\n3. 计算n的欧拉函数φ(n)=(p-1)(q-1)\n4. 选取整数e，条件是1< e < φ(n)，且e与φ(n) 互质，则公钥为:（e,n)\n5. 计算e对于φ(n)的模反元素d，将d和当作私钥:（d,n)\n\n### 2.加密、解密\n\n1. **加密**：用公钥对信息m加密，计算密文：c = $m^e​$ % n.\n2. **解密**：用私钥对密文c解密，计算原文：m =  $c^d$ % n.\n\n参考上面的加密过程，我们先来看看RSA加密的安全性。\n\n## 安全性\n\n说到安全性，首先我们想到的就是如何破解，首先在传输过程中被暴露的信息如下：\n\n> **公钥**:（e,n) 、 **密文**：c\n\n先来看下解密公式：m =  $c^d$ % n，想要得到信息m，就得知道c、d和n，对比上面截获的内容，c和n都已知，只有d我们不知道，查看上面生成公私钥步骤5，d是e对于φ(n)的模反元素，即有：\n\n> ed % φ(n) = 1\n\ne在公钥中我们已知，要求d，所以求出φ(n)就行，那φ(n)又怎么求呢？通过上面生成共私钥步骤3：\n\n> φ(n)=(p-1)(q-1)\n\n所以问题变成了，我们只需要求出p和q就可以了，那p和q又怎么求呢，通过上面生成共私钥步骤2：\n\n> n = p x q\n\nn在公钥中我们已知，只需要分解n就可以，但在实际应用中，n一般取1024位或更大的2048位，在第一篇文章中我们知道分解大数的质因数是当今三大数学难题之一，所以RSA加密在理论上是安全的。当今人类被报道破解的最大密钥长度是768位，232个十进制数，写下来如下:\n\n![](https://img.carlwe.com/rsa_bignumber.jpg)\n\n一般认为1024位的密钥基本安全，长度为2048位的密钥极其安全。就拿上述整数来说大小为$10^{232}​$来暴力破解，用当今最快的超级计算机[美国Summit](http://www.chinastor.com/hpc-top500/)，计算速度达到每秒200petaflops（千万亿次）即每秒$2*10^{17}$次，加上高效的质因数分解算法[Pollard Rho算法](https://www.cnblogs.com/Iamafool/p/10924390.html) (时间复杂度为$O(n^{\\frac14})$，计算下来也需要大概 $10^{33}$ 年，(当然实际破解中会用到很多方法大幅降低破解难度)，所以在当下计算质因数分解没有实质性理论突破的时代，只要密钥长度足够长，用RSA加密的信息实际上是不能被解破的。\n\n## 解密原理\n\n根据上面的加解密过程：**加密**：c = $m^e$ % n ，这个过程好理解，几个参数都是计算好的，没什么不好理解，我们来看下解密公式：\n\n> $c^d$ % n = m\n\n为什么计算的结果就是原文呢？下面我们来证明下上面的解密公式：\n\n1. 根据加密公式，可转换为c = $m^e-kn$.\n2. 将上式带入解密公式 m =  $c^d$ % n 得到： $(m^e-kn)^d$ % n = m.\n3. 因为$(m^e-kn)^d$ 中第二项含有kn是n的倍数，所以不管d是多少，乘开后，只有$m^{ed}$项不含有n，而含有n的项都能被n整除，所以上式可以简化成 $m^{ed}$ % n = m.\n4. 上面加密过程第5步求模反元素公式： ed % φ(n) = 1，可写成 ed = hφ(n)+1，将其带入$m^{ed}$ % n = m\n\n**即证明**：$m^{hφ(n)+1}$ % n = m 或 $m^{ed}$ % n = m.\n\n下面我们分两种情况来证明：\n\n* **m、n互质**\n\n> 1. 由欧拉定理可知 $m^{φ(n)}$%n = 1.\n> 2. 上式可变为：$ (m^{φ(n)})^h$ % n = 1，例如$5^1$%4=1、$5^2$%4=1、$5^3$%4=1...\n> 3. $ (m^{φ(n)})^h$ % n = 1 等价于 $m^{hφ(n)}$ % n = 1，可写成$m·m^{hφ(n)}$ % n = m，例如5%4=1、2·5%4=2、3·5%4=3、4·5%4=4\n> 4. $m·m^{hφ(n)}$ % n = m 可写成 $m^{hφ(n)+1}$ % n = m，原式得证！\n\n* **m、n不互质**\n\n> 1. 由加密过程：n = p x q，故n只能被分解成p和q的乘积，因为m和n不互质，故m一定是p或q的倍数，以m=kp为例，此时kp和q互质。\n> 2. 根据欧拉定理有：$(kp)^{φ(q)}$ % q = 1即：$ (kp)^{q-1} $ % q = 1.\n> 3. 上式进行h(p-1)次方运算再乘kp后得到：$[ (kp)^{q-1}]^{h(p-1)} $  x kp % q = kp，左边合并指数后得到：$(kp)^{h(p-1)(q-1)+1} $ % q = kp.\n> 4. 从上面我们已知 ed = hφ(n)+1即ed =h(p-1)(q-1)+1，所以上式可简化成：$(kp)^{ed}$ % q = kp.\n> 5. 上式可写成$(kp)^{ed}$ = tq + kp，可以发现，等式左边肯定是p的倍数，右边kp是p的倍数，所以tq也是p的倍数，而p和q互质，所以t一定能被p整除，即一定有 t =t'p，带入可得：$(kp)^{ed}$ = t'pq + kp.\n> 6. 从上面可知m=kp、n=pq，所以带入上式得: $m^{ed}$ = t'n + m，即：$m^{ed}$ % n = m，原式得证！\n\n可以看到在证明解密公式的过程中，我们频繁用到了欧拉函数和欧拉定理，如果没有欧拉函数和欧拉定理也不会有RSA算法的出现，可见理论数学的重要性！\n\n## 加密长度限制\n\n我们再来看第一个问题，由于生成随机的大质数p和q也是需要算法的，当n的长度为8192位时，通过macbook pro实测生成密钥时间在5秒以上，效率直线下降。这样就导致n不能太大，所以加密的文本也不能太长，一般来讲我们有如下两种方式来解决这个问题：\n\n1. **分段加密**：即可以通过将发送的消息分成多段，分别加密，再进行传输。\n2. **结合AES加密**：可通过对称性加密算法AES对长文本进行快速加密，再通过RSA加密算法对AES加密的密钥进行加密。\n\n第二种方式，只有破解加密后的密钥才能解密原文，但要破解加密后的密钥，相当于破解RSA加密，所以这种方式很好的解决了长文本加密的问题，并在实际开发中得到了广泛的应用。\n\n## 展望\n\n到这里RSA加密系列的文章就结束了，我们从密码学的发展，引出了非对称性加密，从而带大家认识了RSA加密的过程，最后剖析了RSA加密的原理，从而更深层次的了解到了RSA加密的安全性。但随着[量子加密](https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%8A%A0%E5%AF%86/11035670?fr=aladdin)的提出，尤其是[秀尔算法](https://www.cnblogs.com/h2zZhou/p/5495732.html)的提出，RSA加密在量子计算机普及后将变得不再安全，相信到那时密码学必会有革命性的变化。","source":"_posts/RSA加密(三) 加密原理.md","raw":"---\ntitle: RSA加密(三) 加密原理\ndate: 2019-09-26 12:06:46\ntags: 技术\nmathjax: true\n---\n\n![](https://img.carlwe.com/rsa_lock.jpg-h)\n\n<!--more-->\n\n在上篇文章**[RSA加密(二)](https://carlwe.com/2019/09/16/RSA%E5%8A%A0%E5%AF%86%28%E4%BA%8C%29%20%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B/)**中我们介绍了RSA加密的过程，并留下了三个问题：\n\n**遗留问题**：\n\n- RSA在公钥和密文传输的过程中就真的很安全吗？\n- 为什么解密的时候原文：m 就等于  $c^d$ % n呢？ \n- m<n，这就导致RSA加密的内容长度受到了限制，那如何加密发送一段很长的文本呢？\n\n在分析安全性之前，我们先简短的回顾下加解密过程：\n\n## 简单回顾\n\n### 1.生成共钥、私钥\n\n1. 找出质数p、q，p≠q.\n2. 计算n = p x q.\n3. 计算n的欧拉函数φ(n)=(p-1)(q-1)\n4. 选取整数e，条件是1< e < φ(n)，且e与φ(n) 互质，则公钥为:（e,n)\n5. 计算e对于φ(n)的模反元素d，将d和当作私钥:（d,n)\n\n### 2.加密、解密\n\n1. **加密**：用公钥对信息m加密，计算密文：c = $m^e​$ % n.\n2. **解密**：用私钥对密文c解密，计算原文：m =  $c^d$ % n.\n\n参考上面的加密过程，我们先来看看RSA加密的安全性。\n\n## 安全性\n\n说到安全性，首先我们想到的就是如何破解，首先在传输过程中被暴露的信息如下：\n\n> **公钥**:（e,n) 、 **密文**：c\n\n先来看下解密公式：m =  $c^d$ % n，想要得到信息m，就得知道c、d和n，对比上面截获的内容，c和n都已知，只有d我们不知道，查看上面生成公私钥步骤5，d是e对于φ(n)的模反元素，即有：\n\n> ed % φ(n) = 1\n\ne在公钥中我们已知，要求d，所以求出φ(n)就行，那φ(n)又怎么求呢？通过上面生成共私钥步骤3：\n\n> φ(n)=(p-1)(q-1)\n\n所以问题变成了，我们只需要求出p和q就可以了，那p和q又怎么求呢，通过上面生成共私钥步骤2：\n\n> n = p x q\n\nn在公钥中我们已知，只需要分解n就可以，但在实际应用中，n一般取1024位或更大的2048位，在第一篇文章中我们知道分解大数的质因数是当今三大数学难题之一，所以RSA加密在理论上是安全的。当今人类被报道破解的最大密钥长度是768位，232个十进制数，写下来如下:\n\n![](https://img.carlwe.com/rsa_bignumber.jpg)\n\n一般认为1024位的密钥基本安全，长度为2048位的密钥极其安全。就拿上述整数来说大小为$10^{232}​$来暴力破解，用当今最快的超级计算机[美国Summit](http://www.chinastor.com/hpc-top500/)，计算速度达到每秒200petaflops（千万亿次）即每秒$2*10^{17}$次，加上高效的质因数分解算法[Pollard Rho算法](https://www.cnblogs.com/Iamafool/p/10924390.html) (时间复杂度为$O(n^{\\frac14})$，计算下来也需要大概 $10^{33}$ 年，(当然实际破解中会用到很多方法大幅降低破解难度)，所以在当下计算质因数分解没有实质性理论突破的时代，只要密钥长度足够长，用RSA加密的信息实际上是不能被解破的。\n\n## 解密原理\n\n根据上面的加解密过程：**加密**：c = $m^e$ % n ，这个过程好理解，几个参数都是计算好的，没什么不好理解，我们来看下解密公式：\n\n> $c^d$ % n = m\n\n为什么计算的结果就是原文呢？下面我们来证明下上面的解密公式：\n\n1. 根据加密公式，可转换为c = $m^e-kn$.\n2. 将上式带入解密公式 m =  $c^d$ % n 得到： $(m^e-kn)^d$ % n = m.\n3. 因为$(m^e-kn)^d$ 中第二项含有kn是n的倍数，所以不管d是多少，乘开后，只有$m^{ed}$项不含有n，而含有n的项都能被n整除，所以上式可以简化成 $m^{ed}$ % n = m.\n4. 上面加密过程第5步求模反元素公式： ed % φ(n) = 1，可写成 ed = hφ(n)+1，将其带入$m^{ed}$ % n = m\n\n**即证明**：$m^{hφ(n)+1}$ % n = m 或 $m^{ed}$ % n = m.\n\n下面我们分两种情况来证明：\n\n* **m、n互质**\n\n> 1. 由欧拉定理可知 $m^{φ(n)}$%n = 1.\n> 2. 上式可变为：$ (m^{φ(n)})^h$ % n = 1，例如$5^1$%4=1、$5^2$%4=1、$5^3$%4=1...\n> 3. $ (m^{φ(n)})^h$ % n = 1 等价于 $m^{hφ(n)}$ % n = 1，可写成$m·m^{hφ(n)}$ % n = m，例如5%4=1、2·5%4=2、3·5%4=3、4·5%4=4\n> 4. $m·m^{hφ(n)}$ % n = m 可写成 $m^{hφ(n)+1}$ % n = m，原式得证！\n\n* **m、n不互质**\n\n> 1. 由加密过程：n = p x q，故n只能被分解成p和q的乘积，因为m和n不互质，故m一定是p或q的倍数，以m=kp为例，此时kp和q互质。\n> 2. 根据欧拉定理有：$(kp)^{φ(q)}$ % q = 1即：$ (kp)^{q-1} $ % q = 1.\n> 3. 上式进行h(p-1)次方运算再乘kp后得到：$[ (kp)^{q-1}]^{h(p-1)} $  x kp % q = kp，左边合并指数后得到：$(kp)^{h(p-1)(q-1)+1} $ % q = kp.\n> 4. 从上面我们已知 ed = hφ(n)+1即ed =h(p-1)(q-1)+1，所以上式可简化成：$(kp)^{ed}$ % q = kp.\n> 5. 上式可写成$(kp)^{ed}$ = tq + kp，可以发现，等式左边肯定是p的倍数，右边kp是p的倍数，所以tq也是p的倍数，而p和q互质，所以t一定能被p整除，即一定有 t =t'p，带入可得：$(kp)^{ed}$ = t'pq + kp.\n> 6. 从上面可知m=kp、n=pq，所以带入上式得: $m^{ed}$ = t'n + m，即：$m^{ed}$ % n = m，原式得证！\n\n可以看到在证明解密公式的过程中，我们频繁用到了欧拉函数和欧拉定理，如果没有欧拉函数和欧拉定理也不会有RSA算法的出现，可见理论数学的重要性！\n\n## 加密长度限制\n\n我们再来看第一个问题，由于生成随机的大质数p和q也是需要算法的，当n的长度为8192位时，通过macbook pro实测生成密钥时间在5秒以上，效率直线下降。这样就导致n不能太大，所以加密的文本也不能太长，一般来讲我们有如下两种方式来解决这个问题：\n\n1. **分段加密**：即可以通过将发送的消息分成多段，分别加密，再进行传输。\n2. **结合AES加密**：可通过对称性加密算法AES对长文本进行快速加密，再通过RSA加密算法对AES加密的密钥进行加密。\n\n第二种方式，只有破解加密后的密钥才能解密原文，但要破解加密后的密钥，相当于破解RSA加密，所以这种方式很好的解决了长文本加密的问题，并在实际开发中得到了广泛的应用。\n\n## 展望\n\n到这里RSA加密系列的文章就结束了，我们从密码学的发展，引出了非对称性加密，从而带大家认识了RSA加密的过程，最后剖析了RSA加密的原理，从而更深层次的了解到了RSA加密的安全性。但随着[量子加密](https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%8A%A0%E5%AF%86/11035670?fr=aladdin)的提出，尤其是[秀尔算法](https://www.cnblogs.com/h2zZhou/p/5495732.html)的提出，RSA加密在量子计算机普及后将变得不再安全，相信到那时密码学必会有革命性的变化。","slug":"RSA加密(三) 加密原理","published":1,"updated":"2020-08-18T02:25:58.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnp3000ft57sp7uo538g","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/rsa_lock.jpg-h\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>在上篇文章<strong><a href=\"https://carlwe.com/2019/09/16/RSA%E5%8A%A0%E5%AF%86%28%E4%BA%8C%29%20%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B/\">RSA加密(二)</a></strong>中我们介绍了RSA加密的过程，并留下了三个问题：</p>\n<p><strong>遗留问题</strong>：</p>\n<ul>\n<li>RSA在公钥和密文传输的过程中就真的很安全吗？</li>\n<li>为什么解密的时候原文：m 就等于  $c^d$ % n呢？ </li>\n<li>m&lt;n，这就导致RSA加密的内容长度受到了限制，那如何加密发送一段很长的文本呢？</li>\n</ul>\n<p>在分析安全性之前，我们先简短的回顾下加解密过程：</p>\n<h2 id=\"简单回顾\"><a href=\"#简单回顾\" class=\"headerlink\" title=\"简单回顾\"></a>简单回顾</h2><h3 id=\"1-生成共钥、私钥\"><a href=\"#1-生成共钥、私钥\" class=\"headerlink\" title=\"1.生成共钥、私钥\"></a>1.生成共钥、私钥</h3><ol>\n<li>找出质数p、q，p≠q.</li>\n<li>计算n = p x q.</li>\n<li>计算n的欧拉函数φ(n)=(p-1)(q-1)</li>\n<li>选取整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质，则公钥为:（e,n)</li>\n<li>计算e对于φ(n)的模反元素d，将d和当作私钥:（d,n)</li>\n</ol>\n<h3 id=\"2-加密、解密\"><a href=\"#2-加密、解密\" class=\"headerlink\" title=\"2.加密、解密\"></a>2.加密、解密</h3><ol>\n<li><strong>加密</strong>：用公钥对信息m加密，计算密文：c = $m^e​$ % n.</li>\n<li><strong>解密</strong>：用私钥对密文c解密，计算原文：m =  $c^d$ % n.</li>\n</ol>\n<p>参考上面的加密过程，我们先来看看RSA加密的安全性。</p>\n<h2 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h2><p>说到安全性，首先我们想到的就是如何破解，首先在传输过程中被暴露的信息如下：</p>\n<blockquote>\n<p><strong>公钥</strong>:（e,n) 、 <strong>密文</strong>：c</p>\n</blockquote>\n<p>先来看下解密公式：m =  $c^d$ % n，想要得到信息m，就得知道c、d和n，对比上面截获的内容，c和n都已知，只有d我们不知道，查看上面生成公私钥步骤5，d是e对于φ(n)的模反元素，即有：</p>\n<blockquote>\n<p>ed % φ(n) = 1</p>\n</blockquote>\n<p>e在公钥中我们已知，要求d，所以求出φ(n)就行，那φ(n)又怎么求呢？通过上面生成共私钥步骤3：</p>\n<blockquote>\n<p>φ(n)=(p-1)(q-1)</p>\n</blockquote>\n<p>所以问题变成了，我们只需要求出p和q就可以了，那p和q又怎么求呢，通过上面生成共私钥步骤2：</p>\n<blockquote>\n<p>n = p x q</p>\n</blockquote>\n<p>n在公钥中我们已知，只需要分解n就可以，但在实际应用中，n一般取1024位或更大的2048位，在第一篇文章中我们知道分解大数的质因数是当今三大数学难题之一，所以RSA加密在理论上是安全的。当今人类被报道破解的最大密钥长度是768位，232个十进制数，写下来如下:</p>\n<p><img src=\"https://img.carlwe.com/rsa_bignumber.jpg\" alt=\"\"></p>\n<p>一般认为1024位的密钥基本安全，长度为2048位的密钥极其安全。就拿上述整数来说大小为$10^{232}​$来暴力破解，用当今最快的超级计算机<a href=\"http://www.chinastor.com/hpc-top500/\" target=\"_blank\" rel=\"noopener\">美国Summit</a>，计算速度达到每秒200petaflops（千万亿次）即每秒$2*10^{17}$次，加上高效的质因数分解算法<a href=\"https://www.cnblogs.com/Iamafool/p/10924390.html\" target=\"_blank\" rel=\"noopener\">Pollard Rho算法</a> (时间复杂度为$O(n^{\\frac14})$，计算下来也需要大概 $10^{33}$ 年，(当然实际破解中会用到很多方法大幅降低破解难度)，所以在当下计算质因数分解没有实质性理论突破的时代，只要密钥长度足够长，用RSA加密的信息实际上是不能被解破的。</p>\n<h2 id=\"解密原理\"><a href=\"#解密原理\" class=\"headerlink\" title=\"解密原理\"></a>解密原理</h2><p>根据上面的加解密过程：<strong>加密</strong>：c = $m^e$ % n ，这个过程好理解，几个参数都是计算好的，没什么不好理解，我们来看下解密公式：</p>\n<blockquote>\n<p>$c^d$ % n = m</p>\n</blockquote>\n<p>为什么计算的结果就是原文呢？下面我们来证明下上面的解密公式：</p>\n<ol>\n<li>根据加密公式，可转换为c = $m^e-kn$.</li>\n<li>将上式带入解密公式 m =  $c^d$ % n 得到： $(m^e-kn)^d$ % n = m.</li>\n<li>因为$(m^e-kn)^d$ 中第二项含有kn是n的倍数，所以不管d是多少，乘开后，只有$m^{ed}$项不含有n，而含有n的项都能被n整除，所以上式可以简化成 $m^{ed}$ % n = m.</li>\n<li>上面加密过程第5步求模反元素公式： ed % φ(n) = 1，可写成 ed = hφ(n)+1，将其带入$m^{ed}$ % n = m</li>\n</ol>\n<p><strong>即证明</strong>：$m^{hφ(n)+1}$ % n = m 或 $m^{ed}$ % n = m.</p>\n<p>下面我们分两种情况来证明：</p>\n<ul>\n<li><strong>m、n互质</strong></li>\n</ul>\n<blockquote>\n<ol>\n<li>由欧拉定理可知 $m^{φ(n)}$%n = 1.</li>\n<li>上式可变为：$ (m^{φ(n)})^h$ % n = 1，例如$5^1$%4=1、$5^2$%4=1、$5^3$%4=1…</li>\n<li>$ (m^{φ(n)})^h$ % n = 1 等价于 $m^{hφ(n)}$ % n = 1，可写成$m·m^{hφ(n)}$ % n = m，例如5%4=1、2·5%4=2、3·5%4=3、4·5%4=4</li>\n<li>$m·m^{hφ(n)}$ % n = m 可写成 $m^{hφ(n)+1}$ % n = m，原式得证！</li>\n</ol>\n</blockquote>\n<ul>\n<li><strong>m、n不互质</strong></li>\n</ul>\n<blockquote>\n<ol>\n<li>由加密过程：n = p x q，故n只能被分解成p和q的乘积，因为m和n不互质，故m一定是p或q的倍数，以m=kp为例，此时kp和q互质。</li>\n<li>根据欧拉定理有：$(kp)^{φ(q)}$ % q = 1即：$ (kp)^{q-1} $ % q = 1.</li>\n<li>上式进行h(p-1)次方运算再乘kp后得到：$[ (kp)^{q-1}]^{h(p-1)} $  x kp % q = kp，左边合并指数后得到：$(kp)^{h(p-1)(q-1)+1} $ % q = kp.</li>\n<li>从上面我们已知 ed = hφ(n)+1即ed =h(p-1)(q-1)+1，所以上式可简化成：$(kp)^{ed}$ % q = kp.</li>\n<li>上式可写成$(kp)^{ed}$ = tq + kp，可以发现，等式左边肯定是p的倍数，右边kp是p的倍数，所以tq也是p的倍数，而p和q互质，所以t一定能被p整除，即一定有 t =t’p，带入可得：$(kp)^{ed}$ = t’pq + kp.</li>\n<li>从上面可知m=kp、n=pq，所以带入上式得: $m^{ed}$ = t’n + m，即：$m^{ed}$ % n = m，原式得证！</li>\n</ol>\n</blockquote>\n<p>可以看到在证明解密公式的过程中，我们频繁用到了欧拉函数和欧拉定理，如果没有欧拉函数和欧拉定理也不会有RSA算法的出现，可见理论数学的重要性！</p>\n<h2 id=\"加密长度限制\"><a href=\"#加密长度限制\" class=\"headerlink\" title=\"加密长度限制\"></a>加密长度限制</h2><p>我们再来看第一个问题，由于生成随机的大质数p和q也是需要算法的，当n的长度为8192位时，通过macbook pro实测生成密钥时间在5秒以上，效率直线下降。这样就导致n不能太大，所以加密的文本也不能太长，一般来讲我们有如下两种方式来解决这个问题：</p>\n<ol>\n<li><strong>分段加密</strong>：即可以通过将发送的消息分成多段，分别加密，再进行传输。</li>\n<li><strong>结合AES加密</strong>：可通过对称性加密算法AES对长文本进行快速加密，再通过RSA加密算法对AES加密的密钥进行加密。</li>\n</ol>\n<p>第二种方式，只有破解加密后的密钥才能解密原文，但要破解加密后的密钥，相当于破解RSA加密，所以这种方式很好的解决了长文本加密的问题，并在实际开发中得到了广泛的应用。</p>\n<h2 id=\"展望\"><a href=\"#展望\" class=\"headerlink\" title=\"展望\"></a>展望</h2><p>到这里RSA加密系列的文章就结束了，我们从密码学的发展，引出了非对称性加密，从而带大家认识了RSA加密的过程，最后剖析了RSA加密的原理，从而更深层次的了解到了RSA加密的安全性。但随着<a href=\"https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%8A%A0%E5%AF%86/11035670?fr=aladdin\" target=\"_blank\" rel=\"noopener\">量子加密</a>的提出，尤其是<a href=\"https://www.cnblogs.com/h2zZhou/p/5495732.html\" target=\"_blank\" rel=\"noopener\">秀尔算法</a>的提出，RSA加密在量子计算机普及后将变得不再安全，相信到那时密码学必会有革命性的变化。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/rsa_lock.jpg-h\" alt=\"\"></p>","more":"<p>在上篇文章<strong><a href=\"https://carlwe.com/2019/09/16/RSA%E5%8A%A0%E5%AF%86%28%E4%BA%8C%29%20%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B/\">RSA加密(二)</a></strong>中我们介绍了RSA加密的过程，并留下了三个问题：</p>\n<p><strong>遗留问题</strong>：</p>\n<ul>\n<li>RSA在公钥和密文传输的过程中就真的很安全吗？</li>\n<li>为什么解密的时候原文：m 就等于  $c^d$ % n呢？ </li>\n<li>m&lt;n，这就导致RSA加密的内容长度受到了限制，那如何加密发送一段很长的文本呢？</li>\n</ul>\n<p>在分析安全性之前，我们先简短的回顾下加解密过程：</p>\n<h2 id=\"简单回顾\"><a href=\"#简单回顾\" class=\"headerlink\" title=\"简单回顾\"></a>简单回顾</h2><h3 id=\"1-生成共钥、私钥\"><a href=\"#1-生成共钥、私钥\" class=\"headerlink\" title=\"1.生成共钥、私钥\"></a>1.生成共钥、私钥</h3><ol>\n<li>找出质数p、q，p≠q.</li>\n<li>计算n = p x q.</li>\n<li>计算n的欧拉函数φ(n)=(p-1)(q-1)</li>\n<li>选取整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质，则公钥为:（e,n)</li>\n<li>计算e对于φ(n)的模反元素d，将d和当作私钥:（d,n)</li>\n</ol>\n<h3 id=\"2-加密、解密\"><a href=\"#2-加密、解密\" class=\"headerlink\" title=\"2.加密、解密\"></a>2.加密、解密</h3><ol>\n<li><strong>加密</strong>：用公钥对信息m加密，计算密文：c = $m^e​$ % n.</li>\n<li><strong>解密</strong>：用私钥对密文c解密，计算原文：m =  $c^d$ % n.</li>\n</ol>\n<p>参考上面的加密过程，我们先来看看RSA加密的安全性。</p>\n<h2 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h2><p>说到安全性，首先我们想到的就是如何破解，首先在传输过程中被暴露的信息如下：</p>\n<blockquote>\n<p><strong>公钥</strong>:（e,n) 、 <strong>密文</strong>：c</p>\n</blockquote>\n<p>先来看下解密公式：m =  $c^d$ % n，想要得到信息m，就得知道c、d和n，对比上面截获的内容，c和n都已知，只有d我们不知道，查看上面生成公私钥步骤5，d是e对于φ(n)的模反元素，即有：</p>\n<blockquote>\n<p>ed % φ(n) = 1</p>\n</blockquote>\n<p>e在公钥中我们已知，要求d，所以求出φ(n)就行，那φ(n)又怎么求呢？通过上面生成共私钥步骤3：</p>\n<blockquote>\n<p>φ(n)=(p-1)(q-1)</p>\n</blockquote>\n<p>所以问题变成了，我们只需要求出p和q就可以了，那p和q又怎么求呢，通过上面生成共私钥步骤2：</p>\n<blockquote>\n<p>n = p x q</p>\n</blockquote>\n<p>n在公钥中我们已知，只需要分解n就可以，但在实际应用中，n一般取1024位或更大的2048位，在第一篇文章中我们知道分解大数的质因数是当今三大数学难题之一，所以RSA加密在理论上是安全的。当今人类被报道破解的最大密钥长度是768位，232个十进制数，写下来如下:</p>\n<p><img src=\"https://img.carlwe.com/rsa_bignumber.jpg\" alt=\"\"></p>\n<p>一般认为1024位的密钥基本安全，长度为2048位的密钥极其安全。就拿上述整数来说大小为$10^{232}​$来暴力破解，用当今最快的超级计算机<a href=\"http://www.chinastor.com/hpc-top500/\" target=\"_blank\" rel=\"noopener\">美国Summit</a>，计算速度达到每秒200petaflops（千万亿次）即每秒$2*10^{17}$次，加上高效的质因数分解算法<a href=\"https://www.cnblogs.com/Iamafool/p/10924390.html\" target=\"_blank\" rel=\"noopener\">Pollard Rho算法</a> (时间复杂度为$O(n^{\\frac14})$，计算下来也需要大概 $10^{33}$ 年，(当然实际破解中会用到很多方法大幅降低破解难度)，所以在当下计算质因数分解没有实质性理论突破的时代，只要密钥长度足够长，用RSA加密的信息实际上是不能被解破的。</p>\n<h2 id=\"解密原理\"><a href=\"#解密原理\" class=\"headerlink\" title=\"解密原理\"></a>解密原理</h2><p>根据上面的加解密过程：<strong>加密</strong>：c = $m^e$ % n ，这个过程好理解，几个参数都是计算好的，没什么不好理解，我们来看下解密公式：</p>\n<blockquote>\n<p>$c^d$ % n = m</p>\n</blockquote>\n<p>为什么计算的结果就是原文呢？下面我们来证明下上面的解密公式：</p>\n<ol>\n<li>根据加密公式，可转换为c = $m^e-kn$.</li>\n<li>将上式带入解密公式 m =  $c^d$ % n 得到： $(m^e-kn)^d$ % n = m.</li>\n<li>因为$(m^e-kn)^d$ 中第二项含有kn是n的倍数，所以不管d是多少，乘开后，只有$m^{ed}$项不含有n，而含有n的项都能被n整除，所以上式可以简化成 $m^{ed}$ % n = m.</li>\n<li>上面加密过程第5步求模反元素公式： ed % φ(n) = 1，可写成 ed = hφ(n)+1，将其带入$m^{ed}$ % n = m</li>\n</ol>\n<p><strong>即证明</strong>：$m^{hφ(n)+1}$ % n = m 或 $m^{ed}$ % n = m.</p>\n<p>下面我们分两种情况来证明：</p>\n<ul>\n<li><strong>m、n互质</strong></li>\n</ul>\n<blockquote>\n<ol>\n<li>由欧拉定理可知 $m^{φ(n)}$%n = 1.</li>\n<li>上式可变为：$ (m^{φ(n)})^h$ % n = 1，例如$5^1$%4=1、$5^2$%4=1、$5^3$%4=1…</li>\n<li>$ (m^{φ(n)})^h$ % n = 1 等价于 $m^{hφ(n)}$ % n = 1，可写成$m·m^{hφ(n)}$ % n = m，例如5%4=1、2·5%4=2、3·5%4=3、4·5%4=4</li>\n<li>$m·m^{hφ(n)}$ % n = m 可写成 $m^{hφ(n)+1}$ % n = m，原式得证！</li>\n</ol>\n</blockquote>\n<ul>\n<li><strong>m、n不互质</strong></li>\n</ul>\n<blockquote>\n<ol>\n<li>由加密过程：n = p x q，故n只能被分解成p和q的乘积，因为m和n不互质，故m一定是p或q的倍数，以m=kp为例，此时kp和q互质。</li>\n<li>根据欧拉定理有：$(kp)^{φ(q)}$ % q = 1即：$ (kp)^{q-1} $ % q = 1.</li>\n<li>上式进行h(p-1)次方运算再乘kp后得到：$[ (kp)^{q-1}]^{h(p-1)} $  x kp % q = kp，左边合并指数后得到：$(kp)^{h(p-1)(q-1)+1} $ % q = kp.</li>\n<li>从上面我们已知 ed = hφ(n)+1即ed =h(p-1)(q-1)+1，所以上式可简化成：$(kp)^{ed}$ % q = kp.</li>\n<li>上式可写成$(kp)^{ed}$ = tq + kp，可以发现，等式左边肯定是p的倍数，右边kp是p的倍数，所以tq也是p的倍数，而p和q互质，所以t一定能被p整除，即一定有 t =t’p，带入可得：$(kp)^{ed}$ = t’pq + kp.</li>\n<li>从上面可知m=kp、n=pq，所以带入上式得: $m^{ed}$ = t’n + m，即：$m^{ed}$ % n = m，原式得证！</li>\n</ol>\n</blockquote>\n<p>可以看到在证明解密公式的过程中，我们频繁用到了欧拉函数和欧拉定理，如果没有欧拉函数和欧拉定理也不会有RSA算法的出现，可见理论数学的重要性！</p>\n<h2 id=\"加密长度限制\"><a href=\"#加密长度限制\" class=\"headerlink\" title=\"加密长度限制\"></a>加密长度限制</h2><p>我们再来看第一个问题，由于生成随机的大质数p和q也是需要算法的，当n的长度为8192位时，通过macbook pro实测生成密钥时间在5秒以上，效率直线下降。这样就导致n不能太大，所以加密的文本也不能太长，一般来讲我们有如下两种方式来解决这个问题：</p>\n<ol>\n<li><strong>分段加密</strong>：即可以通过将发送的消息分成多段，分别加密，再进行传输。</li>\n<li><strong>结合AES加密</strong>：可通过对称性加密算法AES对长文本进行快速加密，再通过RSA加密算法对AES加密的密钥进行加密。</li>\n</ol>\n<p>第二种方式，只有破解加密后的密钥才能解密原文，但要破解加密后的密钥，相当于破解RSA加密，所以这种方式很好的解决了长文本加密的问题，并在实际开发中得到了广泛的应用。</p>\n<h2 id=\"展望\"><a href=\"#展望\" class=\"headerlink\" title=\"展望\"></a>展望</h2><p>到这里RSA加密系列的文章就结束了，我们从密码学的发展，引出了非对称性加密，从而带大家认识了RSA加密的过程，最后剖析了RSA加密的原理，从而更深层次的了解到了RSA加密的安全性。但随着<a href=\"https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E5%8A%A0%E5%AF%86/11035670?fr=aladdin\" target=\"_blank\" rel=\"noopener\">量子加密</a>的提出，尤其是<a href=\"https://www.cnblogs.com/h2zZhou/p/5495732.html\" target=\"_blank\" rel=\"noopener\">秀尔算法</a>的提出，RSA加密在量子计算机普及后将变得不再安全，相信到那时密码学必会有革命性的变化。</p>"},{"title":"二维码为何长这个样子","date":"2018-12-25T07:34:59.000Z","_content":"\n![](https://img.carlwe.com/qr_main_logo.png-h)\n\n> 二维码又称二维条码，最初在1994年由日本DENSO WAVE公司腾弘原团队发明。\n\n<!--more-->\n\n## 简介\n\n二维码又称二维条码，它是用特定的几何图形按一定规律在平面（二维方向）上分布的黑白相间的图形。相比一维的条码，二维码能够在横向和纵向两个方位同时表达信息，因此能在很小的面积内表达大量的信息，同时可以有较高的容错能力。最初在1994年由日本DENSO WAVE公司腾弘原团队发明，后来DENSO WAVE 公司宣布，不行使本公司就标准QR码拥有的专利权(专利第2938338号)，目前，QR码已经在国家标准和国际标准中实现标准化，任何人都可以随意查看该标准。\n\n### 二维码分类\n\n* 堆叠式/行排式二维条码\n\n  > 其编码原理是建立在一维条码基础之上，按需要堆积成二行或多行。它在编码设计、校验原理、识读方式等方面继承了一维条码的一些特点，但由于行数的增加，需要对行进行判定，其译码算法不完全相同于一维条码。有代表性的行排式二维条码有：Code 16K、Code 49、PDF417、MicroPDF417 等。\n\n* 矩阵式二维码\n\n  > 最流行的就是QR CODE ,我们常说的二维码大多数都是他。在矩阵相应元素位置上，用点（方点、圆点或其他形状）的出现表示二进制“1”，点的不出现表示二进制的“0”，点的排列组合确定了矩阵式二维条码所代表的意义。矩阵式二维条码是建立在计算机图像处理技术、组合编码原理等基础上的一种新型图形符号自动识读处理码制。具有代表性的矩阵式二维条码有：Code One、MaxiCode、QR Code、 Data Matrix、Han Xin Code、Grid Matrix 等。\n\n  ![pdf417-qrcode](https://img.carlwe.com/qr_pdf417-qrcode.png)\n\nQRCode官网：www.qrcode.com\n\n### 二维码的特点\n\n* 存储大容量信息\n\n  >传统条形码最多只能支持20位左右的信息，二维码则最多可以支持7089个数字，4296个字母，1817个汉字。\n\n  ![moredata](https://img.carlwe.com/qr_performanceImage.png)\n\n* 小空间内打印\n\n  ![对比](https://img.carlwe.com/qr_duibi.png)\n\n* 有效表现各种字母\n\n  >QR码是日本国产的二维码，因此更适合处理日文字母和汉字。QR码字集规格定义是按照日本标准“JIS第一级和第二级的汉字”制定的，因此在日语处理方面，每一个全角字母和汉字都用13比特的数据处理，效率较高，与其他二维码相比，可以多存储20%以上的信息。\n\n  ![o ya su mi na sai](https://img.carlwe.com/qr_goodnight.png)\n\n* 抗破损能力强\n\n  > QR码具备“纠错功能”，即使部分编码变脏或破损，也可以恢复数据。数据恢复以码字为单位（是组成内部数据的单位，在QR码的情况下，每8比特代表1码字），最多可以纠错约30%（根据变脏和破损程度的不同，也存在无法恢复的情况）。\n\n  ![damageImage](https://img.carlwe.com/qr_damageImage.png)\n\n* 任意方向识别\n\n  > QR码从360°任一方向均可快速读取。原因在于QR码中的3处定位图案，可以帮助QR码不受背景样式的影响，实现快速稳定的读取。\n\n  ![symbolImage](https://img.carlwe.com/qr_symbolImage.png)\n\n* 支持数据合并功能\n\n  >QR码可以将数据分割为多个编码，最多支持16个QR码。使用这一功能，还可以在狭长区域内打印QR码。另外，也可以把多个分割编码合并为单个数据。\n\n  ![](https://img.carlwe.com/qr_commonDataImage.png)\n\n### 二维码的版本与纠错能力\n\n#### 二维码版本\n\n> 二维码一共有40个尺寸，官方叫版本Version。Version 1是21 x 21的矩阵，Version 2是 25 x 25的矩阵，Version 3是29的尺寸，每增加一个version，就会增加4的尺寸，公式是：(V-1)*4 + 21（V是版本号） 最高Version 40，(40-1)*4+21 = 177，所以最高是177 x 177 的正方形。\n\n![version](https://img.carlwe.com/qr_versionVarietyImage.png)\n\n#### 二维码纠错能力\n\n>QR码具有“纠错功能”。即使编码变脏或破损，也可自动恢复数据。这一“纠错能力”具备4个级别，用户可根据使用环境选择相应的级别。调高级别，纠错能力也相应提高，但由于数据量会随之增加，编码尺寸也也会变大。 \n>用户应综合考虑使用环境、编码尺寸等因素后选择相应的级别。 在工厂等容易沾染赃物的环境下，可以选择级别Q或H，在不那么脏的环境下，且数据量较多的时候，也可以选择级别L。一般情况下用户大多选择级别M(15%)。\n\n![](https://img.carlwe.com/qr_Qrcode_jiucuo.png)\n\n- 纠错使用RS编码\n\n> RS编码，又称里所码，即Reed-solomon codes，是一种前向纠错的信道编码，对由校正过采样数据所产生的多项式有效。当接收器正确的收到足够的点后，它就可以恢复原来的多项式，即使接收到的多项式上有很多点被噪声干扰失真。\n\n#### 二维码尺寸选择\n\n>QR码的各个版本结合数据量、字符类型和纠错级别，均设有相对应的最多输入字符数。也就是说，如果增加数据量，则需要使用更多的码元来组成QR码，QR码就会变得更大。\n>\n>例如，需要输入的数据为100位的数字时，通过以下步骤来选定。 \n>1．假设要输入的数据种类为“数字” 。\n>2．从“L”、 “M”、 “Q”、 “H”中选择纠错级别。（假设选择“M”） \n>3．查看下表，先从数字列找出数字为100以上且接近100的，其次找出纠错级别“M”，两者交叉的部分就是最佳版本。\n\n![](https://img.carlwe.com/qr_select_version.png)\n\n### 二维码的构成\n\n![二维码构成](https://img.carlwe.com/qr_qrcode_explain.png)\n\n* 位置探测图形、位置探测图形分隔符、定位图形：\n\n>用于对二维码的定位，对每个QR码来说，位置都是固定存在的，只是大小规格会有所差异； 这三个定位图案有白边即位置探测图形分隔符，之所以三个而不是四个，因为三个就可以标识一个矩形了。\n\n* 校正图形\n\n>规格确定，校正图形的数量和位置也就确定了，Version 2以上（包括Version2）的二维码才需要这个。\n\n* 格式信息\n\n> 表示该二维码的纠错级别，分为L、M、Q、H，存在于所有的尺寸中，用于存放一些格式化数据的。\n\n* 版本信息\n\n> 即二维码的规格，QR码符号共有40种规格的矩阵（一般为黑白色），从21x21（版本1），到177x177（版本40），每一版本符号比前一版本 每边增加4个模块。在 >= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。\n\n* 数据和纠错码字\n\n> 实际保存的二维码信息，和纠错码字（用于修正二维码损坏带来的错误）。\n\n\n\n## 二维码的生成过程\n\n### 编码过程\n\n#### 编码类型\n\nQR码支持数字编码、字符编码、字节编码、日文编码、特殊字符编码、混合编码等。\n\n* 数字编码\n\n> 从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸。\n\n* 字符编码\n\n> 包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）\n\n![编码](https://img.carlwe.com/qr_Alphanumeric-mode.png)\n\n![](https://img.carlwe.com/qr_Mode-Indicator.png)\n\n#### 字符编码示例：\n\n* 一、生成数据码\n\n>在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42\n>\n>1. 从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)\n>2. 两两分组: (10,12) (41,4) (2)\n>3. 把每一组转成11bits的二进制:\n>\n>(10,12) 10x45+12 等于 462 转成 00111001110\n>(41,4) 41x45+4 等于 1849 转成 11100111001\n>(2) 等于 2 转成 000010\n>\n>4. 把这些二进制连接起来：00111001110 11100111001 000010\n>\n>5. 把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101\n>\n>6. 在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010\n>\n>7. 添加结束符0000\n>\n>8. 8bits重排，如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组 00100000 00101001 11001110 11100111 00100001 00000000\n>\n>9. 补齐码，最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 关于每一个Version的每一种纠错级别的最大Bits限制，可以参看[QR Code Spec]的第28页到32页的Table-7一表。\n>\n>   按照最低21*21H级别纠错规格72个bits,一共需要9组 还差三个，补齐后即可得到数据码：00100000 00101001 11001110 11100111 00100001 00000000 11101100 00010001 11101100 \n>\n>   上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。\n\n* 二、通过数据码生成纠错码\n\n>首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看[QR Code Spec]的第33页到44页的Table-13到Table-22的定义表。注意最后两列：\n>\n>* **Number of Error Code Correction Blocks** ：需要分多少个块\n>* **Error Correction Code Per Blocks**：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。\n>\n>![](https://img.carlwe.com/qr_Error-Correction-Blocks.png)\n>\n>例如：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）\n>\n>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\n>\n>![](https://img.carlwe.com/qr_jiucuo.png)\n>\n>注：二维码的纠错码主要是通过[Reed-Solomon error correction](http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction)（里德-所罗门纠错算法）来实现的。\n>\n>可参考：https://blog.csdn.net/liubin1991liubin/article/details/78989043，简单说就是通过算法加入更多的字符后重新编码，增强容错性，使得最终的内容即使部分丢失也能够被还原。\n\n* 三、最终编码\n\n>二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：\n>\n>对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。假如我们用HELLO WORLD的字符串的数据码：\n>\n>00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 **11101100 00010001 11101100**\n>\n>Data Codewords如下：\n>\n>| 块 1 | 67   | 85   | 70   | 134  | 87   | 38   | 85   | 194  | 119  | 50   | 6    | 18   | 6    | 103  | 38   |      |\n>| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n>| 块 2 | 246  | 246  | 66   | 7    | 118  | 134  | 242  | 7    | 38   | 86   | 22   | 198  | 199  | 146  | 6    |      |\n>| 块 3 | 182  | 230  | 247  | 119  | 50   | 7    | 118  | 134  | 87   | 38   | 82   | 6    | 134  | 151  | 50   | 7    |\n>| 块 4 | 70   | 247  | 118  | 86   | 194  | 6    | 151  | 50   | 16   | 236  | 17   | 236  | 17   | 236  | 17   | 236  |\n>\n>先竖再横向：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236\n>\n>对于纠错码，也是一样：\n>\n>| 块 1 | 213  | 199  | 11   | 45   | 115  | 247  | 241  | 223  | 229  | 248  | 154  | 117  | 154  | 111  | 86   | 161  | 111  | 39   |\n>| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n>| 块 2 | 87   | 204  | 96   | 60   | 202  | 182  | 124  | 157  | 200  | 134  | 27   | 129  | 209  | 17   | 163  | 163  | 120  | 133  |\n>| 块 3 | 148  | 116  | 177  | 212  | 76   | 133  | 75   | 242  | 238  | 76   | 195  | 230  | 189  | 10   | 108  | 240  | 192  | 141  |\n>| 块 4 | 235  | 159  | 5    | 173  | 24   | 147  | 59   | 33   | 106  | 40   | 255  | 172  | 82   | 2    | 131  | 32   | 178  | 236  |\n>\n>和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236\n>\n>然后，再把这两组放在一起（纠错码放在数据码之后）得到：\n>\n>67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236\n>\n>这就是我们的数据区。\n\n### 绘制二维码\n\n先看之前这个图\n\n![二维码构成](https://img.carlwe.com/qr_qrcode_explain.png)\n\n#### 添加位置探测图形\n\n> 首先，先把位置探测图形图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大7*7）\n\n![](https://img.carlwe.com/qr_finder.png)\n\n#### 绘制校正图形（ 5*5）\n\n![](https://img.carlwe.com/qr_alignment-pattern.png)\n\n\n\n> 关于Alignment的位置，可以查看[QR Code Spec]的第81页的Table-E.1的定义表（下表是不完全表格）\n\n![](https://img.carlwe.com/qr_Alignment-Position.png)\n\n> 下图是根据上述表格中的Version8的一个例子（6，24，42）\n\n![](https://img.carlwe.com/qr_alignment-example.png)\n\n#### 绘制定位图形\n\n> 接下来是定位图形的线。\n\n![](https://img.carlwe.com/qr_Timing-Pattern.png)\n\n> 再接下来是格式信息，下图中的蓝色部分。\n\n![](https://img.carlwe.com/qr_Format-Information.png)\n\n> 格式信息是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，会永远出现）\n\n![](https://img.carlwe.com/qr_Format-Info-bits-postion.png)\n\n>这15个bits中包括：\n>\n>- 5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask\n>- 10个纠错bits。主要通过BCH Code来计算\n>\n>然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。\n\n![](https://img.carlwe.com/qr_Format-Information-Example.png)\n\n> 错误级别：\n\n![](https://img.carlwe.com/qr_Error-Correction-Indicator-Code.png)\n\n#### 添加版本信息\n\n> （版本7以后需要这个编码），下图中的蓝色部分。\n\n![](https://img.carlwe.com/qr_Version-Information.png)\n\n> 版本信息 一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例\n\n![](https://img.carlwe.com/qr_Version-Information-Example.png)\n\n> 而其填充位置如下图：\n\n![](https://img.carlwe.com/qr_Version-Information-Position.png)\n\n#### 绘制数据和数据纠错码\n\n> 然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。\n\n![](https://img.carlwe.com/qr_Data-Placement.png)\n\n#### 转换为掩码图案\n\n>这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作,QR的Spec中说了,QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（**注：选择一个合适的Mask也是有算法的**）\n\n\n\n![](https://img.carlwe.com/qr_masking-pattern.png)\n\n> 其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）\n\n![](https://img.carlwe.com/qr_Mask-Pattern-Code.png)\n\n> 下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。\n\n![](https://img.carlwe.com/qr_Masking-Examples.png)\n\n> Mask过后的二维码就成最终的图了。\n\n\n\n## 总结\n\n本文主要介绍了二维码的一些基础知识，同时着重介绍了我们所看到的二维码是如何生成的，看完之后相信你应该知道为什么二维码都长这个样子啦！其实还有一个问题没有讲，那就是当我们拿起手机扫描二维码的时候是如何识别二维码的信息的，但相信如果你明白了生成的过程，二维码能够被识别应该也难不倒你了。","source":"_posts/二维码为何长这个样子.md","raw":"---\ntitle: 二维码为何长这个样子\ndate: 2018-12-25 15:34:59\ntags: 科技\n---\n\n![](https://img.carlwe.com/qr_main_logo.png-h)\n\n> 二维码又称二维条码，最初在1994年由日本DENSO WAVE公司腾弘原团队发明。\n\n<!--more-->\n\n## 简介\n\n二维码又称二维条码，它是用特定的几何图形按一定规律在平面（二维方向）上分布的黑白相间的图形。相比一维的条码，二维码能够在横向和纵向两个方位同时表达信息，因此能在很小的面积内表达大量的信息，同时可以有较高的容错能力。最初在1994年由日本DENSO WAVE公司腾弘原团队发明，后来DENSO WAVE 公司宣布，不行使本公司就标准QR码拥有的专利权(专利第2938338号)，目前，QR码已经在国家标准和国际标准中实现标准化，任何人都可以随意查看该标准。\n\n### 二维码分类\n\n* 堆叠式/行排式二维条码\n\n  > 其编码原理是建立在一维条码基础之上，按需要堆积成二行或多行。它在编码设计、校验原理、识读方式等方面继承了一维条码的一些特点，但由于行数的增加，需要对行进行判定，其译码算法不完全相同于一维条码。有代表性的行排式二维条码有：Code 16K、Code 49、PDF417、MicroPDF417 等。\n\n* 矩阵式二维码\n\n  > 最流行的就是QR CODE ,我们常说的二维码大多数都是他。在矩阵相应元素位置上，用点（方点、圆点或其他形状）的出现表示二进制“1”，点的不出现表示二进制的“0”，点的排列组合确定了矩阵式二维条码所代表的意义。矩阵式二维条码是建立在计算机图像处理技术、组合编码原理等基础上的一种新型图形符号自动识读处理码制。具有代表性的矩阵式二维条码有：Code One、MaxiCode、QR Code、 Data Matrix、Han Xin Code、Grid Matrix 等。\n\n  ![pdf417-qrcode](https://img.carlwe.com/qr_pdf417-qrcode.png)\n\nQRCode官网：www.qrcode.com\n\n### 二维码的特点\n\n* 存储大容量信息\n\n  >传统条形码最多只能支持20位左右的信息，二维码则最多可以支持7089个数字，4296个字母，1817个汉字。\n\n  ![moredata](https://img.carlwe.com/qr_performanceImage.png)\n\n* 小空间内打印\n\n  ![对比](https://img.carlwe.com/qr_duibi.png)\n\n* 有效表现各种字母\n\n  >QR码是日本国产的二维码，因此更适合处理日文字母和汉字。QR码字集规格定义是按照日本标准“JIS第一级和第二级的汉字”制定的，因此在日语处理方面，每一个全角字母和汉字都用13比特的数据处理，效率较高，与其他二维码相比，可以多存储20%以上的信息。\n\n  ![o ya su mi na sai](https://img.carlwe.com/qr_goodnight.png)\n\n* 抗破损能力强\n\n  > QR码具备“纠错功能”，即使部分编码变脏或破损，也可以恢复数据。数据恢复以码字为单位（是组成内部数据的单位，在QR码的情况下，每8比特代表1码字），最多可以纠错约30%（根据变脏和破损程度的不同，也存在无法恢复的情况）。\n\n  ![damageImage](https://img.carlwe.com/qr_damageImage.png)\n\n* 任意方向识别\n\n  > QR码从360°任一方向均可快速读取。原因在于QR码中的3处定位图案，可以帮助QR码不受背景样式的影响，实现快速稳定的读取。\n\n  ![symbolImage](https://img.carlwe.com/qr_symbolImage.png)\n\n* 支持数据合并功能\n\n  >QR码可以将数据分割为多个编码，最多支持16个QR码。使用这一功能，还可以在狭长区域内打印QR码。另外，也可以把多个分割编码合并为单个数据。\n\n  ![](https://img.carlwe.com/qr_commonDataImage.png)\n\n### 二维码的版本与纠错能力\n\n#### 二维码版本\n\n> 二维码一共有40个尺寸，官方叫版本Version。Version 1是21 x 21的矩阵，Version 2是 25 x 25的矩阵，Version 3是29的尺寸，每增加一个version，就会增加4的尺寸，公式是：(V-1)*4 + 21（V是版本号） 最高Version 40，(40-1)*4+21 = 177，所以最高是177 x 177 的正方形。\n\n![version](https://img.carlwe.com/qr_versionVarietyImage.png)\n\n#### 二维码纠错能力\n\n>QR码具有“纠错功能”。即使编码变脏或破损，也可自动恢复数据。这一“纠错能力”具备4个级别，用户可根据使用环境选择相应的级别。调高级别，纠错能力也相应提高，但由于数据量会随之增加，编码尺寸也也会变大。 \n>用户应综合考虑使用环境、编码尺寸等因素后选择相应的级别。 在工厂等容易沾染赃物的环境下，可以选择级别Q或H，在不那么脏的环境下，且数据量较多的时候，也可以选择级别L。一般情况下用户大多选择级别M(15%)。\n\n![](https://img.carlwe.com/qr_Qrcode_jiucuo.png)\n\n- 纠错使用RS编码\n\n> RS编码，又称里所码，即Reed-solomon codes，是一种前向纠错的信道编码，对由校正过采样数据所产生的多项式有效。当接收器正确的收到足够的点后，它就可以恢复原来的多项式，即使接收到的多项式上有很多点被噪声干扰失真。\n\n#### 二维码尺寸选择\n\n>QR码的各个版本结合数据量、字符类型和纠错级别，均设有相对应的最多输入字符数。也就是说，如果增加数据量，则需要使用更多的码元来组成QR码，QR码就会变得更大。\n>\n>例如，需要输入的数据为100位的数字时，通过以下步骤来选定。 \n>1．假设要输入的数据种类为“数字” 。\n>2．从“L”、 “M”、 “Q”、 “H”中选择纠错级别。（假设选择“M”） \n>3．查看下表，先从数字列找出数字为100以上且接近100的，其次找出纠错级别“M”，两者交叉的部分就是最佳版本。\n\n![](https://img.carlwe.com/qr_select_version.png)\n\n### 二维码的构成\n\n![二维码构成](https://img.carlwe.com/qr_qrcode_explain.png)\n\n* 位置探测图形、位置探测图形分隔符、定位图形：\n\n>用于对二维码的定位，对每个QR码来说，位置都是固定存在的，只是大小规格会有所差异； 这三个定位图案有白边即位置探测图形分隔符，之所以三个而不是四个，因为三个就可以标识一个矩形了。\n\n* 校正图形\n\n>规格确定，校正图形的数量和位置也就确定了，Version 2以上（包括Version2）的二维码才需要这个。\n\n* 格式信息\n\n> 表示该二维码的纠错级别，分为L、M、Q、H，存在于所有的尺寸中，用于存放一些格式化数据的。\n\n* 版本信息\n\n> 即二维码的规格，QR码符号共有40种规格的矩阵（一般为黑白色），从21x21（版本1），到177x177（版本40），每一版本符号比前一版本 每边增加4个模块。在 >= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。\n\n* 数据和纠错码字\n\n> 实际保存的二维码信息，和纠错码字（用于修正二维码损坏带来的错误）。\n\n\n\n## 二维码的生成过程\n\n### 编码过程\n\n#### 编码类型\n\nQR码支持数字编码、字符编码、字节编码、日文编码、特殊字符编码、混合编码等。\n\n* 数字编码\n\n> 从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸。\n\n* 字符编码\n\n> 包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）\n\n![编码](https://img.carlwe.com/qr_Alphanumeric-mode.png)\n\n![](https://img.carlwe.com/qr_Mode-Indicator.png)\n\n#### 字符编码示例：\n\n* 一、生成数据码\n\n>在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42\n>\n>1. 从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)\n>2. 两两分组: (10,12) (41,4) (2)\n>3. 把每一组转成11bits的二进制:\n>\n>(10,12) 10x45+12 等于 462 转成 00111001110\n>(41,4) 41x45+4 等于 1849 转成 11100111001\n>(2) 等于 2 转成 000010\n>\n>4. 把这些二进制连接起来：00111001110 11100111001 000010\n>\n>5. 把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101\n>\n>6. 在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010\n>\n>7. 添加结束符0000\n>\n>8. 8bits重排，如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组 00100000 00101001 11001110 11100111 00100001 00000000\n>\n>9. 补齐码，最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 关于每一个Version的每一种纠错级别的最大Bits限制，可以参看[QR Code Spec]的第28页到32页的Table-7一表。\n>\n>   按照最低21*21H级别纠错规格72个bits,一共需要9组 还差三个，补齐后即可得到数据码：00100000 00101001 11001110 11100111 00100001 00000000 11101100 00010001 11101100 \n>\n>   上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。\n\n* 二、通过数据码生成纠错码\n\n>首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看[QR Code Spec]的第33页到44页的Table-13到Table-22的定义表。注意最后两列：\n>\n>* **Number of Error Code Correction Blocks** ：需要分多少个块\n>* **Error Correction Code Per Blocks**：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。\n>\n>![](https://img.carlwe.com/qr_Error-Correction-Blocks.png)\n>\n>例如：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）\n>\n>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\n>\n>![](https://img.carlwe.com/qr_jiucuo.png)\n>\n>注：二维码的纠错码主要是通过[Reed-Solomon error correction](http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction)（里德-所罗门纠错算法）来实现的。\n>\n>可参考：https://blog.csdn.net/liubin1991liubin/article/details/78989043，简单说就是通过算法加入更多的字符后重新编码，增强容错性，使得最终的内容即使部分丢失也能够被还原。\n\n* 三、最终编码\n\n>二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：\n>\n>对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。假如我们用HELLO WORLD的字符串的数据码：\n>\n>00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 **11101100 00010001 11101100**\n>\n>Data Codewords如下：\n>\n>| 块 1 | 67   | 85   | 70   | 134  | 87   | 38   | 85   | 194  | 119  | 50   | 6    | 18   | 6    | 103  | 38   |      |\n>| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n>| 块 2 | 246  | 246  | 66   | 7    | 118  | 134  | 242  | 7    | 38   | 86   | 22   | 198  | 199  | 146  | 6    |      |\n>| 块 3 | 182  | 230  | 247  | 119  | 50   | 7    | 118  | 134  | 87   | 38   | 82   | 6    | 134  | 151  | 50   | 7    |\n>| 块 4 | 70   | 247  | 118  | 86   | 194  | 6    | 151  | 50   | 16   | 236  | 17   | 236  | 17   | 236  | 17   | 236  |\n>\n>先竖再横向：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236\n>\n>对于纠错码，也是一样：\n>\n>| 块 1 | 213  | 199  | 11   | 45   | 115  | 247  | 241  | 223  | 229  | 248  | 154  | 117  | 154  | 111  | 86   | 161  | 111  | 39   |\n>| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n>| 块 2 | 87   | 204  | 96   | 60   | 202  | 182  | 124  | 157  | 200  | 134  | 27   | 129  | 209  | 17   | 163  | 163  | 120  | 133  |\n>| 块 3 | 148  | 116  | 177  | 212  | 76   | 133  | 75   | 242  | 238  | 76   | 195  | 230  | 189  | 10   | 108  | 240  | 192  | 141  |\n>| 块 4 | 235  | 159  | 5    | 173  | 24   | 147  | 59   | 33   | 106  | 40   | 255  | 172  | 82   | 2    | 131  | 32   | 178  | 236  |\n>\n>和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236\n>\n>然后，再把这两组放在一起（纠错码放在数据码之后）得到：\n>\n>67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236\n>\n>这就是我们的数据区。\n\n### 绘制二维码\n\n先看之前这个图\n\n![二维码构成](https://img.carlwe.com/qr_qrcode_explain.png)\n\n#### 添加位置探测图形\n\n> 首先，先把位置探测图形图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大7*7）\n\n![](https://img.carlwe.com/qr_finder.png)\n\n#### 绘制校正图形（ 5*5）\n\n![](https://img.carlwe.com/qr_alignment-pattern.png)\n\n\n\n> 关于Alignment的位置，可以查看[QR Code Spec]的第81页的Table-E.1的定义表（下表是不完全表格）\n\n![](https://img.carlwe.com/qr_Alignment-Position.png)\n\n> 下图是根据上述表格中的Version8的一个例子（6，24，42）\n\n![](https://img.carlwe.com/qr_alignment-example.png)\n\n#### 绘制定位图形\n\n> 接下来是定位图形的线。\n\n![](https://img.carlwe.com/qr_Timing-Pattern.png)\n\n> 再接下来是格式信息，下图中的蓝色部分。\n\n![](https://img.carlwe.com/qr_Format-Information.png)\n\n> 格式信息是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，会永远出现）\n\n![](https://img.carlwe.com/qr_Format-Info-bits-postion.png)\n\n>这15个bits中包括：\n>\n>- 5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask\n>- 10个纠错bits。主要通过BCH Code来计算\n>\n>然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。\n\n![](https://img.carlwe.com/qr_Format-Information-Example.png)\n\n> 错误级别：\n\n![](https://img.carlwe.com/qr_Error-Correction-Indicator-Code.png)\n\n#### 添加版本信息\n\n> （版本7以后需要这个编码），下图中的蓝色部分。\n\n![](https://img.carlwe.com/qr_Version-Information.png)\n\n> 版本信息 一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例\n\n![](https://img.carlwe.com/qr_Version-Information-Example.png)\n\n> 而其填充位置如下图：\n\n![](https://img.carlwe.com/qr_Version-Information-Position.png)\n\n#### 绘制数据和数据纠错码\n\n> 然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。\n\n![](https://img.carlwe.com/qr_Data-Placement.png)\n\n#### 转换为掩码图案\n\n>这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作,QR的Spec中说了,QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（**注：选择一个合适的Mask也是有算法的**）\n\n\n\n![](https://img.carlwe.com/qr_masking-pattern.png)\n\n> 其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）\n\n![](https://img.carlwe.com/qr_Mask-Pattern-Code.png)\n\n> 下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。\n\n![](https://img.carlwe.com/qr_Masking-Examples.png)\n\n> Mask过后的二维码就成最终的图了。\n\n\n\n## 总结\n\n本文主要介绍了二维码的一些基础知识，同时着重介绍了我们所看到的二维码是如何生成的，看完之后相信你应该知道为什么二维码都长这个样子啦！其实还有一个问题没有讲，那就是当我们拿起手机扫描二维码的时候是如何识别二维码的信息的，但相信如果你明白了生成的过程，二维码能够被识别应该也难不倒你了。","slug":"二维码为何长这个样子","published":1,"updated":"2020-08-18T02:25:58.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnp5000it57s12o8080w","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/qr_main_logo.png-h\" alt=\"\"></p>\n<blockquote>\n<p>二维码又称二维条码，最初在1994年由日本DENSO WAVE公司腾弘原团队发明。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>二维码又称二维条码，它是用特定的几何图形按一定规律在平面（二维方向）上分布的黑白相间的图形。相比一维的条码，二维码能够在横向和纵向两个方位同时表达信息，因此能在很小的面积内表达大量的信息，同时可以有较高的容错能力。最初在1994年由日本DENSO WAVE公司腾弘原团队发明，后来DENSO WAVE 公司宣布，不行使本公司就标准QR码拥有的专利权(专利第2938338号)，目前，QR码已经在国家标准和国际标准中实现标准化，任何人都可以随意查看该标准。</p>\n<h3 id=\"二维码分类\"><a href=\"#二维码分类\" class=\"headerlink\" title=\"二维码分类\"></a>二维码分类</h3><ul>\n<li><p>堆叠式/行排式二维条码</p>\n<blockquote>\n<p>其编码原理是建立在一维条码基础之上，按需要堆积成二行或多行。它在编码设计、校验原理、识读方式等方面继承了一维条码的一些特点，但由于行数的增加，需要对行进行判定，其译码算法不完全相同于一维条码。有代表性的行排式二维条码有：Code 16K、Code 49、PDF417、MicroPDF417 等。</p>\n</blockquote>\n</li>\n<li><p>矩阵式二维码</p>\n<blockquote>\n<p>最流行的就是QR CODE ,我们常说的二维码大多数都是他。在矩阵相应元素位置上，用点（方点、圆点或其他形状）的出现表示二进制“1”，点的不出现表示二进制的“0”，点的排列组合确定了矩阵式二维条码所代表的意义。矩阵式二维条码是建立在计算机图像处理技术、组合编码原理等基础上的一种新型图形符号自动识读处理码制。具有代表性的矩阵式二维条码有：Code One、MaxiCode、QR Code、 Data Matrix、Han Xin Code、Grid Matrix 等。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_pdf417-qrcode.png\" alt=\"pdf417-qrcode\"></p>\n</li>\n</ul>\n<p>QRCode官网：www.qrcode.com</p>\n<h3 id=\"二维码的特点\"><a href=\"#二维码的特点\" class=\"headerlink\" title=\"二维码的特点\"></a>二维码的特点</h3><ul>\n<li><p>存储大容量信息</p>\n<blockquote>\n<p>传统条形码最多只能支持20位左右的信息，二维码则最多可以支持7089个数字，4296个字母，1817个汉字。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_performanceImage.png\" alt=\"moredata\"></p>\n</li>\n<li><p>小空间内打印</p>\n<p><img src=\"https://img.carlwe.com/qr_duibi.png\" alt=\"对比\"></p>\n</li>\n<li><p>有效表现各种字母</p>\n<blockquote>\n<p>QR码是日本国产的二维码，因此更适合处理日文字母和汉字。QR码字集规格定义是按照日本标准“JIS第一级和第二级的汉字”制定的，因此在日语处理方面，每一个全角字母和汉字都用13比特的数据处理，效率较高，与其他二维码相比，可以多存储20%以上的信息。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_goodnight.png\" alt=\"o ya su mi na sai\"></p>\n</li>\n<li><p>抗破损能力强</p>\n<blockquote>\n<p>QR码具备“纠错功能”，即使部分编码变脏或破损，也可以恢复数据。数据恢复以码字为单位（是组成内部数据的单位，在QR码的情况下，每8比特代表1码字），最多可以纠错约30%（根据变脏和破损程度的不同，也存在无法恢复的情况）。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_damageImage.png\" alt=\"damageImage\"></p>\n</li>\n<li><p>任意方向识别</p>\n<blockquote>\n<p>QR码从360°任一方向均可快速读取。原因在于QR码中的3处定位图案，可以帮助QR码不受背景样式的影响，实现快速稳定的读取。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_symbolImage.png\" alt=\"symbolImage\"></p>\n</li>\n<li><p>支持数据合并功能</p>\n<blockquote>\n<p>QR码可以将数据分割为多个编码，最多支持16个QR码。使用这一功能，还可以在狭长区域内打印QR码。另外，也可以把多个分割编码合并为单个数据。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_commonDataImage.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"二维码的版本与纠错能力\"><a href=\"#二维码的版本与纠错能力\" class=\"headerlink\" title=\"二维码的版本与纠错能力\"></a>二维码的版本与纠错能力</h3><h4 id=\"二维码版本\"><a href=\"#二维码版本\" class=\"headerlink\" title=\"二维码版本\"></a>二维码版本</h4><blockquote>\n<p>二维码一共有40个尺寸，官方叫版本Version。Version 1是21 x 21的矩阵，Version 2是 25 x 25的矩阵，Version 3是29的尺寸，每增加一个version，就会增加4的尺寸，公式是：(V-1)<em>4 + 21（V是版本号） 最高Version 40，(40-1)</em>4+21 = 177，所以最高是177 x 177 的正方形。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_versionVarietyImage.png\" alt=\"version\"></p>\n<h4 id=\"二维码纠错能力\"><a href=\"#二维码纠错能力\" class=\"headerlink\" title=\"二维码纠错能力\"></a>二维码纠错能力</h4><blockquote>\n<p>QR码具有“纠错功能”。即使编码变脏或破损，也可自动恢复数据。这一“纠错能力”具备4个级别，用户可根据使用环境选择相应的级别。调高级别，纠错能力也相应提高，但由于数据量会随之增加，编码尺寸也也会变大。<br>用户应综合考虑使用环境、编码尺寸等因素后选择相应的级别。 在工厂等容易沾染赃物的环境下，可以选择级别Q或H，在不那么脏的环境下，且数据量较多的时候，也可以选择级别L。一般情况下用户大多选择级别M(15%)。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Qrcode_jiucuo.png\" alt=\"\"></p>\n<ul>\n<li>纠错使用RS编码</li>\n</ul>\n<blockquote>\n<p>RS编码，又称里所码，即Reed-solomon codes，是一种前向纠错的信道编码，对由校正过采样数据所产生的多项式有效。当接收器正确的收到足够的点后，它就可以恢复原来的多项式，即使接收到的多项式上有很多点被噪声干扰失真。</p>\n</blockquote>\n<h4 id=\"二维码尺寸选择\"><a href=\"#二维码尺寸选择\" class=\"headerlink\" title=\"二维码尺寸选择\"></a>二维码尺寸选择</h4><blockquote>\n<p>QR码的各个版本结合数据量、字符类型和纠错级别，均设有相对应的最多输入字符数。也就是说，如果增加数据量，则需要使用更多的码元来组成QR码，QR码就会变得更大。</p>\n<p>例如，需要输入的数据为100位的数字时，通过以下步骤来选定。<br>1．假设要输入的数据种类为“数字” 。<br>2．从“L”、 “M”、 “Q”、 “H”中选择纠错级别。（假设选择“M”）<br>3．查看下表，先从数字列找出数字为100以上且接近100的，其次找出纠错级别“M”，两者交叉的部分就是最佳版本。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_select_version.png\" alt=\"\"></p>\n<h3 id=\"二维码的构成\"><a href=\"#二维码的构成\" class=\"headerlink\" title=\"二维码的构成\"></a>二维码的构成</h3><p><img src=\"https://img.carlwe.com/qr_qrcode_explain.png\" alt=\"二维码构成\"></p>\n<ul>\n<li>位置探测图形、位置探测图形分隔符、定位图形：</li>\n</ul>\n<blockquote>\n<p>用于对二维码的定位，对每个QR码来说，位置都是固定存在的，只是大小规格会有所差异； 这三个定位图案有白边即位置探测图形分隔符，之所以三个而不是四个，因为三个就可以标识一个矩形了。</p>\n</blockquote>\n<ul>\n<li>校正图形</li>\n</ul>\n<blockquote>\n<p>规格确定，校正图形的数量和位置也就确定了，Version 2以上（包括Version2）的二维码才需要这个。</p>\n</blockquote>\n<ul>\n<li>格式信息</li>\n</ul>\n<blockquote>\n<p>表示该二维码的纠错级别，分为L、M、Q、H，存在于所有的尺寸中，用于存放一些格式化数据的。</p>\n</blockquote>\n<ul>\n<li>版本信息</li>\n</ul>\n<blockquote>\n<p>即二维码的规格，QR码符号共有40种规格的矩阵（一般为黑白色），从21x21（版本1），到177x177（版本40），每一版本符号比前一版本 每边增加4个模块。在 &gt;= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。</p>\n</blockquote>\n<ul>\n<li>数据和纠错码字</li>\n</ul>\n<blockquote>\n<p>实际保存的二维码信息，和纠错码字（用于修正二维码损坏带来的错误）。</p>\n</blockquote>\n<h2 id=\"二维码的生成过程\"><a href=\"#二维码的生成过程\" class=\"headerlink\" title=\"二维码的生成过程\"></a>二维码的生成过程</h2><h3 id=\"编码过程\"><a href=\"#编码过程\" class=\"headerlink\" title=\"编码过程\"></a>编码过程</h3><h4 id=\"编码类型\"><a href=\"#编码类型\" class=\"headerlink\" title=\"编码类型\"></a>编码类型</h4><p>QR码支持数字编码、字符编码、字节编码、日文编码、特殊字符编码、混合编码等。</p>\n<ul>\n<li>数字编码</li>\n</ul>\n<blockquote>\n<p>从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸。</p>\n</blockquote>\n<ul>\n<li>字符编码</li>\n</ul>\n<blockquote>\n<p>包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Alphanumeric-mode.png\" alt=\"编码\"></p>\n<p><img src=\"https://img.carlwe.com/qr_Mode-Indicator.png\" alt=\"\"></p>\n<h4 id=\"字符编码示例：\"><a href=\"#字符编码示例：\" class=\"headerlink\" title=\"字符编码示例：\"></a>字符编码示例：</h4><ul>\n<li>一、生成数据码</li>\n</ul>\n<blockquote>\n<p>在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42</p>\n<ol>\n<li>从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)</li>\n<li>两两分组: (10,12) (41,4) (2)</li>\n<li>把每一组转成11bits的二进制:</li>\n</ol>\n<p>(10,12) 10x45+12 等于 462 转成 00111001110<br>(41,4) 41x45+4 等于 1849 转成 11100111001<br>(2) 等于 2 转成 000010</p>\n<ol>\n<li><p>把这些二进制连接起来：00111001110 11100111001 000010</p>\n</li>\n<li><p>把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101</p>\n</li>\n<li><p>在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010</p>\n</li>\n<li><p>添加结束符0000</p>\n</li>\n<li><p>8bits重排，如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组 00100000 00101001 11001110 11100111 00100001 00000000</p>\n</li>\n<li><p>补齐码，最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 关于每一个Version的每一种纠错级别的最大Bits限制，可以参看[QR Code Spec]的第28页到32页的Table-7一表。</p>\n<p>按照最低21*21H级别纠错规格72个bits,一共需要9组 还差三个，补齐后即可得到数据码：00100000 00101001 11001110 11100111 00100001 00000000 11101100 00010001 11101100 </p>\n<p>上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>二、通过数据码生成纠错码</li>\n</ul>\n<blockquote>\n<p>首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看[QR Code Spec]的第33页到44页的Table-13到Table-22的定义表。注意最后两列：</p>\n<ul>\n<li><strong>Number of Error Code Correction Blocks</strong> ：需要分多少个块</li>\n<li><strong>Error Correction Code Per Blocks</strong>：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。</li>\n</ul>\n<p><img src=\"https://img.carlwe.com/qr_Error-Correction-Blocks.png\" alt=\"\"></p>\n<p>例如：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）</p>\n<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>\n<p><img src=\"https://img.carlwe.com/qr_jiucuo.png\" alt=\"\"></p>\n<p>注：二维码的纠错码主要是通过<a href=\"http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction\" target=\"_blank\" rel=\"noopener\">Reed-Solomon error correction</a>（里德-所罗门纠错算法）来实现的。</p>\n<p>可参考：<a href=\"https://blog.csdn.net/liubin1991liubin/article/details/78989043，简单说就是通过算法加入更多的字符后重新编码，增强容错性，使得最终的内容即使部分丢失也能够被还原。\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liubin1991liubin/article/details/78989043，简单说就是通过算法加入更多的字符后重新编码，增强容错性，使得最终的内容即使部分丢失也能够被还原。</a></p>\n</blockquote>\n<ul>\n<li>三、最终编码</li>\n</ul>\n<blockquote>\n<p>二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：</p>\n<p>对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。假如我们用HELLO WORLD的字符串的数据码：</p>\n<p>00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 <strong>11101100 00010001 11101100</strong></p>\n<p>Data Codewords如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>块 1</th>\n<th>67</th>\n<th>85</th>\n<th>70</th>\n<th>134</th>\n<th>87</th>\n<th>38</th>\n<th>85</th>\n<th>194</th>\n<th>119</th>\n<th>50</th>\n<th>6</th>\n<th>18</th>\n<th>6</th>\n<th>103</th>\n<th>38</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块 2</td>\n<td>246</td>\n<td>246</td>\n<td>66</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>242</td>\n<td>7</td>\n<td>38</td>\n<td>86</td>\n<td>22</td>\n<td>198</td>\n<td>199</td>\n<td>146</td>\n<td>6</td>\n<td></td>\n</tr>\n<tr>\n<td>块 3</td>\n<td>182</td>\n<td>230</td>\n<td>247</td>\n<td>119</td>\n<td>50</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>87</td>\n<td>38</td>\n<td>82</td>\n<td>6</td>\n<td>134</td>\n<td>151</td>\n<td>50</td>\n<td>7</td>\n</tr>\n<tr>\n<td>块 4</td>\n<td>70</td>\n<td>247</td>\n<td>118</td>\n<td>86</td>\n<td>194</td>\n<td>6</td>\n<td>151</td>\n<td>50</td>\n<td>16</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>先竖再横向：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236</p>\n<p>对于纠错码，也是一样：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>块 1</th>\n<th>213</th>\n<th>199</th>\n<th>11</th>\n<th>45</th>\n<th>115</th>\n<th>247</th>\n<th>241</th>\n<th>223</th>\n<th>229</th>\n<th>248</th>\n<th>154</th>\n<th>117</th>\n<th>154</th>\n<th>111</th>\n<th>86</th>\n<th>161</th>\n<th>111</th>\n<th>39</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块 2</td>\n<td>87</td>\n<td>204</td>\n<td>96</td>\n<td>60</td>\n<td>202</td>\n<td>182</td>\n<td>124</td>\n<td>157</td>\n<td>200</td>\n<td>134</td>\n<td>27</td>\n<td>129</td>\n<td>209</td>\n<td>17</td>\n<td>163</td>\n<td>163</td>\n<td>120</td>\n<td>133</td>\n</tr>\n<tr>\n<td>块 3</td>\n<td>148</td>\n<td>116</td>\n<td>177</td>\n<td>212</td>\n<td>76</td>\n<td>133</td>\n<td>75</td>\n<td>242</td>\n<td>238</td>\n<td>76</td>\n<td>195</td>\n<td>230</td>\n<td>189</td>\n<td>10</td>\n<td>108</td>\n<td>240</td>\n<td>192</td>\n<td>141</td>\n</tr>\n<tr>\n<td>块 4</td>\n<td>235</td>\n<td>159</td>\n<td>5</td>\n<td>173</td>\n<td>24</td>\n<td>147</td>\n<td>59</td>\n<td>33</td>\n<td>106</td>\n<td>40</td>\n<td>255</td>\n<td>172</td>\n<td>82</td>\n<td>2</td>\n<td>131</td>\n<td>32</td>\n<td>178</td>\n<td>236</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236</p>\n<p>然后，再把这两组放在一起（纠错码放在数据码之后）得到：</p>\n<p>67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236</p>\n<p>这就是我们的数据区。</p>\n</blockquote>\n<h3 id=\"绘制二维码\"><a href=\"#绘制二维码\" class=\"headerlink\" title=\"绘制二维码\"></a>绘制二维码</h3><p>先看之前这个图</p>\n<p><img src=\"https://img.carlwe.com/qr_qrcode_explain.png\" alt=\"二维码构成\"></p>\n<h4 id=\"添加位置探测图形\"><a href=\"#添加位置探测图形\" class=\"headerlink\" title=\"添加位置探测图形\"></a>添加位置探测图形</h4><blockquote>\n<p>首先，先把位置探测图形图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大7*7）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_finder.png\" alt=\"\"></p>\n<h4 id=\"绘制校正图形（-5-5）\"><a href=\"#绘制校正图形（-5-5）\" class=\"headerlink\" title=\"绘制校正图形（ 5*5）\"></a>绘制校正图形（ 5*5）</h4><p><img src=\"https://img.carlwe.com/qr_alignment-pattern.png\" alt=\"\"></p>\n<blockquote>\n<p>关于Alignment的位置，可以查看[QR Code Spec]的第81页的Table-E.1的定义表（下表是不完全表格）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Alignment-Position.png\" alt=\"\"></p>\n<blockquote>\n<p>下图是根据上述表格中的Version8的一个例子（6，24，42）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_alignment-example.png\" alt=\"\"></p>\n<h4 id=\"绘制定位图形\"><a href=\"#绘制定位图形\" class=\"headerlink\" title=\"绘制定位图形\"></a>绘制定位图形</h4><blockquote>\n<p>接下来是定位图形的线。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Timing-Pattern.png\" alt=\"\"></p>\n<blockquote>\n<p>再接下来是格式信息，下图中的蓝色部分。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Format-Information.png\" alt=\"\"></p>\n<blockquote>\n<p>格式信息是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，会永远出现）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Format-Info-bits-postion.png\" alt=\"\"></p>\n<blockquote>\n<p>这15个bits中包括：</p>\n<ul>\n<li>5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask</li>\n<li>10个纠错bits。主要通过BCH Code来计算</li>\n</ul>\n<p>然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Format-Information-Example.png\" alt=\"\"></p>\n<blockquote>\n<p>错误级别：</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Error-Correction-Indicator-Code.png\" alt=\"\"></p>\n<h4 id=\"添加版本信息\"><a href=\"#添加版本信息\" class=\"headerlink\" title=\"添加版本信息\"></a>添加版本信息</h4><blockquote>\n<p>（版本7以后需要这个编码），下图中的蓝色部分。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Version-Information.png\" alt=\"\"></p>\n<blockquote>\n<p>版本信息 一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Version-Information-Example.png\" alt=\"\"></p>\n<blockquote>\n<p>而其填充位置如下图：</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Version-Information-Position.png\" alt=\"\"></p>\n<h4 id=\"绘制数据和数据纠错码\"><a href=\"#绘制数据和数据纠错码\" class=\"headerlink\" title=\"绘制数据和数据纠错码\"></a>绘制数据和数据纠错码</h4><blockquote>\n<p>然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Data-Placement.png\" alt=\"\"></p>\n<h4 id=\"转换为掩码图案\"><a href=\"#转换为掩码图案\" class=\"headerlink\" title=\"转换为掩码图案\"></a>转换为掩码图案</h4><blockquote>\n<p>这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作,QR的Spec中说了,QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（<strong>注：选择一个合适的Mask也是有算法的</strong>）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_masking-pattern.png\" alt=\"\"></p>\n<blockquote>\n<p>其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Mask-Pattern-Code.png\" alt=\"\"></p>\n<blockquote>\n<p>下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Masking-Examples.png\" alt=\"\"></p>\n<blockquote>\n<p>Mask过后的二维码就成最终的图了。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文主要介绍了二维码的一些基础知识，同时着重介绍了我们所看到的二维码是如何生成的，看完之后相信你应该知道为什么二维码都长这个样子啦！其实还有一个问题没有讲，那就是当我们拿起手机扫描二维码的时候是如何识别二维码的信息的，但相信如果你明白了生成的过程，二维码能够被识别应该也难不倒你了。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/qr_main_logo.png-h\" alt=\"\"></p>\n<blockquote>\n<p>二维码又称二维条码，最初在1994年由日本DENSO WAVE公司腾弘原团队发明。</p>\n</blockquote>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>二维码又称二维条码，它是用特定的几何图形按一定规律在平面（二维方向）上分布的黑白相间的图形。相比一维的条码，二维码能够在横向和纵向两个方位同时表达信息，因此能在很小的面积内表达大量的信息，同时可以有较高的容错能力。最初在1994年由日本DENSO WAVE公司腾弘原团队发明，后来DENSO WAVE 公司宣布，不行使本公司就标准QR码拥有的专利权(专利第2938338号)，目前，QR码已经在国家标准和国际标准中实现标准化，任何人都可以随意查看该标准。</p>\n<h3 id=\"二维码分类\"><a href=\"#二维码分类\" class=\"headerlink\" title=\"二维码分类\"></a>二维码分类</h3><ul>\n<li><p>堆叠式/行排式二维条码</p>\n<blockquote>\n<p>其编码原理是建立在一维条码基础之上，按需要堆积成二行或多行。它在编码设计、校验原理、识读方式等方面继承了一维条码的一些特点，但由于行数的增加，需要对行进行判定，其译码算法不完全相同于一维条码。有代表性的行排式二维条码有：Code 16K、Code 49、PDF417、MicroPDF417 等。</p>\n</blockquote>\n</li>\n<li><p>矩阵式二维码</p>\n<blockquote>\n<p>最流行的就是QR CODE ,我们常说的二维码大多数都是他。在矩阵相应元素位置上，用点（方点、圆点或其他形状）的出现表示二进制“1”，点的不出现表示二进制的“0”，点的排列组合确定了矩阵式二维条码所代表的意义。矩阵式二维条码是建立在计算机图像处理技术、组合编码原理等基础上的一种新型图形符号自动识读处理码制。具有代表性的矩阵式二维条码有：Code One、MaxiCode、QR Code、 Data Matrix、Han Xin Code、Grid Matrix 等。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_pdf417-qrcode.png\" alt=\"pdf417-qrcode\"></p>\n</li>\n</ul>\n<p>QRCode官网：www.qrcode.com</p>\n<h3 id=\"二维码的特点\"><a href=\"#二维码的特点\" class=\"headerlink\" title=\"二维码的特点\"></a>二维码的特点</h3><ul>\n<li><p>存储大容量信息</p>\n<blockquote>\n<p>传统条形码最多只能支持20位左右的信息，二维码则最多可以支持7089个数字，4296个字母，1817个汉字。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_performanceImage.png\" alt=\"moredata\"></p>\n</li>\n<li><p>小空间内打印</p>\n<p><img src=\"https://img.carlwe.com/qr_duibi.png\" alt=\"对比\"></p>\n</li>\n<li><p>有效表现各种字母</p>\n<blockquote>\n<p>QR码是日本国产的二维码，因此更适合处理日文字母和汉字。QR码字集规格定义是按照日本标准“JIS第一级和第二级的汉字”制定的，因此在日语处理方面，每一个全角字母和汉字都用13比特的数据处理，效率较高，与其他二维码相比，可以多存储20%以上的信息。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_goodnight.png\" alt=\"o ya su mi na sai\"></p>\n</li>\n<li><p>抗破损能力强</p>\n<blockquote>\n<p>QR码具备“纠错功能”，即使部分编码变脏或破损，也可以恢复数据。数据恢复以码字为单位（是组成内部数据的单位，在QR码的情况下，每8比特代表1码字），最多可以纠错约30%（根据变脏和破损程度的不同，也存在无法恢复的情况）。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_damageImage.png\" alt=\"damageImage\"></p>\n</li>\n<li><p>任意方向识别</p>\n<blockquote>\n<p>QR码从360°任一方向均可快速读取。原因在于QR码中的3处定位图案，可以帮助QR码不受背景样式的影响，实现快速稳定的读取。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_symbolImage.png\" alt=\"symbolImage\"></p>\n</li>\n<li><p>支持数据合并功能</p>\n<blockquote>\n<p>QR码可以将数据分割为多个编码，最多支持16个QR码。使用这一功能，还可以在狭长区域内打印QR码。另外，也可以把多个分割编码合并为单个数据。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_commonDataImage.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"二维码的版本与纠错能力\"><a href=\"#二维码的版本与纠错能力\" class=\"headerlink\" title=\"二维码的版本与纠错能力\"></a>二维码的版本与纠错能力</h3><h4 id=\"二维码版本\"><a href=\"#二维码版本\" class=\"headerlink\" title=\"二维码版本\"></a>二维码版本</h4><blockquote>\n<p>二维码一共有40个尺寸，官方叫版本Version。Version 1是21 x 21的矩阵，Version 2是 25 x 25的矩阵，Version 3是29的尺寸，每增加一个version，就会增加4的尺寸，公式是：(V-1)<em>4 + 21（V是版本号） 最高Version 40，(40-1)</em>4+21 = 177，所以最高是177 x 177 的正方形。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_versionVarietyImage.png\" alt=\"version\"></p>\n<h4 id=\"二维码纠错能力\"><a href=\"#二维码纠错能力\" class=\"headerlink\" title=\"二维码纠错能力\"></a>二维码纠错能力</h4><blockquote>\n<p>QR码具有“纠错功能”。即使编码变脏或破损，也可自动恢复数据。这一“纠错能力”具备4个级别，用户可根据使用环境选择相应的级别。调高级别，纠错能力也相应提高，但由于数据量会随之增加，编码尺寸也也会变大。<br>用户应综合考虑使用环境、编码尺寸等因素后选择相应的级别。 在工厂等容易沾染赃物的环境下，可以选择级别Q或H，在不那么脏的环境下，且数据量较多的时候，也可以选择级别L。一般情况下用户大多选择级别M(15%)。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Qrcode_jiucuo.png\" alt=\"\"></p>\n<ul>\n<li>纠错使用RS编码</li>\n</ul>\n<blockquote>\n<p>RS编码，又称里所码，即Reed-solomon codes，是一种前向纠错的信道编码，对由校正过采样数据所产生的多项式有效。当接收器正确的收到足够的点后，它就可以恢复原来的多项式，即使接收到的多项式上有很多点被噪声干扰失真。</p>\n</blockquote>\n<h4 id=\"二维码尺寸选择\"><a href=\"#二维码尺寸选择\" class=\"headerlink\" title=\"二维码尺寸选择\"></a>二维码尺寸选择</h4><blockquote>\n<p>QR码的各个版本结合数据量、字符类型和纠错级别，均设有相对应的最多输入字符数。也就是说，如果增加数据量，则需要使用更多的码元来组成QR码，QR码就会变得更大。</p>\n<p>例如，需要输入的数据为100位的数字时，通过以下步骤来选定。<br>1．假设要输入的数据种类为“数字” 。<br>2．从“L”、 “M”、 “Q”、 “H”中选择纠错级别。（假设选择“M”）<br>3．查看下表，先从数字列找出数字为100以上且接近100的，其次找出纠错级别“M”，两者交叉的部分就是最佳版本。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_select_version.png\" alt=\"\"></p>\n<h3 id=\"二维码的构成\"><a href=\"#二维码的构成\" class=\"headerlink\" title=\"二维码的构成\"></a>二维码的构成</h3><p><img src=\"https://img.carlwe.com/qr_qrcode_explain.png\" alt=\"二维码构成\"></p>\n<ul>\n<li>位置探测图形、位置探测图形分隔符、定位图形：</li>\n</ul>\n<blockquote>\n<p>用于对二维码的定位，对每个QR码来说，位置都是固定存在的，只是大小规格会有所差异； 这三个定位图案有白边即位置探测图形分隔符，之所以三个而不是四个，因为三个就可以标识一个矩形了。</p>\n</blockquote>\n<ul>\n<li>校正图形</li>\n</ul>\n<blockquote>\n<p>规格确定，校正图形的数量和位置也就确定了，Version 2以上（包括Version2）的二维码才需要这个。</p>\n</blockquote>\n<ul>\n<li>格式信息</li>\n</ul>\n<blockquote>\n<p>表示该二维码的纠错级别，分为L、M、Q、H，存在于所有的尺寸中，用于存放一些格式化数据的。</p>\n</blockquote>\n<ul>\n<li>版本信息</li>\n</ul>\n<blockquote>\n<p>即二维码的规格，QR码符号共有40种规格的矩阵（一般为黑白色），从21x21（版本1），到177x177（版本40），每一版本符号比前一版本 每边增加4个模块。在 &gt;= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。</p>\n</blockquote>\n<ul>\n<li>数据和纠错码字</li>\n</ul>\n<blockquote>\n<p>实际保存的二维码信息，和纠错码字（用于修正二维码损坏带来的错误）。</p>\n</blockquote>\n<h2 id=\"二维码的生成过程\"><a href=\"#二维码的生成过程\" class=\"headerlink\" title=\"二维码的生成过程\"></a>二维码的生成过程</h2><h3 id=\"编码过程\"><a href=\"#编码过程\" class=\"headerlink\" title=\"编码过程\"></a>编码过程</h3><h4 id=\"编码类型\"><a href=\"#编码类型\" class=\"headerlink\" title=\"编码类型\"></a>编码类型</h4><p>QR码支持数字编码、字符编码、字节编码、日文编码、特殊字符编码、混合编码等。</p>\n<ul>\n<li>数字编码</li>\n</ul>\n<blockquote>\n<p>从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸。</p>\n</blockquote>\n<ul>\n<li>字符编码</li>\n</ul>\n<blockquote>\n<p>包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Alphanumeric-mode.png\" alt=\"编码\"></p>\n<p><img src=\"https://img.carlwe.com/qr_Mode-Indicator.png\" alt=\"\"></p>\n<h4 id=\"字符编码示例：\"><a href=\"#字符编码示例：\" class=\"headerlink\" title=\"字符编码示例：\"></a>字符编码示例：</h4><ul>\n<li>一、生成数据码</li>\n</ul>\n<blockquote>\n<p>在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42</p>\n<ol>\n<li>从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)</li>\n<li>两两分组: (10,12) (41,4) (2)</li>\n<li>把每一组转成11bits的二进制:</li>\n</ol>\n<p>(10,12) 10x45+12 等于 462 转成 00111001110<br>(41,4) 41x45+4 等于 1849 转成 11100111001<br>(2) 等于 2 转成 000010</p>\n<ol>\n<li><p>把这些二进制连接起来：00111001110 11100111001 000010</p>\n</li>\n<li><p>把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101</p>\n</li>\n<li><p>在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010</p>\n</li>\n<li><p>添加结束符0000</p>\n</li>\n<li><p>8bits重排，如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组 00100000 00101001 11001110 11100111 00100001 00000000</p>\n</li>\n<li><p>补齐码，最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 关于每一个Version的每一种纠错级别的最大Bits限制，可以参看[QR Code Spec]的第28页到32页的Table-7一表。</p>\n<p>按照最低21*21H级别纠错规格72个bits,一共需要9组 还差三个，补齐后即可得到数据码：00100000 00101001 11001110 11100111 00100001 00000000 11101100 00010001 11101100 </p>\n<p>上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>二、通过数据码生成纠错码</li>\n</ul>\n<blockquote>\n<p>首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看[QR Code Spec]的第33页到44页的Table-13到Table-22的定义表。注意最后两列：</p>\n<ul>\n<li><strong>Number of Error Code Correction Blocks</strong> ：需要分多少个块</li>\n<li><strong>Error Correction Code Per Blocks</strong>：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。</li>\n</ul>\n<p><img src=\"https://img.carlwe.com/qr_Error-Correction-Blocks.png\" alt=\"\"></p>\n<p>例如：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）</p>\n<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>\n<p><img src=\"https://img.carlwe.com/qr_jiucuo.png\" alt=\"\"></p>\n<p>注：二维码的纠错码主要是通过<a href=\"http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction\" target=\"_blank\" rel=\"noopener\">Reed-Solomon error correction</a>（里德-所罗门纠错算法）来实现的。</p>\n<p>可参考：<a href=\"https://blog.csdn.net/liubin1991liubin/article/details/78989043，简单说就是通过算法加入更多的字符后重新编码，增强容错性，使得最终的内容即使部分丢失也能够被还原。\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/liubin1991liubin/article/details/78989043，简单说就是通过算法加入更多的字符后重新编码，增强容错性，使得最终的内容即使部分丢失也能够被还原。</a></p>\n</blockquote>\n<ul>\n<li>三、最终编码</li>\n</ul>\n<blockquote>\n<p>二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：</p>\n<p>对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。假如我们用HELLO WORLD的字符串的数据码：</p>\n<p>00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 <strong>11101100 00010001 11101100</strong></p>\n<p>Data Codewords如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>块 1</th>\n<th>67</th>\n<th>85</th>\n<th>70</th>\n<th>134</th>\n<th>87</th>\n<th>38</th>\n<th>85</th>\n<th>194</th>\n<th>119</th>\n<th>50</th>\n<th>6</th>\n<th>18</th>\n<th>6</th>\n<th>103</th>\n<th>38</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块 2</td>\n<td>246</td>\n<td>246</td>\n<td>66</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>242</td>\n<td>7</td>\n<td>38</td>\n<td>86</td>\n<td>22</td>\n<td>198</td>\n<td>199</td>\n<td>146</td>\n<td>6</td>\n<td></td>\n</tr>\n<tr>\n<td>块 3</td>\n<td>182</td>\n<td>230</td>\n<td>247</td>\n<td>119</td>\n<td>50</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>87</td>\n<td>38</td>\n<td>82</td>\n<td>6</td>\n<td>134</td>\n<td>151</td>\n<td>50</td>\n<td>7</td>\n</tr>\n<tr>\n<td>块 4</td>\n<td>70</td>\n<td>247</td>\n<td>118</td>\n<td>86</td>\n<td>194</td>\n<td>6</td>\n<td>151</td>\n<td>50</td>\n<td>16</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>先竖再横向：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236</p>\n<p>对于纠错码，也是一样：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>块 1</th>\n<th>213</th>\n<th>199</th>\n<th>11</th>\n<th>45</th>\n<th>115</th>\n<th>247</th>\n<th>241</th>\n<th>223</th>\n<th>229</th>\n<th>248</th>\n<th>154</th>\n<th>117</th>\n<th>154</th>\n<th>111</th>\n<th>86</th>\n<th>161</th>\n<th>111</th>\n<th>39</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块 2</td>\n<td>87</td>\n<td>204</td>\n<td>96</td>\n<td>60</td>\n<td>202</td>\n<td>182</td>\n<td>124</td>\n<td>157</td>\n<td>200</td>\n<td>134</td>\n<td>27</td>\n<td>129</td>\n<td>209</td>\n<td>17</td>\n<td>163</td>\n<td>163</td>\n<td>120</td>\n<td>133</td>\n</tr>\n<tr>\n<td>块 3</td>\n<td>148</td>\n<td>116</td>\n<td>177</td>\n<td>212</td>\n<td>76</td>\n<td>133</td>\n<td>75</td>\n<td>242</td>\n<td>238</td>\n<td>76</td>\n<td>195</td>\n<td>230</td>\n<td>189</td>\n<td>10</td>\n<td>108</td>\n<td>240</td>\n<td>192</td>\n<td>141</td>\n</tr>\n<tr>\n<td>块 4</td>\n<td>235</td>\n<td>159</td>\n<td>5</td>\n<td>173</td>\n<td>24</td>\n<td>147</td>\n<td>59</td>\n<td>33</td>\n<td>106</td>\n<td>40</td>\n<td>255</td>\n<td>172</td>\n<td>82</td>\n<td>2</td>\n<td>131</td>\n<td>32</td>\n<td>178</td>\n<td>236</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236</p>\n<p>然后，再把这两组放在一起（纠错码放在数据码之后）得到：</p>\n<p>67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236</p>\n<p>这就是我们的数据区。</p>\n</blockquote>\n<h3 id=\"绘制二维码\"><a href=\"#绘制二维码\" class=\"headerlink\" title=\"绘制二维码\"></a>绘制二维码</h3><p>先看之前这个图</p>\n<p><img src=\"https://img.carlwe.com/qr_qrcode_explain.png\" alt=\"二维码构成\"></p>\n<h4 id=\"添加位置探测图形\"><a href=\"#添加位置探测图形\" class=\"headerlink\" title=\"添加位置探测图形\"></a>添加位置探测图形</h4><blockquote>\n<p>首先，先把位置探测图形图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大7*7）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_finder.png\" alt=\"\"></p>\n<h4 id=\"绘制校正图形（-5-5）\"><a href=\"#绘制校正图形（-5-5）\" class=\"headerlink\" title=\"绘制校正图形（ 5*5）\"></a>绘制校正图形（ 5*5）</h4><p><img src=\"https://img.carlwe.com/qr_alignment-pattern.png\" alt=\"\"></p>\n<blockquote>\n<p>关于Alignment的位置，可以查看[QR Code Spec]的第81页的Table-E.1的定义表（下表是不完全表格）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Alignment-Position.png\" alt=\"\"></p>\n<blockquote>\n<p>下图是根据上述表格中的Version8的一个例子（6，24，42）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_alignment-example.png\" alt=\"\"></p>\n<h4 id=\"绘制定位图形\"><a href=\"#绘制定位图形\" class=\"headerlink\" title=\"绘制定位图形\"></a>绘制定位图形</h4><blockquote>\n<p>接下来是定位图形的线。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Timing-Pattern.png\" alt=\"\"></p>\n<blockquote>\n<p>再接下来是格式信息，下图中的蓝色部分。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Format-Information.png\" alt=\"\"></p>\n<blockquote>\n<p>格式信息是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，会永远出现）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Format-Info-bits-postion.png\" alt=\"\"></p>\n<blockquote>\n<p>这15个bits中包括：</p>\n<ul>\n<li>5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask</li>\n<li>10个纠错bits。主要通过BCH Code来计算</li>\n</ul>\n<p>然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Format-Information-Example.png\" alt=\"\"></p>\n<blockquote>\n<p>错误级别：</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Error-Correction-Indicator-Code.png\" alt=\"\"></p>\n<h4 id=\"添加版本信息\"><a href=\"#添加版本信息\" class=\"headerlink\" title=\"添加版本信息\"></a>添加版本信息</h4><blockquote>\n<p>（版本7以后需要这个编码），下图中的蓝色部分。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Version-Information.png\" alt=\"\"></p>\n<blockquote>\n<p>版本信息 一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Version-Information-Example.png\" alt=\"\"></p>\n<blockquote>\n<p>而其填充位置如下图：</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Version-Information-Position.png\" alt=\"\"></p>\n<h4 id=\"绘制数据和数据纠错码\"><a href=\"#绘制数据和数据纠错码\" class=\"headerlink\" title=\"绘制数据和数据纠错码\"></a>绘制数据和数据纠错码</h4><blockquote>\n<p>然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Data-Placement.png\" alt=\"\"></p>\n<h4 id=\"转换为掩码图案\"><a href=\"#转换为掩码图案\" class=\"headerlink\" title=\"转换为掩码图案\"></a>转换为掩码图案</h4><blockquote>\n<p>这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作,QR的Spec中说了,QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（<strong>注：选择一个合适的Mask也是有算法的</strong>）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_masking-pattern.png\" alt=\"\"></p>\n<blockquote>\n<p>其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Mask-Pattern-Code.png\" alt=\"\"></p>\n<blockquote>\n<p>下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/qr_Masking-Examples.png\" alt=\"\"></p>\n<blockquote>\n<p>Mask过后的二维码就成最终的图了。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文主要介绍了二维码的一些基础知识，同时着重介绍了我们所看到的二维码是如何生成的，看完之后相信你应该知道为什么二维码都长这个样子啦！其实还有一个问题没有讲，那就是当我们拿起手机扫描二维码的时候是如何识别二维码的信息的，但相信如果你明白了生成的过程，二维码能够被识别应该也难不倒你了。</p>"},{"title":"kotlin混合开发下","date":"2019-07-20T01:43:40.000Z","_content":"\n![](https://img.carlwe.com/kotlin_and_java_logo.png-h)\n\n<!--more-->\n\n> 回顾：上篇博客介绍了kotlin的一些基本语法和新特性。我们知道了kotlin会更加的实用、简洁和安全。\n\n### Kotlin混合开发原理\n\n上面我们了解到了kotlin如此多的好处，同时也是谷歌官方确认的Android开发的第一语言，那么我们如何在我们现有的java项目中引入kotlin呢，这里就要提到了kotlin的另一个特性：互操作性。\n\n> 互操作性：可以放心的使用现有的库、可以自由的在Java和Kotlin源码文件之间切换、混合开发时可以在不同语言的代码中单步调试、重构java代码时kotlin也会正确执行。\n\n有了这个特性使用起来就方便多啦，这就代表着我们能够直接在现有的项目中直接使用kotlin：在kotlin的代码中可以调用java代码，在java代码中也可以轻松调用kotlin代码。那这背后的原理是什么呢？我们下面来分析。\n\n#### App构建过程介绍\n\n![](https://img.carlwe.com/kotlin_build_process.png)\n\n我们先从App的构建过程讲起，和 Java 一样， Kotlin 也是编译型语言。所以你必须先编译，然后生成.class字节码才能正确执行。不同的是，Kotlin有自己的编译器，会识别对应的kotlin语法，同时拥有kotlin自己的运行时库，提供一些java所不具备的功能。另外用 Kotiin 编译器编译的代码依赖 Kotlin 运行时库。它包括了 Kotlin 自己的标准库类的定义，以及 Kotiin对标准 JavaAPI的扩展。 Gradle 还会帮我们把 Kotlin 运行时库作为依赖加入到你的应用程序中。运行时库需要和你的应用程序一起分发 。所以加入kotlin之后当你的应用打包后，通过dexcount工具你会发现增加了相当一部分kotlin的代码（大概4000个方法），不过包体积的增大相对于kotlin给我们带来的方便可以忽略。\n\n![](https://img.carlwe.com/kotlin_added_methods.png-m)\n\n#### 编译器工作过程\n\n上面介绍到kotlin和java最主要的不同在与编译器，那我们就来看看编译器的工作过程。\n\n![](https://img.carlwe.com/kotlin_compile_progress.png)\n\njava和kotlin的编译过程类似。在大学中上过编译原理的同学对这个肯定不会陌生。简单来说，上面整个过程其实就是翻译我们写代码的过程，下面介绍如下三个概念：\n\n> 词法分析：识别代码中的关键字、元算符，同识别一个句子中的单词类似。\n>\n> 语法分析：将上面识别到的单词序列组合成各类语法短语，类似学生用多个词语组句一样。\n>\n> 语义分析：判断组合成的句子是否符合编码规范（变量定义类型是否正确，运算符是否匹配）。类似检查我们说话时是否有病句。\n\n上面流程中语义分析完成后就会进入到目标代码生成阶段。字节码生成器会负责该项工作，生成最后的JVM字节码。那么kotlin和java的最大区别其实就是在于字节码生成器，kotlin会按照自己的语法规则，生成对应的字节码，下面让我们来详细看下目标代码生成的过程。\n\n#### 目标代码生成\n\n![](https://img.carlwe.com/kotlin_target_code.png)\n\n通过最简单的变量生成Set、Get方法为例，我们首先定义了一个Int类型的变量a初始值为1，我们找到kotlin编译器的源码发现，kotlin在目标代码生成阶段多了判断是否需要生成set()、get()方法的逻辑，通过AndroidStuido的Decompiled功能我们能够直接看到编译之后的代码。可以看到自动帮我们生成了setA()和getA()两个方法。\n\n可见Kotlin编译器在编译前端（即词法分析、语法分析、语义分析、中间代码生成）并没有做让人感到很厉害的事情，和Java是基本一致的，所以混合开发就变得水到渠成了。与Java相比，所与众不同的细节是在编译后端（目标代码生成）环节。Kotlin编译器在目标代码生成环节做了很多**类似于Java封装**的事情，比如自动生成Getter/Setter代码的生成、Companion转变成静态类、修改类属性为final不可继承等工作。可以说，大部分Kotlin的特性都在这个环节处理产生。那么总结来说：Kotlin将我们本来在代码层做的一些封装工作转移到了编译后端的阶段，这就是为什么kotlin使用起来如此的简单的原因了。\n\n上面我们了解啦kotlin混合开发的原理。在介绍混合开发之前，我们首先需要知道：\n\n> 同一个文件中的代码要么是kotlin代码要么是java代码。混合开发指的是在不同文件中调用彼此的代码。\n\n混合开发大部分时候并不需要关心太多：我们可以像往常一样直接在java代码中调用kotlin定义的方法和属性。也可以直接在kotlin代码中调用java代码定义的方法和属性，你并不会感觉到会有多大的差异，但是由于语言特性，在某些功能的实现上我们需要做一些特殊的处理。那么下面我们就分别从相互调用的两个方向来进行介绍**（阅读需要有java基础，可选择性跳过）**\n\n### Kotlin中调用Java代码\n\n![](https://img.carlwe.com/use_java_in_kotlin.png)\n\n**1、Getter和Setter**\n\n> 遵循 Java 约定的 getter 和 setter 的方法（名称以 `get` 开头的无参数方法和以 `set` 开头的单参数方法）在 Kotlin 中表示为属性。 `Boolean` 访问器方法（其中 getter 的名称以 `is` 开头而 setter 的名称以 `set` 开头）会表示为与 getter 方法具有相同名称的属性。 例如:\n\n```kotlin\n//kotlin\nval myHouse = House(\"5th Avenue,NY.\", 200000.0, true)//java类House\nmyHouse.price = 300000.0   //调用setPrice()方法\nmyHouse.isNewHouse = false //调用isNewHouse()方法\nprintln(\"price:${myHouse.price}\\nisNewHouse:${myHouse.isNewHouse}\")//调用getPrice()方法\n```\n\n**2、Java中使用了Kotlin的关键字**\n\n> 一些 Kotlin 关键字在 Java 中是有效标识符：*in*、 *object*、 *is* 等等。 如果一个 Java 库使用了 Kotlin 关键字作为方法，你仍然可以通过反引号（`）字符转义它来调用该方法:\n\n```kotlin\n//kotlin\nfun main(args: Array<String>) {\n    val arr = arrayListOf(\"kotlin\", \"java\", \"and\")\n    //将 Kotlin 中是关键字的 Java 标识符进行转义\n    println(StringUtil.`in`(arr))\n}\n```\n\n**3、空安全与平台类型**\n\n> Java 中的任何引用都可能是 *null*，这使得 Kotlin 对来自 Java 的对象要求严格空安全是不现实的。 Java 声明的类型在 Kotlin 中会被特别对待并称为*平台类型*。\n\n```java\n//java\npublic interface DataParser<T> {\n    void parseData(String input, List<T> output, List<String> errors);\n}\n```\n\n> kotlin类实现java的DataParser接口时，每个参数的类型是否可空、集合是否可变，可以根据实际情况来定义。\n\n```kotlin\n//kotlin\nclass PersonParse:DataParser<Person>{\n    override fun parseData(input:String, \n                           output:MutableList<Person>, \n                           //根据实际情况也可以定义为MutableList<String>\n                           errors:MutableList<String?>)\n}\n```\n\n**4、Java可变参数**\n\n> Java 类有时声明一个具有可变数量参数（varargs）的方法来使用索引\n\n```java\n//java\npublic class JavaArrayExample {\n\t//接受可变参数\n    public List<Integer> removeZero(int... intArr) {\n        List<Integer> resultArr = new ArrayList<>();\n        for (int value : intArr) {\n            if (value != 0) {\n                resultArr.add(value);\n            }\n        }\n        return resultArr;\n    }\n}\n```\n\n> 在这种情况下，你需要使用展开运算符 `*` 来传递 `IntArray`\n\n```kotlin\n//kotlin\nval javaObj = JavaArrayExample()\nval array = intArrayOf(0,1,2,3)\nprintln(javaObj.removeZero(*array))\n```\n\n**5、Java数组**\n\n> Java 平台上，数组会使用原生数据类型以避免装箱/拆箱操作的开销。 由于 Kotlin 隐藏了这些实现细节，因此需要一个变通方法来与 Java 代码进行交互。 对于每种原生类型的数组都有一个特化的类（`IntArray`、 `DoubleArray`、 `CharArray` 等等）来处理这种情况。 它们与 `Array` 类无关，并且会编译成 Java 原生类型数组以获得最佳性能，Java代码如下：\n\n```java\n//java\npublic class JavaArrayMethod {\n    public void removeIndices(int[] indices){\n    }\n}\n```\n\n> kotlin调用java代码\n\n```kotlin\nval javaObj = JavaArrayMethod()\nval array = intArrayOf(0, 1, 2, 3)\njavaObj.removeIndices(array)  // 将 int[] 传给方法\narray[1] = array[1] * 2 // 不会实际生成对 get() 和 set() 的调用\nfor (x in array) {// 不会创建迭代器\n    println(x)\n}\n```\n\n**6、Kotlin中的 Java 泛型**\n\n> Java 的通配符转换成类型投影，Java的原始类型转换成星投影，Java代码：\n\n```java\n//java\npublic class JavaPattern<Animal> {\n    public void Test1(JavaPattern<? extends Animal> list) {}\n    public void Test2(JavaPattern<? super Animal> list) {}\n    \n    public static void printColl(ArrayList<?> al) {\n        Iterator<?> it = al.iterator();\n        while (it.hasNext()) {\n            System.out.println(it.next().toString());\n        }\n    }\n}\n```\n\n> 转换后的kotlin代码\n\n```kotlin\nclass KotlinPattern1<Animal> {\n    fun Test1(list: KotlinPattern1<out Animal>) {}\n    fun Test2(list: KotlinPattern1<in Animal>) {}\n    \n    fun printColl(al: ArrayList<*>) {\n        val it = al.iterator()\n        while (it.hasNext()) {\n            println(it.next().toString())\n        }\n    }\n}\n```\n\n**7、在 Kotlin 中使用 JNI**\n\n> 要声明一个在本地（C 或 C++）代码中实现的函数，你需要使用 `external` 修饰符来标记它\n\n```kotlin\nexternal fun add(x: Int,y: Int): Double\n```\n\n### Java中调用Kotlin代码\n\n![](https://img.carlwe.com/use_kotlin_in_java.png)\n\n**1、属性**\n\n> Kotlin 属性会编译成以下 Java 元素：getter 方法，名称通过加前缀 `get` 算出；setter 方法，名称通过加前缀 `set` 算出（只适用于 `var` 属性，kotlin代码：\n\n```kotlin\nvar firstName: String\n```\n\n> 在编译时会生成如下Java代码：\n\n```java\nprivate String firstName;\npublic String getFirstName() {\n    return firstName;\n}\npublic void setFirstName(String firstName) {\n    this.firstName = firstName;\n}\n```\n\n**2、包级函数**\n\n> Kotlin文件`File`中声明的所有的函数和属性，包括扩展函数， 都编译成一个名为`FileKt` 的 Java 类的静态方法，可以使用 `@JvmName` 注解修改生成的 Java 类的类名：\n\n```kotlin\n@file:JvmName(\"Utils\")\npackage com.ltz.kotlintest.usekotlininjava.example2\nfun printLowerCase(str: String) {\n    println(str.toLowerCase())\n}\n```\n\n> java中调用\n\n```java\nUtils.printLowerCase(\"Hello XiaoHui\");\n```\n\n> 如果多个文件中生成了相同的 Java 类名（包名相同并且类名相同或者有相同的 `@JvmName` 注解）通常是错误的。然而，编译器能够生成一个单一的 Java 外观类，它具有指定的名称且包含来自所有文件中具有该名称的所有声明。 要启用生成这样的外观，请在所有相关文件中使用 @JvmMultifileClass 注解\n\n```java\n//Fun.kt\n@file:JvmName(\"Utils\")\n@file:JvmMultifileClass\npackage com.ltz.kotlintest.usekotlininjava.example2\n\nfun printLowerCase(str: String) {\n    println(str.toLowerCase())\n}\n```\n\n```kotlin\n//Fun1.kt\n@file:JvmName(\"Utils\")//@JvmName 注解修改生成的 Java 类的类名\n@file:JvmMultifileClass\npackage com.ltz.kotlintest.usekotlininjava.example2\n\nfun printUpperCase(str: String) {\n    println(str.toUpperCase())\n}\n```\n\n```java\n//Java\nUtils.printUpperCase(\"hello xiaohui\");\nUtils.printLowerCase(\"Hello XiaoHui\");\n```\n\n**3、静态字段和方法**\n\n- 静态字段\n\n> 在命名对象或伴生对象中声明的 Kotlin 属性会在该命名对象或包含伴生对象的类中具有静态幕后字段。\n>\n> 通常这些字段是私有的，但可以通过以下方式之一暴露出来：\n>\n> - `@JvmField` 注解；\n> - `lateinit` 修饰符；\n> - `const` 修饰符。\n\n```kotlin\n//Kotlin\nclass Key(val value: Int) {\n    //伴生对象\n    companion object {\n        @JvmField //使用 @JvmField 标注这样的属性使其成为与属性本身具有相同可见性的静态字段\n        val COMPARATOR: Comparator<Key> = compareBy<Key> { it.value }\n    }\n}\n//命名对象\nobject Singleton {\n     lateinit var key: Key\n      const val SingletonConst = 1\n}\n```\n\n```java\n//Java\nKey.COMPARATOR.compare(new Key(1), new Key(2));\nSingleton.key = new Key(1);\nint c = Singleton.SingletonConst;\n```\n\n- 静态方法\n\n> Kotlin 可以为命名对象或伴生对象中定义的函数生成静态方法，如果你将这些函数标注为 `@JvmStatic` 的话，编译器既会在相应对象的类中生成静态方法，也会在对象自身中生成实例方法。 例如\n\n```kotlin\n//kotlin\nclass C {\n    companion object {//伴生对象\n        @JvmStatic fun foo() {}\n        fun bar() {}\n    }\n}\n//命名对象\nobject Obj {\n    @JvmStatic fun foo() {}\n    fun bar() {}\n}\n```\n\n```java\n//Java \nC.foo(); // 没问题\nC.bar(); // 错误：不是一个静态方法\nC.Companion.foo(); // 保留实例方法\nC.Companion.bar(); // 唯一的工作方式\n\nObj.foo(); // 没问题\nObj.bar(); // 错误\nObj.INSTANCE.bar(); // 没问题，通过单例实例调用\nObj.INSTANCE.foo(); // 也没问题\n```\n\n**4、生成重载**\n\n> 如果你写一个有默认参数值的 Kotlin 函数，在 Java 中只会有一个所有参数都存在的完整参数签名的方法可见，如果希望向 Java 调用者暴露多个重载，可以使用 `@JvmOverloads` 注解。\n\n```kotlin\n//kotlin\nclass Foo @JvmOverloads constructor(x: Int, y: Double = 0.0) {\n    @JvmOverloads fun f(a: String, b: Int = 0, c: String = \"abc\") { …… }\n}\n```\n\n> 上面的例子最终会生成如下代码：\n\n```java\n// 构造函数：\nFoo(int x, double y)\nFoo(int x)\n\n// 方法\nvoid f(String a, int b, String c) { }\nvoid f(String a, int b) { }\nvoid f(String a) { }\n```\n\n**5、用 @JvmName 解决签名冲突**\n\n> 有时我们想让一个 Kotlin 中的命名函数在字节码中有另外一个 JVM 名称，最突出的例子是由于*类型擦除*引发的，下面两个函数在kotlin中能同时定义，因为它们的 JVM 签名是一样的：\n\n```kotlin\nfun List<String>.filterValid(): List<String>\nfun List<Int>.filterValid(): List<Int>\n```\n\n> 我们可以用`@JvmName` 去标注其中的一个（或两个），并指定不同的名称作为参数\n\n```kotlin\nfun List<String>.filterValid(): List<String>\n\n@JvmName(\"filterValidInt\")\nfun List<Int>.filterValid(): List<Int>\n```\n\n> Java中调用\n\n```java\nList<String> stringArr = Arrays.asList(\"abc\", \"efa\", \"bde\");\nList<Integer> intArr = Arrays.asList(1, 2, 3, 4, 5);\nKotlinUseJvmNameKt.filterValid(stringArr);\nKotlinUseJvmNameKt.filterValidInt(intArr);\n```\n\n**6、受检异常**\n\n> Kotlin 没有受检异常。 所以通常 Kotlin 函数的 Java 签名不会声明抛出异常。 于是如果我们有一个这样的 Kotlin 函数\n\n```kotlin\n// example.kt\npackage demo\n\nfun foo() {\n    throw IOException()\n}\n```\n\n> 然后我们想要在 Java 中调用它并捕捉这个异常\n\n```java\n// Java\ntry {\n  demo.Example.foo();\n}\ncatch (IOException e) { // 错误：foo() 未在 throws 列表中声明 IOException\n  // ……\n}\n```\n\n> 因为 `foo()` 没有声明 `IOException`，我们从 Java 编译器得到了一个报错消息。 为了解决这个问题，要在 Kotlin 中使用 `@Throws` 注解\n\n```kotlin\n@Throws(IOException::class)\nfun foo() {\n    throw IOException()\n}\n```\n\n上面这些算是实际项目中混合开发的核心了。我们能有个提前的了解就可以。当我们遇到类似的问题的时候对这个问题有印象知道有办法解决就行，至于怎么解决再去网上查询也不迟。\n\n### Kotin引入的影响\n\n对于Android开发来说，kotlin的引入有如下方面的改变：\n\n* 1.基本不需要再写findViewById. 可通过静态布局引入直接使用布局Id，比ButterKnife更简洁。原理在[这里](https://blog.csdn.net/hust_twj/article/details/80290362)\n* 2.会增加很多可空性判断，需要我们来关注和处理。\n* 3.如何使用kotlin的语法特性让原有代码更简洁，逻辑更清晰。\n\n### 开发中的问题汇总\n\n**1.资源文件命名**\n\n由于可以直接在Fragment或者Activity中使用资源文件的id作为view的对象，但是以往，资源文件的id通常使用下划线命名例如：`android:id=\"@+id/buy_input_edit_text\"` ，java类中通常使用驼峰法命名。我们在使用时通过findViewById转换成buyInputEditText。但是现在如果直接在kotlin中使用buy_input_edit_text作为对象，会违背命名规范。所以建议使用kotlin后直接在资源文件中使用驼峰法命名id。就像这样：`android:id=\"@+id/buyInputEditText\"` 。\n\n**2.有些文件仍然需要使用findViewById**\n\n在不是Activity、Fragment或自定义view的一些类中使用布局id仍然需要手动的findViewById. 例如adapter、工具类等。但这毕竟是少数，可以接受。\n\n**3.变量定义时的非空设置**\n\n当我们转换一个现有的java文件到kotlin时，Android Stuido会自动帮我们做一些转换，经常碰到的情况是，当前页面的数据在网络请求后才能获取被赋值。所以在转换时默认会被定义成可空类型，在后续使用时每次调用都会进行空判断，或者非空断言：\n\n```kotlin\nval info : mInfo? = null\ntitleTv.text = mInfo?.title\ncontentTv.text = mInfo?.content\nif(mInfo?.isValid!!) ...\n```\n\n这样看上去整个类中就会增加密密麻麻的\"?\"，代码编译后也会生成很多不必要的空检查。所以如果我们能够确认这个属性只有在初始化后才会使用，那么可以添加lateInit修饰符。将代码简化：\n\n```kotlin\nlateinit val info : mInfo\ntitleTv.text = mInfo.title\nif(mInfo.isValid) ...\n```\n\n如果在使用过程中有些地方不确定被`lateinit`修饰对象是否被初始化，并且需要调用其属性，我们可以给该属性添加判断初始化的方法：\n\n```kotlin\nlateinit val info : mInfo\nfun isInitialzed() = ::info.isInitialized\n```\n\n另外需要注意的是，如果该变量在init{}语句块中有初始化，则不需要添加`lateinit`修饰符。\n\n**4.空判断的一些技巧**\n\n* ？和 ?：的巧妙用法\n\n在java中有三元表达式，可以方便的进行简单的判断并返回值。但是kotlin则需要使用if...else…表达式：\n\n```java\nint a = (info != null && info.value != null) ? info.value : 0 //java\n```\n\n```kotlin\nval a = if(info != null && info.value != null) info.value else 0 //kotlin\n```\n\n其实像上面在一连串空判断后不为空时取值本身，否则取默认值的例子很多，我们可以通过kotlin `?` 和 `?:`两个操作符让其变得更简单：\n\n```kotlin\nval a = info?.value?:0\n```\n\n* if判断条件可能为null的处理\n\n在kotlin中if中的判断结果要么是true要么是false,不能为null，所以很多时候自动转换会出现如下判断：\n\n```kotlin\nif(mDialog != null && mDialog!!.isShowing){\n    mDialog!!.dismiss()\n}\n```\n\n这个时候我们进行简化：\n\n```kotlin\nif(mDialog?.isShowing == true){\n    mDialog!!.dismiss()\n}\n```\n\n直接进行想要结果的判断就可以，这个是够不管前面的isShowing是false还是null.判断结果都是false.和上面的判断是等效的，同样判断其他类型的值相等也可以。\n\n但是需要注意的是，如果这个时候添加了else.在else中则是两种情况。我们需要做对应的处理。\n\n* `?.let{}` 简化同一个对象的多次非空判断\n\n像上面的例子就可以通此操作符继续优化：\n\n```kotlin\nmDialog?.let{\n    if(it.isShowing == true){\n        it.dismiss()\n    }\n}\n```\n\n可以看到let{}块中使用时可通过it进行访问，同时省去了所有的空检查\n\n* `!!` 非空断言谨慎使用\n\n同时上面的例子我们可以看到，我们已经判断了非空，所有后面 `mDialog!!.dismiss() ` 能够直接使用非空断言。在开发中我们尽量少使用非空断言，除非是在明确了不可能为null的情况。尤其是在通过java一键转kotlin的时候。我们需要对转换之后的逻辑进行确认。\n\n**5.as转换的问题**\n\n当我们在一键转换代码时，会遇到as转换自动为非空类型的问题，这会给代码带来很大的隐患。\n\n```java\nInfo info = (Info)data.getExtra(INFO); //java代码\n```\n\n自动转换成kotlin代码后：\n\n```kotlin\nval info = data.getExtra(INFO) as Info \n```\n\n这里需要我们手动的添加可空：`as Info?` ，避免找不到对象造成的类型转换出错。\n\n### 总结\n\n本篇文章从大家从kotlin与java混合开发的原理进行展开。介绍了混合开发中相互调用需要注意的问题，最后结合实际开发中的一些发现，告诉大家需要注意的问题。本文仅列出了当前发现的一些问题。如有后面有新的发现还会持续更新。\n\n如果还没有看过看过上篇对kotlin的简介，可以前往这里查看 👉[《kotlin混合开发上》](<https://carlwe.com/2019/04/30/Kotlin%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E4%B8%8A/>)","source":"_posts/kotlin混合开发下.md","raw":"---\ntitle: kotlin混合开发下\ndate: 2019-07-20 09:43:40\ntags: 技术\n---\n\n![](https://img.carlwe.com/kotlin_and_java_logo.png-h)\n\n<!--more-->\n\n> 回顾：上篇博客介绍了kotlin的一些基本语法和新特性。我们知道了kotlin会更加的实用、简洁和安全。\n\n### Kotlin混合开发原理\n\n上面我们了解到了kotlin如此多的好处，同时也是谷歌官方确认的Android开发的第一语言，那么我们如何在我们现有的java项目中引入kotlin呢，这里就要提到了kotlin的另一个特性：互操作性。\n\n> 互操作性：可以放心的使用现有的库、可以自由的在Java和Kotlin源码文件之间切换、混合开发时可以在不同语言的代码中单步调试、重构java代码时kotlin也会正确执行。\n\n有了这个特性使用起来就方便多啦，这就代表着我们能够直接在现有的项目中直接使用kotlin：在kotlin的代码中可以调用java代码，在java代码中也可以轻松调用kotlin代码。那这背后的原理是什么呢？我们下面来分析。\n\n#### App构建过程介绍\n\n![](https://img.carlwe.com/kotlin_build_process.png)\n\n我们先从App的构建过程讲起，和 Java 一样， Kotlin 也是编译型语言。所以你必须先编译，然后生成.class字节码才能正确执行。不同的是，Kotlin有自己的编译器，会识别对应的kotlin语法，同时拥有kotlin自己的运行时库，提供一些java所不具备的功能。另外用 Kotiin 编译器编译的代码依赖 Kotlin 运行时库。它包括了 Kotlin 自己的标准库类的定义，以及 Kotiin对标准 JavaAPI的扩展。 Gradle 还会帮我们把 Kotlin 运行时库作为依赖加入到你的应用程序中。运行时库需要和你的应用程序一起分发 。所以加入kotlin之后当你的应用打包后，通过dexcount工具你会发现增加了相当一部分kotlin的代码（大概4000个方法），不过包体积的增大相对于kotlin给我们带来的方便可以忽略。\n\n![](https://img.carlwe.com/kotlin_added_methods.png-m)\n\n#### 编译器工作过程\n\n上面介绍到kotlin和java最主要的不同在与编译器，那我们就来看看编译器的工作过程。\n\n![](https://img.carlwe.com/kotlin_compile_progress.png)\n\njava和kotlin的编译过程类似。在大学中上过编译原理的同学对这个肯定不会陌生。简单来说，上面整个过程其实就是翻译我们写代码的过程，下面介绍如下三个概念：\n\n> 词法分析：识别代码中的关键字、元算符，同识别一个句子中的单词类似。\n>\n> 语法分析：将上面识别到的单词序列组合成各类语法短语，类似学生用多个词语组句一样。\n>\n> 语义分析：判断组合成的句子是否符合编码规范（变量定义类型是否正确，运算符是否匹配）。类似检查我们说话时是否有病句。\n\n上面流程中语义分析完成后就会进入到目标代码生成阶段。字节码生成器会负责该项工作，生成最后的JVM字节码。那么kotlin和java的最大区别其实就是在于字节码生成器，kotlin会按照自己的语法规则，生成对应的字节码，下面让我们来详细看下目标代码生成的过程。\n\n#### 目标代码生成\n\n![](https://img.carlwe.com/kotlin_target_code.png)\n\n通过最简单的变量生成Set、Get方法为例，我们首先定义了一个Int类型的变量a初始值为1，我们找到kotlin编译器的源码发现，kotlin在目标代码生成阶段多了判断是否需要生成set()、get()方法的逻辑，通过AndroidStuido的Decompiled功能我们能够直接看到编译之后的代码。可以看到自动帮我们生成了setA()和getA()两个方法。\n\n可见Kotlin编译器在编译前端（即词法分析、语法分析、语义分析、中间代码生成）并没有做让人感到很厉害的事情，和Java是基本一致的，所以混合开发就变得水到渠成了。与Java相比，所与众不同的细节是在编译后端（目标代码生成）环节。Kotlin编译器在目标代码生成环节做了很多**类似于Java封装**的事情，比如自动生成Getter/Setter代码的生成、Companion转变成静态类、修改类属性为final不可继承等工作。可以说，大部分Kotlin的特性都在这个环节处理产生。那么总结来说：Kotlin将我们本来在代码层做的一些封装工作转移到了编译后端的阶段，这就是为什么kotlin使用起来如此的简单的原因了。\n\n上面我们了解啦kotlin混合开发的原理。在介绍混合开发之前，我们首先需要知道：\n\n> 同一个文件中的代码要么是kotlin代码要么是java代码。混合开发指的是在不同文件中调用彼此的代码。\n\n混合开发大部分时候并不需要关心太多：我们可以像往常一样直接在java代码中调用kotlin定义的方法和属性。也可以直接在kotlin代码中调用java代码定义的方法和属性，你并不会感觉到会有多大的差异，但是由于语言特性，在某些功能的实现上我们需要做一些特殊的处理。那么下面我们就分别从相互调用的两个方向来进行介绍**（阅读需要有java基础，可选择性跳过）**\n\n### Kotlin中调用Java代码\n\n![](https://img.carlwe.com/use_java_in_kotlin.png)\n\n**1、Getter和Setter**\n\n> 遵循 Java 约定的 getter 和 setter 的方法（名称以 `get` 开头的无参数方法和以 `set` 开头的单参数方法）在 Kotlin 中表示为属性。 `Boolean` 访问器方法（其中 getter 的名称以 `is` 开头而 setter 的名称以 `set` 开头）会表示为与 getter 方法具有相同名称的属性。 例如:\n\n```kotlin\n//kotlin\nval myHouse = House(\"5th Avenue,NY.\", 200000.0, true)//java类House\nmyHouse.price = 300000.0   //调用setPrice()方法\nmyHouse.isNewHouse = false //调用isNewHouse()方法\nprintln(\"price:${myHouse.price}\\nisNewHouse:${myHouse.isNewHouse}\")//调用getPrice()方法\n```\n\n**2、Java中使用了Kotlin的关键字**\n\n> 一些 Kotlin 关键字在 Java 中是有效标识符：*in*、 *object*、 *is* 等等。 如果一个 Java 库使用了 Kotlin 关键字作为方法，你仍然可以通过反引号（`）字符转义它来调用该方法:\n\n```kotlin\n//kotlin\nfun main(args: Array<String>) {\n    val arr = arrayListOf(\"kotlin\", \"java\", \"and\")\n    //将 Kotlin 中是关键字的 Java 标识符进行转义\n    println(StringUtil.`in`(arr))\n}\n```\n\n**3、空安全与平台类型**\n\n> Java 中的任何引用都可能是 *null*，这使得 Kotlin 对来自 Java 的对象要求严格空安全是不现实的。 Java 声明的类型在 Kotlin 中会被特别对待并称为*平台类型*。\n\n```java\n//java\npublic interface DataParser<T> {\n    void parseData(String input, List<T> output, List<String> errors);\n}\n```\n\n> kotlin类实现java的DataParser接口时，每个参数的类型是否可空、集合是否可变，可以根据实际情况来定义。\n\n```kotlin\n//kotlin\nclass PersonParse:DataParser<Person>{\n    override fun parseData(input:String, \n                           output:MutableList<Person>, \n                           //根据实际情况也可以定义为MutableList<String>\n                           errors:MutableList<String?>)\n}\n```\n\n**4、Java可变参数**\n\n> Java 类有时声明一个具有可变数量参数（varargs）的方法来使用索引\n\n```java\n//java\npublic class JavaArrayExample {\n\t//接受可变参数\n    public List<Integer> removeZero(int... intArr) {\n        List<Integer> resultArr = new ArrayList<>();\n        for (int value : intArr) {\n            if (value != 0) {\n                resultArr.add(value);\n            }\n        }\n        return resultArr;\n    }\n}\n```\n\n> 在这种情况下，你需要使用展开运算符 `*` 来传递 `IntArray`\n\n```kotlin\n//kotlin\nval javaObj = JavaArrayExample()\nval array = intArrayOf(0,1,2,3)\nprintln(javaObj.removeZero(*array))\n```\n\n**5、Java数组**\n\n> Java 平台上，数组会使用原生数据类型以避免装箱/拆箱操作的开销。 由于 Kotlin 隐藏了这些实现细节，因此需要一个变通方法来与 Java 代码进行交互。 对于每种原生类型的数组都有一个特化的类（`IntArray`、 `DoubleArray`、 `CharArray` 等等）来处理这种情况。 它们与 `Array` 类无关，并且会编译成 Java 原生类型数组以获得最佳性能，Java代码如下：\n\n```java\n//java\npublic class JavaArrayMethod {\n    public void removeIndices(int[] indices){\n    }\n}\n```\n\n> kotlin调用java代码\n\n```kotlin\nval javaObj = JavaArrayMethod()\nval array = intArrayOf(0, 1, 2, 3)\njavaObj.removeIndices(array)  // 将 int[] 传给方法\narray[1] = array[1] * 2 // 不会实际生成对 get() 和 set() 的调用\nfor (x in array) {// 不会创建迭代器\n    println(x)\n}\n```\n\n**6、Kotlin中的 Java 泛型**\n\n> Java 的通配符转换成类型投影，Java的原始类型转换成星投影，Java代码：\n\n```java\n//java\npublic class JavaPattern<Animal> {\n    public void Test1(JavaPattern<? extends Animal> list) {}\n    public void Test2(JavaPattern<? super Animal> list) {}\n    \n    public static void printColl(ArrayList<?> al) {\n        Iterator<?> it = al.iterator();\n        while (it.hasNext()) {\n            System.out.println(it.next().toString());\n        }\n    }\n}\n```\n\n> 转换后的kotlin代码\n\n```kotlin\nclass KotlinPattern1<Animal> {\n    fun Test1(list: KotlinPattern1<out Animal>) {}\n    fun Test2(list: KotlinPattern1<in Animal>) {}\n    \n    fun printColl(al: ArrayList<*>) {\n        val it = al.iterator()\n        while (it.hasNext()) {\n            println(it.next().toString())\n        }\n    }\n}\n```\n\n**7、在 Kotlin 中使用 JNI**\n\n> 要声明一个在本地（C 或 C++）代码中实现的函数，你需要使用 `external` 修饰符来标记它\n\n```kotlin\nexternal fun add(x: Int,y: Int): Double\n```\n\n### Java中调用Kotlin代码\n\n![](https://img.carlwe.com/use_kotlin_in_java.png)\n\n**1、属性**\n\n> Kotlin 属性会编译成以下 Java 元素：getter 方法，名称通过加前缀 `get` 算出；setter 方法，名称通过加前缀 `set` 算出（只适用于 `var` 属性，kotlin代码：\n\n```kotlin\nvar firstName: String\n```\n\n> 在编译时会生成如下Java代码：\n\n```java\nprivate String firstName;\npublic String getFirstName() {\n    return firstName;\n}\npublic void setFirstName(String firstName) {\n    this.firstName = firstName;\n}\n```\n\n**2、包级函数**\n\n> Kotlin文件`File`中声明的所有的函数和属性，包括扩展函数， 都编译成一个名为`FileKt` 的 Java 类的静态方法，可以使用 `@JvmName` 注解修改生成的 Java 类的类名：\n\n```kotlin\n@file:JvmName(\"Utils\")\npackage com.ltz.kotlintest.usekotlininjava.example2\nfun printLowerCase(str: String) {\n    println(str.toLowerCase())\n}\n```\n\n> java中调用\n\n```java\nUtils.printLowerCase(\"Hello XiaoHui\");\n```\n\n> 如果多个文件中生成了相同的 Java 类名（包名相同并且类名相同或者有相同的 `@JvmName` 注解）通常是错误的。然而，编译器能够生成一个单一的 Java 外观类，它具有指定的名称且包含来自所有文件中具有该名称的所有声明。 要启用生成这样的外观，请在所有相关文件中使用 @JvmMultifileClass 注解\n\n```java\n//Fun.kt\n@file:JvmName(\"Utils\")\n@file:JvmMultifileClass\npackage com.ltz.kotlintest.usekotlininjava.example2\n\nfun printLowerCase(str: String) {\n    println(str.toLowerCase())\n}\n```\n\n```kotlin\n//Fun1.kt\n@file:JvmName(\"Utils\")//@JvmName 注解修改生成的 Java 类的类名\n@file:JvmMultifileClass\npackage com.ltz.kotlintest.usekotlininjava.example2\n\nfun printUpperCase(str: String) {\n    println(str.toUpperCase())\n}\n```\n\n```java\n//Java\nUtils.printUpperCase(\"hello xiaohui\");\nUtils.printLowerCase(\"Hello XiaoHui\");\n```\n\n**3、静态字段和方法**\n\n- 静态字段\n\n> 在命名对象或伴生对象中声明的 Kotlin 属性会在该命名对象或包含伴生对象的类中具有静态幕后字段。\n>\n> 通常这些字段是私有的，但可以通过以下方式之一暴露出来：\n>\n> - `@JvmField` 注解；\n> - `lateinit` 修饰符；\n> - `const` 修饰符。\n\n```kotlin\n//Kotlin\nclass Key(val value: Int) {\n    //伴生对象\n    companion object {\n        @JvmField //使用 @JvmField 标注这样的属性使其成为与属性本身具有相同可见性的静态字段\n        val COMPARATOR: Comparator<Key> = compareBy<Key> { it.value }\n    }\n}\n//命名对象\nobject Singleton {\n     lateinit var key: Key\n      const val SingletonConst = 1\n}\n```\n\n```java\n//Java\nKey.COMPARATOR.compare(new Key(1), new Key(2));\nSingleton.key = new Key(1);\nint c = Singleton.SingletonConst;\n```\n\n- 静态方法\n\n> Kotlin 可以为命名对象或伴生对象中定义的函数生成静态方法，如果你将这些函数标注为 `@JvmStatic` 的话，编译器既会在相应对象的类中生成静态方法，也会在对象自身中生成实例方法。 例如\n\n```kotlin\n//kotlin\nclass C {\n    companion object {//伴生对象\n        @JvmStatic fun foo() {}\n        fun bar() {}\n    }\n}\n//命名对象\nobject Obj {\n    @JvmStatic fun foo() {}\n    fun bar() {}\n}\n```\n\n```java\n//Java \nC.foo(); // 没问题\nC.bar(); // 错误：不是一个静态方法\nC.Companion.foo(); // 保留实例方法\nC.Companion.bar(); // 唯一的工作方式\n\nObj.foo(); // 没问题\nObj.bar(); // 错误\nObj.INSTANCE.bar(); // 没问题，通过单例实例调用\nObj.INSTANCE.foo(); // 也没问题\n```\n\n**4、生成重载**\n\n> 如果你写一个有默认参数值的 Kotlin 函数，在 Java 中只会有一个所有参数都存在的完整参数签名的方法可见，如果希望向 Java 调用者暴露多个重载，可以使用 `@JvmOverloads` 注解。\n\n```kotlin\n//kotlin\nclass Foo @JvmOverloads constructor(x: Int, y: Double = 0.0) {\n    @JvmOverloads fun f(a: String, b: Int = 0, c: String = \"abc\") { …… }\n}\n```\n\n> 上面的例子最终会生成如下代码：\n\n```java\n// 构造函数：\nFoo(int x, double y)\nFoo(int x)\n\n// 方法\nvoid f(String a, int b, String c) { }\nvoid f(String a, int b) { }\nvoid f(String a) { }\n```\n\n**5、用 @JvmName 解决签名冲突**\n\n> 有时我们想让一个 Kotlin 中的命名函数在字节码中有另外一个 JVM 名称，最突出的例子是由于*类型擦除*引发的，下面两个函数在kotlin中能同时定义，因为它们的 JVM 签名是一样的：\n\n```kotlin\nfun List<String>.filterValid(): List<String>\nfun List<Int>.filterValid(): List<Int>\n```\n\n> 我们可以用`@JvmName` 去标注其中的一个（或两个），并指定不同的名称作为参数\n\n```kotlin\nfun List<String>.filterValid(): List<String>\n\n@JvmName(\"filterValidInt\")\nfun List<Int>.filterValid(): List<Int>\n```\n\n> Java中调用\n\n```java\nList<String> stringArr = Arrays.asList(\"abc\", \"efa\", \"bde\");\nList<Integer> intArr = Arrays.asList(1, 2, 3, 4, 5);\nKotlinUseJvmNameKt.filterValid(stringArr);\nKotlinUseJvmNameKt.filterValidInt(intArr);\n```\n\n**6、受检异常**\n\n> Kotlin 没有受检异常。 所以通常 Kotlin 函数的 Java 签名不会声明抛出异常。 于是如果我们有一个这样的 Kotlin 函数\n\n```kotlin\n// example.kt\npackage demo\n\nfun foo() {\n    throw IOException()\n}\n```\n\n> 然后我们想要在 Java 中调用它并捕捉这个异常\n\n```java\n// Java\ntry {\n  demo.Example.foo();\n}\ncatch (IOException e) { // 错误：foo() 未在 throws 列表中声明 IOException\n  // ……\n}\n```\n\n> 因为 `foo()` 没有声明 `IOException`，我们从 Java 编译器得到了一个报错消息。 为了解决这个问题，要在 Kotlin 中使用 `@Throws` 注解\n\n```kotlin\n@Throws(IOException::class)\nfun foo() {\n    throw IOException()\n}\n```\n\n上面这些算是实际项目中混合开发的核心了。我们能有个提前的了解就可以。当我们遇到类似的问题的时候对这个问题有印象知道有办法解决就行，至于怎么解决再去网上查询也不迟。\n\n### Kotin引入的影响\n\n对于Android开发来说，kotlin的引入有如下方面的改变：\n\n* 1.基本不需要再写findViewById. 可通过静态布局引入直接使用布局Id，比ButterKnife更简洁。原理在[这里](https://blog.csdn.net/hust_twj/article/details/80290362)\n* 2.会增加很多可空性判断，需要我们来关注和处理。\n* 3.如何使用kotlin的语法特性让原有代码更简洁，逻辑更清晰。\n\n### 开发中的问题汇总\n\n**1.资源文件命名**\n\n由于可以直接在Fragment或者Activity中使用资源文件的id作为view的对象，但是以往，资源文件的id通常使用下划线命名例如：`android:id=\"@+id/buy_input_edit_text\"` ，java类中通常使用驼峰法命名。我们在使用时通过findViewById转换成buyInputEditText。但是现在如果直接在kotlin中使用buy_input_edit_text作为对象，会违背命名规范。所以建议使用kotlin后直接在资源文件中使用驼峰法命名id。就像这样：`android:id=\"@+id/buyInputEditText\"` 。\n\n**2.有些文件仍然需要使用findViewById**\n\n在不是Activity、Fragment或自定义view的一些类中使用布局id仍然需要手动的findViewById. 例如adapter、工具类等。但这毕竟是少数，可以接受。\n\n**3.变量定义时的非空设置**\n\n当我们转换一个现有的java文件到kotlin时，Android Stuido会自动帮我们做一些转换，经常碰到的情况是，当前页面的数据在网络请求后才能获取被赋值。所以在转换时默认会被定义成可空类型，在后续使用时每次调用都会进行空判断，或者非空断言：\n\n```kotlin\nval info : mInfo? = null\ntitleTv.text = mInfo?.title\ncontentTv.text = mInfo?.content\nif(mInfo?.isValid!!) ...\n```\n\n这样看上去整个类中就会增加密密麻麻的\"?\"，代码编译后也会生成很多不必要的空检查。所以如果我们能够确认这个属性只有在初始化后才会使用，那么可以添加lateInit修饰符。将代码简化：\n\n```kotlin\nlateinit val info : mInfo\ntitleTv.text = mInfo.title\nif(mInfo.isValid) ...\n```\n\n如果在使用过程中有些地方不确定被`lateinit`修饰对象是否被初始化，并且需要调用其属性，我们可以给该属性添加判断初始化的方法：\n\n```kotlin\nlateinit val info : mInfo\nfun isInitialzed() = ::info.isInitialized\n```\n\n另外需要注意的是，如果该变量在init{}语句块中有初始化，则不需要添加`lateinit`修饰符。\n\n**4.空判断的一些技巧**\n\n* ？和 ?：的巧妙用法\n\n在java中有三元表达式，可以方便的进行简单的判断并返回值。但是kotlin则需要使用if...else…表达式：\n\n```java\nint a = (info != null && info.value != null) ? info.value : 0 //java\n```\n\n```kotlin\nval a = if(info != null && info.value != null) info.value else 0 //kotlin\n```\n\n其实像上面在一连串空判断后不为空时取值本身，否则取默认值的例子很多，我们可以通过kotlin `?` 和 `?:`两个操作符让其变得更简单：\n\n```kotlin\nval a = info?.value?:0\n```\n\n* if判断条件可能为null的处理\n\n在kotlin中if中的判断结果要么是true要么是false,不能为null，所以很多时候自动转换会出现如下判断：\n\n```kotlin\nif(mDialog != null && mDialog!!.isShowing){\n    mDialog!!.dismiss()\n}\n```\n\n这个时候我们进行简化：\n\n```kotlin\nif(mDialog?.isShowing == true){\n    mDialog!!.dismiss()\n}\n```\n\n直接进行想要结果的判断就可以，这个是够不管前面的isShowing是false还是null.判断结果都是false.和上面的判断是等效的，同样判断其他类型的值相等也可以。\n\n但是需要注意的是，如果这个时候添加了else.在else中则是两种情况。我们需要做对应的处理。\n\n* `?.let{}` 简化同一个对象的多次非空判断\n\n像上面的例子就可以通此操作符继续优化：\n\n```kotlin\nmDialog?.let{\n    if(it.isShowing == true){\n        it.dismiss()\n    }\n}\n```\n\n可以看到let{}块中使用时可通过it进行访问，同时省去了所有的空检查\n\n* `!!` 非空断言谨慎使用\n\n同时上面的例子我们可以看到，我们已经判断了非空，所有后面 `mDialog!!.dismiss() ` 能够直接使用非空断言。在开发中我们尽量少使用非空断言，除非是在明确了不可能为null的情况。尤其是在通过java一键转kotlin的时候。我们需要对转换之后的逻辑进行确认。\n\n**5.as转换的问题**\n\n当我们在一键转换代码时，会遇到as转换自动为非空类型的问题，这会给代码带来很大的隐患。\n\n```java\nInfo info = (Info)data.getExtra(INFO); //java代码\n```\n\n自动转换成kotlin代码后：\n\n```kotlin\nval info = data.getExtra(INFO) as Info \n```\n\n这里需要我们手动的添加可空：`as Info?` ，避免找不到对象造成的类型转换出错。\n\n### 总结\n\n本篇文章从大家从kotlin与java混合开发的原理进行展开。介绍了混合开发中相互调用需要注意的问题，最后结合实际开发中的一些发现，告诉大家需要注意的问题。本文仅列出了当前发现的一些问题。如有后面有新的发现还会持续更新。\n\n如果还没有看过看过上篇对kotlin的简介，可以前往这里查看 👉[《kotlin混合开发上》](<https://carlwe.com/2019/04/30/Kotlin%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E4%B8%8A/>)","slug":"kotlin混合开发下","published":1,"updated":"2020-08-18T02:25:58.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnp6000kt57sgmgs0umu","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/kotlin_and_java_logo.png-h\" alt=\"\"></p>\n<a id=\"more\"></a>\n<blockquote>\n<p>回顾：上篇博客介绍了kotlin的一些基本语法和新特性。我们知道了kotlin会更加的实用、简洁和安全。</p>\n</blockquote>\n<h3 id=\"Kotlin混合开发原理\"><a href=\"#Kotlin混合开发原理\" class=\"headerlink\" title=\"Kotlin混合开发原理\"></a>Kotlin混合开发原理</h3><p>上面我们了解到了kotlin如此多的好处，同时也是谷歌官方确认的Android开发的第一语言，那么我们如何在我们现有的java项目中引入kotlin呢，这里就要提到了kotlin的另一个特性：互操作性。</p>\n<blockquote>\n<p>互操作性：可以放心的使用现有的库、可以自由的在Java和Kotlin源码文件之间切换、混合开发时可以在不同语言的代码中单步调试、重构java代码时kotlin也会正确执行。</p>\n</blockquote>\n<p>有了这个特性使用起来就方便多啦，这就代表着我们能够直接在现有的项目中直接使用kotlin：在kotlin的代码中可以调用java代码，在java代码中也可以轻松调用kotlin代码。那这背后的原理是什么呢？我们下面来分析。</p>\n<h4 id=\"App构建过程介绍\"><a href=\"#App构建过程介绍\" class=\"headerlink\" title=\"App构建过程介绍\"></a>App构建过程介绍</h4><p><img src=\"https://img.carlwe.com/kotlin_build_process.png\" alt=\"\"></p>\n<p>我们先从App的构建过程讲起，和 Java 一样， Kotlin 也是编译型语言。所以你必须先编译，然后生成.class字节码才能正确执行。不同的是，Kotlin有自己的编译器，会识别对应的kotlin语法，同时拥有kotlin自己的运行时库，提供一些java所不具备的功能。另外用 Kotiin 编译器编译的代码依赖 Kotlin 运行时库。它包括了 Kotlin 自己的标准库类的定义，以及 Kotiin对标准 JavaAPI的扩展。 Gradle 还会帮我们把 Kotlin 运行时库作为依赖加入到你的应用程序中。运行时库需要和你的应用程序一起分发 。所以加入kotlin之后当你的应用打包后，通过dexcount工具你会发现增加了相当一部分kotlin的代码（大概4000个方法），不过包体积的增大相对于kotlin给我们带来的方便可以忽略。</p>\n<p><img src=\"https://img.carlwe.com/kotlin_added_methods.png-m\" alt=\"\"></p>\n<h4 id=\"编译器工作过程\"><a href=\"#编译器工作过程\" class=\"headerlink\" title=\"编译器工作过程\"></a>编译器工作过程</h4><p>上面介绍到kotlin和java最主要的不同在与编译器，那我们就来看看编译器的工作过程。</p>\n<p><img src=\"https://img.carlwe.com/kotlin_compile_progress.png\" alt=\"\"></p>\n<p>java和kotlin的编译过程类似。在大学中上过编译原理的同学对这个肯定不会陌生。简单来说，上面整个过程其实就是翻译我们写代码的过程，下面介绍如下三个概念：</p>\n<blockquote>\n<p>词法分析：识别代码中的关键字、元算符，同识别一个句子中的单词类似。</p>\n<p>语法分析：将上面识别到的单词序列组合成各类语法短语，类似学生用多个词语组句一样。</p>\n<p>语义分析：判断组合成的句子是否符合编码规范（变量定义类型是否正确，运算符是否匹配）。类似检查我们说话时是否有病句。</p>\n</blockquote>\n<p>上面流程中语义分析完成后就会进入到目标代码生成阶段。字节码生成器会负责该项工作，生成最后的JVM字节码。那么kotlin和java的最大区别其实就是在于字节码生成器，kotlin会按照自己的语法规则，生成对应的字节码，下面让我们来详细看下目标代码生成的过程。</p>\n<h4 id=\"目标代码生成\"><a href=\"#目标代码生成\" class=\"headerlink\" title=\"目标代码生成\"></a>目标代码生成</h4><p><img src=\"https://img.carlwe.com/kotlin_target_code.png\" alt=\"\"></p>\n<p>通过最简单的变量生成Set、Get方法为例，我们首先定义了一个Int类型的变量a初始值为1，我们找到kotlin编译器的源码发现，kotlin在目标代码生成阶段多了判断是否需要生成set()、get()方法的逻辑，通过AndroidStuido的Decompiled功能我们能够直接看到编译之后的代码。可以看到自动帮我们生成了setA()和getA()两个方法。</p>\n<p>可见Kotlin编译器在编译前端（即词法分析、语法分析、语义分析、中间代码生成）并没有做让人感到很厉害的事情，和Java是基本一致的，所以混合开发就变得水到渠成了。与Java相比，所与众不同的细节是在编译后端（目标代码生成）环节。Kotlin编译器在目标代码生成环节做了很多<strong>类似于Java封装</strong>的事情，比如自动生成Getter/Setter代码的生成、Companion转变成静态类、修改类属性为final不可继承等工作。可以说，大部分Kotlin的特性都在这个环节处理产生。那么总结来说：Kotlin将我们本来在代码层做的一些封装工作转移到了编译后端的阶段，这就是为什么kotlin使用起来如此的简单的原因了。</p>\n<p>上面我们了解啦kotlin混合开发的原理。在介绍混合开发之前，我们首先需要知道：</p>\n<blockquote>\n<p>同一个文件中的代码要么是kotlin代码要么是java代码。混合开发指的是在不同文件中调用彼此的代码。</p>\n</blockquote>\n<p>混合开发大部分时候并不需要关心太多：我们可以像往常一样直接在java代码中调用kotlin定义的方法和属性。也可以直接在kotlin代码中调用java代码定义的方法和属性，你并不会感觉到会有多大的差异，但是由于语言特性，在某些功能的实现上我们需要做一些特殊的处理。那么下面我们就分别从相互调用的两个方向来进行介绍<strong>（阅读需要有java基础，可选择性跳过）</strong></p>\n<h3 id=\"Kotlin中调用Java代码\"><a href=\"#Kotlin中调用Java代码\" class=\"headerlink\" title=\"Kotlin中调用Java代码\"></a>Kotlin中调用Java代码</h3><p><img src=\"https://img.carlwe.com/use_java_in_kotlin.png\" alt=\"\"></p>\n<p><strong>1、Getter和Setter</strong></p>\n<blockquote>\n<p>遵循 Java 约定的 getter 和 setter 的方法（名称以 <code>get</code> 开头的无参数方法和以 <code>set</code> 开头的单参数方法）在 Kotlin 中表示为属性。 <code>Boolean</code> 访问器方法（其中 getter 的名称以 <code>is</code> 开头而 setter 的名称以 <code>set</code> 开头）会表示为与 getter 方法具有相同名称的属性。 例如:</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//kotlin</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> myHouse = House(<span class=\"string\">\"5th Avenue,NY.\"</span>, <span class=\"number\">200000.0</span>, <span class=\"literal\">true</span>)<span class=\"comment\">//java类House</span></span><br><span class=\"line\">myHouse.price = <span class=\"number\">300000.0</span>   <span class=\"comment\">//调用setPrice()方法</span></span><br><span class=\"line\">myHouse.isNewHouse = <span class=\"literal\">false</span> <span class=\"comment\">//调用isNewHouse()方法</span></span><br><span class=\"line\">println(<span class=\"string\">\"price:<span class=\"subst\">$&#123;myHouse.price&#125;</span>\\nisNewHouse:<span class=\"subst\">$&#123;myHouse.isNewHouse&#125;</span>\"</span>)<span class=\"comment\">//调用getPrice()方法</span></span><br></pre></td></tr></table></figure>\n<p><strong>2、Java中使用了Kotlin的关键字</strong></p>\n<blockquote>\n<p>一些 Kotlin 关键字在 Java 中是有效标识符：<em>in</em>、 <em>object</em>、 <em>is</em> 等等。 如果一个 Java 库使用了 Kotlin 关键字作为方法，你仍然可以通过反引号（`）字符转义它来调用该方法:</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//kotlin</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> arr = arrayListOf(<span class=\"string\">\"kotlin\"</span>, <span class=\"string\">\"java\"</span>, <span class=\"string\">\"and\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//将 Kotlin 中是关键字的 Java 标识符进行转义</span></span><br><span class=\"line\">    println(StringUtil.`<span class=\"keyword\">in</span>`(arr))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3、空安全与平台类型</strong></p>\n<blockquote>\n<p>Java 中的任何引用都可能是 <em>null</em>，这使得 Kotlin 对来自 Java 的对象要求严格空安全是不现实的。 Java 声明的类型在 Kotlin 中会被特别对待并称为<em>平台类型</em>。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DataParser</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">parseData</span><span class=\"params\">(String input, List&lt;T&gt; output, List&lt;String&gt; errors)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>kotlin类实现java的DataParser接口时，每个参数的类型是否可空、集合是否可变，可以根据实际情况来定义。</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//kotlin</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonParse</span>:<span class=\"type\">DataParser</span>&lt;<span class=\"type\">Person</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">parseData</span><span class=\"params\">(input:<span class=\"type\">String</span>, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           output:<span class=\"type\">MutableList</span>&lt;<span class=\"type\">Person</span>&gt;, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"comment\">//根据实际情况也可以定义为MutableList&lt;String&gt;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           errors:<span class=\"type\">MutableList</span>&lt;<span class=\"type\">String</span>?&gt;)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4、Java可变参数</strong></p>\n<blockquote>\n<p>Java 类有时声明一个具有可变数量参数（varargs）的方法来使用索引</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaArrayExample</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//接受可变参数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">removeZero</span><span class=\"params\">(<span class=\"keyword\">int</span>... intArr)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; resultArr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : intArr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                resultArr.add(value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultArr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在这种情况下，你需要使用展开运算符 <code>*</code> 来传递 <code>IntArray</code></p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//kotlin</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> javaObj = JavaArrayExample()</span><br><span class=\"line\"><span class=\"keyword\">val</span> array = intArrayOf(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">println(javaObj.removeZero(*array))</span><br></pre></td></tr></table></figure>\n<p><strong>5、Java数组</strong></p>\n<blockquote>\n<p>Java 平台上，数组会使用原生数据类型以避免装箱/拆箱操作的开销。 由于 Kotlin 隐藏了这些实现细节，因此需要一个变通方法来与 Java 代码进行交互。 对于每种原生类型的数组都有一个特化的类（<code>IntArray</code>、 <code>DoubleArray</code>、 <code>CharArray</code> 等等）来处理这种情况。 它们与 <code>Array</code> 类无关，并且会编译成 Java 原生类型数组以获得最佳性能，Java代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaArrayMethod</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeIndices</span><span class=\"params\">(<span class=\"keyword\">int</span>[] indices)</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>kotlin调用java代码</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> javaObj = JavaArrayMethod()</span><br><span class=\"line\"><span class=\"keyword\">val</span> array = intArrayOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">javaObj.removeIndices(array)  <span class=\"comment\">// 将 int[] 传给方法</span></span><br><span class=\"line\">array[<span class=\"number\">1</span>] = array[<span class=\"number\">1</span>] * <span class=\"number\">2</span> <span class=\"comment\">// 不会实际生成对 get() 和 set() 的调用</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (x <span class=\"keyword\">in</span> array) &#123;<span class=\"comment\">// 不会创建迭代器</span></span><br><span class=\"line\">    println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>6、Kotlin中的 Java 泛型</strong></p>\n<blockquote>\n<p>Java 的通配符转换成类型投影，Java的原始类型转换成星投影，Java代码：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaPattern</span>&lt;<span class=\"title\">Animal</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test1</span><span class=\"params\">(JavaPattern&lt;? extends Animal&gt; list)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test2</span><span class=\"params\">(JavaPattern&lt;? <span class=\"keyword\">super</span> Animal&gt; list)</span> </span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printColl</span><span class=\"params\">(ArrayList&lt;?&gt; al)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;?&gt; it = al.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">            System.out.println(it.next().toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>转换后的kotlin代码</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KotlinPattern1</span>&lt;<span class=\"type\">Animal</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Test1</span><span class=\"params\">(list: <span class=\"type\">KotlinPattern1</span>&lt;<span class=\"type\">out</span> <span class=\"type\">Animal</span>&gt;)</span></span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Test2</span><span class=\"params\">(list: <span class=\"type\">KotlinPattern1</span>&lt;<span class=\"type\">in</span> <span class=\"type\">Animal</span>&gt;)</span></span> &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printColl</span><span class=\"params\">(al: <span class=\"type\">ArrayList</span>&lt;*&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> it = al.iterator()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">            println(it.next().toString())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>7、在 Kotlin 中使用 JNI</strong></p>\n<blockquote>\n<p>要声明一个在本地（C 或 C++）代码中实现的函数，你需要使用 <code>external</code> 修饰符来标记它</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">external</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">add</span><span class=\"params\">(x: <span class=\"type\">Int</span>,y: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Double</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Java中调用Kotlin代码\"><a href=\"#Java中调用Kotlin代码\" class=\"headerlink\" title=\"Java中调用Kotlin代码\"></a>Java中调用Kotlin代码</h3><p><img src=\"https://img.carlwe.com/use_kotlin_in_java.png\" alt=\"\"></p>\n<p><strong>1、属性</strong></p>\n<blockquote>\n<p>Kotlin 属性会编译成以下 Java 元素：getter 方法，名称通过加前缀 <code>get</code> 算出；setter 方法，名称通过加前缀 <code>set</code> 算出（只适用于 <code>var</code> 属性，kotlin代码：</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> firstName: String</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在编译时会生成如下Java代码：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> String firstName;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFirstName</span><span class=\"params\">(String firstName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.firstName = firstName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2、包级函数</strong></p>\n<blockquote>\n<p>Kotlin文件<code>File</code>中声明的所有的函数和属性，包括扩展函数， 都编译成一个名为<code>FileKt</code> 的 Java 类的静态方法，可以使用 <code>@JvmName</code> 注解修改生成的 Java 类的类名：</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@file:JvmName</span>(<span class=\"string\">\"Utils\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">package</span> com.ltz.kotlintest.usekotlininjava.example2</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printLowerCase</span><span class=\"params\">(str: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    println(str.toLowerCase())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>java中调用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Utils.printLowerCase(<span class=\"string\">\"Hello XiaoHui\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果多个文件中生成了相同的 Java 类名（包名相同并且类名相同或者有相同的 <code>@JvmName</code> 注解）通常是错误的。然而，编译器能够生成一个单一的 Java 外观类，它具有指定的名称且包含来自所有文件中具有该名称的所有声明。 要启用生成这样的外观，请在所有相关文件中使用 @JvmMultifileClass 注解</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Fun.kt</span></span><br><span class=\"line\"><span class=\"meta\">@file</span>:JvmName(<span class=\"string\">\"Utils\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@file</span>:JvmMultifileClass</span><br><span class=\"line\"><span class=\"keyword\">package</span> com.ltz.kotlintest.usekotlininjava.example2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">printLowerCase</span><span class=\"params\">(str: String)</span> </span>&#123;</span><br><span class=\"line\">    println(str.toLowerCase())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Fun1.kt</span></span><br><span class=\"line\"><span class=\"meta\">@file:JvmName</span>(<span class=\"string\">\"Utils\"</span>)<span class=\"comment\">//@JvmName 注解修改生成的 Java 类的类名</span></span><br><span class=\"line\"><span class=\"meta\">@file:JvmMultifileClass</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.ltz.kotlintest.usekotlininjava.example2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printUpperCase</span><span class=\"params\">(str: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    println(str.toUpperCase())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\">Utils.printUpperCase(<span class=\"string\">\"hello xiaohui\"</span>);</span><br><span class=\"line\">Utils.printLowerCase(<span class=\"string\">\"Hello XiaoHui\"</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>3、静态字段和方法</strong></p>\n<ul>\n<li>静态字段</li>\n</ul>\n<blockquote>\n<p>在命名对象或伴生对象中声明的 Kotlin 属性会在该命名对象或包含伴生对象的类中具有静态幕后字段。</p>\n<p>通常这些字段是私有的，但可以通过以下方式之一暴露出来：</p>\n<ul>\n<li><code>@JvmField</code> 注解；</li>\n<li><code>lateinit</code> 修饰符；</li>\n<li><code>const</code> 修饰符。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Kotlin</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Key</span></span>(<span class=\"keyword\">val</span> value: <span class=\"built_in\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//伴生对象</span></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@JvmField</span> <span class=\"comment\">//使用 @JvmField 标注这样的属性使其成为与属性本身具有相同可见性的静态字段</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> COMPARATOR: Comparator&lt;Key&gt; = compareBy&lt;Key&gt; &#123; it.value &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//命名对象</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> Singleton &#123;</span><br><span class=\"line\">     <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> key: Key</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> SingletonConst = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\">Key.COMPARATOR.compare(<span class=\"keyword\">new</span> Key(<span class=\"number\">1</span>), <span class=\"keyword\">new</span> Key(<span class=\"number\">2</span>));</span><br><span class=\"line\">Singleton.key = <span class=\"keyword\">new</span> Key(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> c = Singleton.SingletonConst;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>静态方法</li>\n</ul>\n<blockquote>\n<p>Kotlin 可以为命名对象或伴生对象中定义的函数生成静态方法，如果你将这些函数标注为 <code>@JvmStatic</code> 的话，编译器既会在相应对象的类中生成静态方法，也会在对象自身中生成实例方法。 例如</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//kotlin</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;<span class=\"comment\">//伴生对象</span></span><br><span class=\"line\">        <span class=\"meta\">@JvmStatic</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//命名对象</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> Obj &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java </span></span><br><span class=\"line\">C.foo(); <span class=\"comment\">// 没问题</span></span><br><span class=\"line\">C.bar(); <span class=\"comment\">// 错误：不是一个静态方法</span></span><br><span class=\"line\">C.Companion.foo(); <span class=\"comment\">// 保留实例方法</span></span><br><span class=\"line\">C.Companion.bar(); <span class=\"comment\">// 唯一的工作方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">Obj.foo(); <span class=\"comment\">// 没问题</span></span><br><span class=\"line\">Obj.bar(); <span class=\"comment\">// 错误</span></span><br><span class=\"line\">Obj.INSTANCE.bar(); <span class=\"comment\">// 没问题，通过单例实例调用</span></span><br><span class=\"line\">Obj.INSTANCE.foo(); <span class=\"comment\">// 也没问题</span></span><br></pre></td></tr></table></figure>\n<p><strong>4、生成重载</strong></p>\n<blockquote>\n<p>如果你写一个有默认参数值的 Kotlin 函数，在 Java 中只会有一个所有参数都存在的完整参数签名的方法可见，如果希望向 Java 调用者暴露多个重载，可以使用 <code>@JvmOverloads</code> 注解。</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//kotlin</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> <span class=\"meta\">@JvmOverloads</span> <span class=\"keyword\">constructor</span></span>(x: <span class=\"built_in\">Int</span>, y: <span class=\"built_in\">Double</span> = <span class=\"number\">0.0</span>) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmOverloads</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">f</span><span class=\"params\">(a: <span class=\"type\">String</span>, b: <span class=\"type\">Int</span> = <span class=\"number\">0</span>, c: <span class=\"type\">String</span> = <span class=\"string\">\"abc\"</span>)</span></span> &#123; …… &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的例子最终会生成如下代码：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数：</span></span><br><span class=\"line\">Foo(<span class=\"keyword\">int</span> x, <span class=\"keyword\">double</span> y)</span><br><span class=\"line\">Foo(<span class=\"keyword\">int</span> x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(String a, <span class=\"keyword\">int</span> b, String c)</span> </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(String a, <span class=\"keyword\">int</span> b)</span> </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(String a)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>5、用 @JvmName 解决签名冲突</strong></p>\n<blockquote>\n<p>有时我们想让一个 Kotlin 中的命名函数在字节码中有另外一个 JVM 名称，最突出的例子是由于<em>类型擦除</em>引发的，下面两个函数在kotlin中能同时定义，因为它们的 JVM 签名是一样的：</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> List<span class=\"type\">&lt;String&gt;</span>.<span class=\"title\">filterValid</span><span class=\"params\">()</span></span>: List&lt;String&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> List<span class=\"type\">&lt;Int&gt;</span>.<span class=\"title\">filterValid</span><span class=\"params\">()</span></span>: List&lt;<span class=\"built_in\">Int</span>&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以用<code>@JvmName</code> 去标注其中的一个（或两个），并指定不同的名称作为参数</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> List<span class=\"type\">&lt;String&gt;</span>.<span class=\"title\">filterValid</span><span class=\"params\">()</span></span>: List&lt;String&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@JvmName(<span class=\"meta-string\">\"filterValidInt\"</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> List<span class=\"type\">&lt;Int&gt;</span>.<span class=\"title\">filterValid</span><span class=\"params\">()</span></span>: List&lt;<span class=\"built_in\">Int</span>&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Java中调用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; stringArr = Arrays.asList(<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"efa\"</span>, <span class=\"string\">\"bde\"</span>);</span><br><span class=\"line\">List&lt;Integer&gt; intArr = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">KotlinUseJvmNameKt.filterValid(stringArr);</span><br><span class=\"line\">KotlinUseJvmNameKt.filterValidInt(intArr);</span><br></pre></td></tr></table></figure>\n<p><strong>6、受检异常</strong></p>\n<blockquote>\n<p>Kotlin 没有受检异常。 所以通常 Kotlin 函数的 Java 签名不会声明抛出异常。 于是如果我们有一个这样的 Kotlin 函数</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.kt</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> demo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> IOException()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>然后我们想要在 Java 中调用它并捕捉这个异常</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Java</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  demo.Example.foo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (IOException e) &#123; <span class=\"comment\">// 错误：foo() 未在 throws 列表中声明 IOException</span></span><br><span class=\"line\">  <span class=\"comment\">// ……</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>因为 <code>foo()</code> 没有声明 <code>IOException</code>，我们从 Java 编译器得到了一个报错消息。 为了解决这个问题，要在 Kotlin 中使用 <code>@Throws</code> 注解</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Throws(IOException::class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> IOException()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这些算是实际项目中混合开发的核心了。我们能有个提前的了解就可以。当我们遇到类似的问题的时候对这个问题有印象知道有办法解决就行，至于怎么解决再去网上查询也不迟。</p>\n<h3 id=\"Kotin引入的影响\"><a href=\"#Kotin引入的影响\" class=\"headerlink\" title=\"Kotin引入的影响\"></a>Kotin引入的影响</h3><p>对于Android开发来说，kotlin的引入有如下方面的改变：</p>\n<ul>\n<li>1.基本不需要再写findViewById. 可通过静态布局引入直接使用布局Id，比ButterKnife更简洁。原理在<a href=\"https://blog.csdn.net/hust_twj/article/details/80290362\" target=\"_blank\" rel=\"noopener\">这里</a></li>\n<li>2.会增加很多可空性判断，需要我们来关注和处理。</li>\n<li>3.如何使用kotlin的语法特性让原有代码更简洁，逻辑更清晰。</li>\n</ul>\n<h3 id=\"开发中的问题汇总\"><a href=\"#开发中的问题汇总\" class=\"headerlink\" title=\"开发中的问题汇总\"></a>开发中的问题汇总</h3><p><strong>1.资源文件命名</strong></p>\n<p>由于可以直接在Fragment或者Activity中使用资源文件的id作为view的对象，但是以往，资源文件的id通常使用下划线命名例如：<code>android:id=&quot;@+id/buy_input_edit_text&quot;</code> ，java类中通常使用驼峰法命名。我们在使用时通过findViewById转换成buyInputEditText。但是现在如果直接在kotlin中使用buy_input_edit_text作为对象，会违背命名规范。所以建议使用kotlin后直接在资源文件中使用驼峰法命名id。就像这样：<code>android:id=&quot;@+id/buyInputEditText&quot;</code> 。</p>\n<p><strong>2.有些文件仍然需要使用findViewById</strong></p>\n<p>在不是Activity、Fragment或自定义view的一些类中使用布局id仍然需要手动的findViewById. 例如adapter、工具类等。但这毕竟是少数，可以接受。</p>\n<p><strong>3.变量定义时的非空设置</strong></p>\n<p>当我们转换一个现有的java文件到kotlin时，Android Stuido会自动帮我们做一些转换，经常碰到的情况是，当前页面的数据在网络请求后才能获取被赋值。所以在转换时默认会被定义成可空类型，在后续使用时每次调用都会进行空判断，或者非空断言：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> info : mInfo? = <span class=\"literal\">null</span></span><br><span class=\"line\">titleTv.text = mInfo?.title</span><br><span class=\"line\">contentTv.text = mInfo?.content</span><br><span class=\"line\"><span class=\"keyword\">if</span>(mInfo?.isValid!!) ...</span><br></pre></td></tr></table></figure>\n<p>这样看上去整个类中就会增加密密麻麻的”?”，代码编译后也会生成很多不必要的空检查。所以如果我们能够确认这个属性只有在初始化后才会使用，那么可以添加lateInit修饰符。将代码简化：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lateinit</span> <span class=\"keyword\">val</span> info : mInfo</span><br><span class=\"line\">titleTv.text = mInfo.title</span><br><span class=\"line\"><span class=\"keyword\">if</span>(mInfo.isValid) ...</span><br></pre></td></tr></table></figure>\n<p>如果在使用过程中有些地方不确定被<code>lateinit</code>修饰对象是否被初始化，并且需要调用其属性，我们可以给该属性添加判断初始化的方法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lateinit</span> <span class=\"keyword\">val</span> info : mInfo</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">isInitialzed</span><span class=\"params\">()</span></span> = ::info.isInitialized</span><br></pre></td></tr></table></figure>\n<p>另外需要注意的是，如果该变量在init{}语句块中有初始化，则不需要添加<code>lateinit</code>修饰符。</p>\n<p><strong>4.空判断的一些技巧</strong></p>\n<ul>\n<li>？和 ?：的巧妙用法</li>\n</ul>\n<p>在java中有三元表达式，可以方便的进行简单的判断并返回值。但是kotlin则需要使用if…else…表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = (info != <span class=\"keyword\">null</span> &amp;&amp; info.value != <span class=\"keyword\">null</span>) ? info.value : <span class=\"number\">0</span> <span class=\"comment\">//java</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = <span class=\"keyword\">if</span>(info != <span class=\"literal\">null</span> &amp;&amp; info.value != <span class=\"literal\">null</span>) info.value <span class=\"keyword\">else</span> <span class=\"number\">0</span> <span class=\"comment\">//kotlin</span></span><br></pre></td></tr></table></figure>\n<p>其实像上面在一连串空判断后不为空时取值本身，否则取默认值的例子很多，我们可以通过kotlin <code>?</code> 和 <code>?:</code>两个操作符让其变得更简单：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = info?.value?:<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>if判断条件可能为null的处理</li>\n</ul>\n<p>在kotlin中if中的判断结果要么是true要么是false,不能为null，所以很多时候自动转换会出现如下判断：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(mDialog != <span class=\"literal\">null</span> &amp;&amp; mDialog!!.isShowing)&#123;</span><br><span class=\"line\">    mDialog!!.dismiss()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个时候我们进行简化：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(mDialog?.isShowing == <span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    mDialog!!.dismiss()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接进行想要结果的判断就可以，这个是够不管前面的isShowing是false还是null.判断结果都是false.和上面的判断是等效的，同样判断其他类型的值相等也可以。</p>\n<p>但是需要注意的是，如果这个时候添加了else.在else中则是两种情况。我们需要做对应的处理。</p>\n<ul>\n<li><code>?.let{}</code> 简化同一个对象的多次非空判断</li>\n</ul>\n<p>像上面的例子就可以通此操作符继续优化：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mDialog?.let&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(it.isShowing == <span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        it.dismiss()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到let{}块中使用时可通过it进行访问，同时省去了所有的空检查</p>\n<ul>\n<li><code>!!</code> 非空断言谨慎使用</li>\n</ul>\n<p>同时上面的例子我们可以看到，我们已经判断了非空，所有后面 <code>mDialog!!.dismiss()</code> 能够直接使用非空断言。在开发中我们尽量少使用非空断言，除非是在明确了不可能为null的情况。尤其是在通过java一键转kotlin的时候。我们需要对转换之后的逻辑进行确认。</p>\n<p><strong>5.as转换的问题</strong></p>\n<p>当我们在一键转换代码时，会遇到as转换自动为非空类型的问题，这会给代码带来很大的隐患。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Info info = (Info)data.getExtra(INFO); <span class=\"comment\">//java代码</span></span><br></pre></td></tr></table></figure>\n<p>自动转换成kotlin代码后：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> info = <span class=\"keyword\">data</span>.getExtra(INFO) <span class=\"keyword\">as</span> Info</span><br></pre></td></tr></table></figure>\n<p>这里需要我们手动的添加可空：<code>as Info?</code> ，避免找不到对象造成的类型转换出错。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本篇文章从大家从kotlin与java混合开发的原理进行展开。介绍了混合开发中相互调用需要注意的问题，最后结合实际开发中的一些发现，告诉大家需要注意的问题。本文仅列出了当前发现的一些问题。如有后面有新的发现还会持续更新。</p>\n<p>如果还没有看过看过上篇对kotlin的简介，可以前往这里查看 👉<a href=\"https://carlwe.com/2019/04/30/Kotlin%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E4%B8%8A/\">《kotlin混合开发上》</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/kotlin_and_java_logo.png-h\" alt=\"\"></p>","more":"<blockquote>\n<p>回顾：上篇博客介绍了kotlin的一些基本语法和新特性。我们知道了kotlin会更加的实用、简洁和安全。</p>\n</blockquote>\n<h3 id=\"Kotlin混合开发原理\"><a href=\"#Kotlin混合开发原理\" class=\"headerlink\" title=\"Kotlin混合开发原理\"></a>Kotlin混合开发原理</h3><p>上面我们了解到了kotlin如此多的好处，同时也是谷歌官方确认的Android开发的第一语言，那么我们如何在我们现有的java项目中引入kotlin呢，这里就要提到了kotlin的另一个特性：互操作性。</p>\n<blockquote>\n<p>互操作性：可以放心的使用现有的库、可以自由的在Java和Kotlin源码文件之间切换、混合开发时可以在不同语言的代码中单步调试、重构java代码时kotlin也会正确执行。</p>\n</blockquote>\n<p>有了这个特性使用起来就方便多啦，这就代表着我们能够直接在现有的项目中直接使用kotlin：在kotlin的代码中可以调用java代码，在java代码中也可以轻松调用kotlin代码。那这背后的原理是什么呢？我们下面来分析。</p>\n<h4 id=\"App构建过程介绍\"><a href=\"#App构建过程介绍\" class=\"headerlink\" title=\"App构建过程介绍\"></a>App构建过程介绍</h4><p><img src=\"https://img.carlwe.com/kotlin_build_process.png\" alt=\"\"></p>\n<p>我们先从App的构建过程讲起，和 Java 一样， Kotlin 也是编译型语言。所以你必须先编译，然后生成.class字节码才能正确执行。不同的是，Kotlin有自己的编译器，会识别对应的kotlin语法，同时拥有kotlin自己的运行时库，提供一些java所不具备的功能。另外用 Kotiin 编译器编译的代码依赖 Kotlin 运行时库。它包括了 Kotlin 自己的标准库类的定义，以及 Kotiin对标准 JavaAPI的扩展。 Gradle 还会帮我们把 Kotlin 运行时库作为依赖加入到你的应用程序中。运行时库需要和你的应用程序一起分发 。所以加入kotlin之后当你的应用打包后，通过dexcount工具你会发现增加了相当一部分kotlin的代码（大概4000个方法），不过包体积的增大相对于kotlin给我们带来的方便可以忽略。</p>\n<p><img src=\"https://img.carlwe.com/kotlin_added_methods.png-m\" alt=\"\"></p>\n<h4 id=\"编译器工作过程\"><a href=\"#编译器工作过程\" class=\"headerlink\" title=\"编译器工作过程\"></a>编译器工作过程</h4><p>上面介绍到kotlin和java最主要的不同在与编译器，那我们就来看看编译器的工作过程。</p>\n<p><img src=\"https://img.carlwe.com/kotlin_compile_progress.png\" alt=\"\"></p>\n<p>java和kotlin的编译过程类似。在大学中上过编译原理的同学对这个肯定不会陌生。简单来说，上面整个过程其实就是翻译我们写代码的过程，下面介绍如下三个概念：</p>\n<blockquote>\n<p>词法分析：识别代码中的关键字、元算符，同识别一个句子中的单词类似。</p>\n<p>语法分析：将上面识别到的单词序列组合成各类语法短语，类似学生用多个词语组句一样。</p>\n<p>语义分析：判断组合成的句子是否符合编码规范（变量定义类型是否正确，运算符是否匹配）。类似检查我们说话时是否有病句。</p>\n</blockquote>\n<p>上面流程中语义分析完成后就会进入到目标代码生成阶段。字节码生成器会负责该项工作，生成最后的JVM字节码。那么kotlin和java的最大区别其实就是在于字节码生成器，kotlin会按照自己的语法规则，生成对应的字节码，下面让我们来详细看下目标代码生成的过程。</p>\n<h4 id=\"目标代码生成\"><a href=\"#目标代码生成\" class=\"headerlink\" title=\"目标代码生成\"></a>目标代码生成</h4><p><img src=\"https://img.carlwe.com/kotlin_target_code.png\" alt=\"\"></p>\n<p>通过最简单的变量生成Set、Get方法为例，我们首先定义了一个Int类型的变量a初始值为1，我们找到kotlin编译器的源码发现，kotlin在目标代码生成阶段多了判断是否需要生成set()、get()方法的逻辑，通过AndroidStuido的Decompiled功能我们能够直接看到编译之后的代码。可以看到自动帮我们生成了setA()和getA()两个方法。</p>\n<p>可见Kotlin编译器在编译前端（即词法分析、语法分析、语义分析、中间代码生成）并没有做让人感到很厉害的事情，和Java是基本一致的，所以混合开发就变得水到渠成了。与Java相比，所与众不同的细节是在编译后端（目标代码生成）环节。Kotlin编译器在目标代码生成环节做了很多<strong>类似于Java封装</strong>的事情，比如自动生成Getter/Setter代码的生成、Companion转变成静态类、修改类属性为final不可继承等工作。可以说，大部分Kotlin的特性都在这个环节处理产生。那么总结来说：Kotlin将我们本来在代码层做的一些封装工作转移到了编译后端的阶段，这就是为什么kotlin使用起来如此的简单的原因了。</p>\n<p>上面我们了解啦kotlin混合开发的原理。在介绍混合开发之前，我们首先需要知道：</p>\n<blockquote>\n<p>同一个文件中的代码要么是kotlin代码要么是java代码。混合开发指的是在不同文件中调用彼此的代码。</p>\n</blockquote>\n<p>混合开发大部分时候并不需要关心太多：我们可以像往常一样直接在java代码中调用kotlin定义的方法和属性。也可以直接在kotlin代码中调用java代码定义的方法和属性，你并不会感觉到会有多大的差异，但是由于语言特性，在某些功能的实现上我们需要做一些特殊的处理。那么下面我们就分别从相互调用的两个方向来进行介绍<strong>（阅读需要有java基础，可选择性跳过）</strong></p>\n<h3 id=\"Kotlin中调用Java代码\"><a href=\"#Kotlin中调用Java代码\" class=\"headerlink\" title=\"Kotlin中调用Java代码\"></a>Kotlin中调用Java代码</h3><p><img src=\"https://img.carlwe.com/use_java_in_kotlin.png\" alt=\"\"></p>\n<p><strong>1、Getter和Setter</strong></p>\n<blockquote>\n<p>遵循 Java 约定的 getter 和 setter 的方法（名称以 <code>get</code> 开头的无参数方法和以 <code>set</code> 开头的单参数方法）在 Kotlin 中表示为属性。 <code>Boolean</code> 访问器方法（其中 getter 的名称以 <code>is</code> 开头而 setter 的名称以 <code>set</code> 开头）会表示为与 getter 方法具有相同名称的属性。 例如:</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//kotlin</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> myHouse = House(<span class=\"string\">\"5th Avenue,NY.\"</span>, <span class=\"number\">200000.0</span>, <span class=\"literal\">true</span>)<span class=\"comment\">//java类House</span></span><br><span class=\"line\">myHouse.price = <span class=\"number\">300000.0</span>   <span class=\"comment\">//调用setPrice()方法</span></span><br><span class=\"line\">myHouse.isNewHouse = <span class=\"literal\">false</span> <span class=\"comment\">//调用isNewHouse()方法</span></span><br><span class=\"line\">println(<span class=\"string\">\"price:<span class=\"subst\">$&#123;myHouse.price&#125;</span>\\nisNewHouse:<span class=\"subst\">$&#123;myHouse.isNewHouse&#125;</span>\"</span>)<span class=\"comment\">//调用getPrice()方法</span></span><br></pre></td></tr></table></figure>\n<p><strong>2、Java中使用了Kotlin的关键字</strong></p>\n<blockquote>\n<p>一些 Kotlin 关键字在 Java 中是有效标识符：<em>in</em>、 <em>object</em>、 <em>is</em> 等等。 如果一个 Java 库使用了 Kotlin 关键字作为方法，你仍然可以通过反引号（`）字符转义它来调用该方法:</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//kotlin</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> arr = arrayListOf(<span class=\"string\">\"kotlin\"</span>, <span class=\"string\">\"java\"</span>, <span class=\"string\">\"and\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//将 Kotlin 中是关键字的 Java 标识符进行转义</span></span><br><span class=\"line\">    println(StringUtil.`<span class=\"keyword\">in</span>`(arr))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3、空安全与平台类型</strong></p>\n<blockquote>\n<p>Java 中的任何引用都可能是 <em>null</em>，这使得 Kotlin 对来自 Java 的对象要求严格空安全是不现实的。 Java 声明的类型在 Kotlin 中会被特别对待并称为<em>平台类型</em>。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DataParser</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">parseData</span><span class=\"params\">(String input, List&lt;T&gt; output, List&lt;String&gt; errors)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>kotlin类实现java的DataParser接口时，每个参数的类型是否可空、集合是否可变，可以根据实际情况来定义。</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//kotlin</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonParse</span>:<span class=\"type\">DataParser</span>&lt;<span class=\"type\">Person</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">parseData</span><span class=\"params\">(input:<span class=\"type\">String</span>, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           output:<span class=\"type\">MutableList</span>&lt;<span class=\"type\">Person</span>&gt;, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"comment\">//根据实际情况也可以定义为MutableList&lt;String&gt;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           errors:<span class=\"type\">MutableList</span>&lt;<span class=\"type\">String</span>?&gt;)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4、Java可变参数</strong></p>\n<blockquote>\n<p>Java 类有时声明一个具有可变数量参数（varargs）的方法来使用索引</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaArrayExample</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//接受可变参数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">removeZero</span><span class=\"params\">(<span class=\"keyword\">int</span>... intArr)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; resultArr = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : intArr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                resultArr.add(value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultArr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在这种情况下，你需要使用展开运算符 <code>*</code> 来传递 <code>IntArray</code></p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//kotlin</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> javaObj = JavaArrayExample()</span><br><span class=\"line\"><span class=\"keyword\">val</span> array = intArrayOf(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">println(javaObj.removeZero(*array))</span><br></pre></td></tr></table></figure>\n<p><strong>5、Java数组</strong></p>\n<blockquote>\n<p>Java 平台上，数组会使用原生数据类型以避免装箱/拆箱操作的开销。 由于 Kotlin 隐藏了这些实现细节，因此需要一个变通方法来与 Java 代码进行交互。 对于每种原生类型的数组都有一个特化的类（<code>IntArray</code>、 <code>DoubleArray</code>、 <code>CharArray</code> 等等）来处理这种情况。 它们与 <code>Array</code> 类无关，并且会编译成 Java 原生类型数组以获得最佳性能，Java代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaArrayMethod</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeIndices</span><span class=\"params\">(<span class=\"keyword\">int</span>[] indices)</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>kotlin调用java代码</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> javaObj = JavaArrayMethod()</span><br><span class=\"line\"><span class=\"keyword\">val</span> array = intArrayOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">javaObj.removeIndices(array)  <span class=\"comment\">// 将 int[] 传给方法</span></span><br><span class=\"line\">array[<span class=\"number\">1</span>] = array[<span class=\"number\">1</span>] * <span class=\"number\">2</span> <span class=\"comment\">// 不会实际生成对 get() 和 set() 的调用</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (x <span class=\"keyword\">in</span> array) &#123;<span class=\"comment\">// 不会创建迭代器</span></span><br><span class=\"line\">    println(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>6、Kotlin中的 Java 泛型</strong></p>\n<blockquote>\n<p>Java 的通配符转换成类型投影，Java的原始类型转换成星投影，Java代码：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaPattern</span>&lt;<span class=\"title\">Animal</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test1</span><span class=\"params\">(JavaPattern&lt;? extends Animal&gt; list)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test2</span><span class=\"params\">(JavaPattern&lt;? <span class=\"keyword\">super</span> Animal&gt; list)</span> </span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printColl</span><span class=\"params\">(ArrayList&lt;?&gt; al)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;?&gt; it = al.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">            System.out.println(it.next().toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>转换后的kotlin代码</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KotlinPattern1</span>&lt;<span class=\"type\">Animal</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Test1</span><span class=\"params\">(list: <span class=\"type\">KotlinPattern1</span>&lt;<span class=\"type\">out</span> <span class=\"type\">Animal</span>&gt;)</span></span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Test2</span><span class=\"params\">(list: <span class=\"type\">KotlinPattern1</span>&lt;<span class=\"type\">in</span> <span class=\"type\">Animal</span>&gt;)</span></span> &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printColl</span><span class=\"params\">(al: <span class=\"type\">ArrayList</span>&lt;*&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> it = al.iterator()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">            println(it.next().toString())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>7、在 Kotlin 中使用 JNI</strong></p>\n<blockquote>\n<p>要声明一个在本地（C 或 C++）代码中实现的函数，你需要使用 <code>external</code> 修饰符来标记它</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">external</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">add</span><span class=\"params\">(x: <span class=\"type\">Int</span>,y: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Double</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Java中调用Kotlin代码\"><a href=\"#Java中调用Kotlin代码\" class=\"headerlink\" title=\"Java中调用Kotlin代码\"></a>Java中调用Kotlin代码</h3><p><img src=\"https://img.carlwe.com/use_kotlin_in_java.png\" alt=\"\"></p>\n<p><strong>1、属性</strong></p>\n<blockquote>\n<p>Kotlin 属性会编译成以下 Java 元素：getter 方法，名称通过加前缀 <code>get</code> 算出；setter 方法，名称通过加前缀 <code>set</code> 算出（只适用于 <code>var</code> 属性，kotlin代码：</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> firstName: String</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在编译时会生成如下Java代码：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> String firstName;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFirstName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFirstName</span><span class=\"params\">(String firstName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.firstName = firstName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2、包级函数</strong></p>\n<blockquote>\n<p>Kotlin文件<code>File</code>中声明的所有的函数和属性，包括扩展函数， 都编译成一个名为<code>FileKt</code> 的 Java 类的静态方法，可以使用 <code>@JvmName</code> 注解修改生成的 Java 类的类名：</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@file:JvmName</span>(<span class=\"string\">\"Utils\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">package</span> com.ltz.kotlintest.usekotlininjava.example2</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printLowerCase</span><span class=\"params\">(str: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    println(str.toLowerCase())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>java中调用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Utils.printLowerCase(<span class=\"string\">\"Hello XiaoHui\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果多个文件中生成了相同的 Java 类名（包名相同并且类名相同或者有相同的 <code>@JvmName</code> 注解）通常是错误的。然而，编译器能够生成一个单一的 Java 外观类，它具有指定的名称且包含来自所有文件中具有该名称的所有声明。 要启用生成这样的外观，请在所有相关文件中使用 @JvmMultifileClass 注解</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Fun.kt</span></span><br><span class=\"line\"><span class=\"meta\">@file</span>:JvmName(<span class=\"string\">\"Utils\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@file</span>:JvmMultifileClass</span><br><span class=\"line\"><span class=\"keyword\">package</span> com.ltz.kotlintest.usekotlininjava.example2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">printLowerCase</span><span class=\"params\">(str: String)</span> </span>&#123;</span><br><span class=\"line\">    println(str.toLowerCase())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Fun1.kt</span></span><br><span class=\"line\"><span class=\"meta\">@file:JvmName</span>(<span class=\"string\">\"Utils\"</span>)<span class=\"comment\">//@JvmName 注解修改生成的 Java 类的类名</span></span><br><span class=\"line\"><span class=\"meta\">@file:JvmMultifileClass</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.ltz.kotlintest.usekotlininjava.example2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printUpperCase</span><span class=\"params\">(str: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    println(str.toUpperCase())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\">Utils.printUpperCase(<span class=\"string\">\"hello xiaohui\"</span>);</span><br><span class=\"line\">Utils.printLowerCase(<span class=\"string\">\"Hello XiaoHui\"</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>3、静态字段和方法</strong></p>\n<ul>\n<li>静态字段</li>\n</ul>\n<blockquote>\n<p>在命名对象或伴生对象中声明的 Kotlin 属性会在该命名对象或包含伴生对象的类中具有静态幕后字段。</p>\n<p>通常这些字段是私有的，但可以通过以下方式之一暴露出来：</p>\n<ul>\n<li><code>@JvmField</code> 注解；</li>\n<li><code>lateinit</code> 修饰符；</li>\n<li><code>const</code> 修饰符。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Kotlin</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Key</span></span>(<span class=\"keyword\">val</span> value: <span class=\"built_in\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//伴生对象</span></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@JvmField</span> <span class=\"comment\">//使用 @JvmField 标注这样的属性使其成为与属性本身具有相同可见性的静态字段</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> COMPARATOR: Comparator&lt;Key&gt; = compareBy&lt;Key&gt; &#123; it.value &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//命名对象</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> Singleton &#123;</span><br><span class=\"line\">     <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> key: Key</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"keyword\">val</span> SingletonConst = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\">Key.COMPARATOR.compare(<span class=\"keyword\">new</span> Key(<span class=\"number\">1</span>), <span class=\"keyword\">new</span> Key(<span class=\"number\">2</span>));</span><br><span class=\"line\">Singleton.key = <span class=\"keyword\">new</span> Key(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> c = Singleton.SingletonConst;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>静态方法</li>\n</ul>\n<blockquote>\n<p>Kotlin 可以为命名对象或伴生对象中定义的函数生成静态方法，如果你将这些函数标注为 <code>@JvmStatic</code> 的话，编译器既会在相应对象的类中生成静态方法，也会在对象自身中生成实例方法。 例如</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//kotlin</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;<span class=\"comment\">//伴生对象</span></span><br><span class=\"line\">        <span class=\"meta\">@JvmStatic</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//命名对象</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> Obj &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java </span></span><br><span class=\"line\">C.foo(); <span class=\"comment\">// 没问题</span></span><br><span class=\"line\">C.bar(); <span class=\"comment\">// 错误：不是一个静态方法</span></span><br><span class=\"line\">C.Companion.foo(); <span class=\"comment\">// 保留实例方法</span></span><br><span class=\"line\">C.Companion.bar(); <span class=\"comment\">// 唯一的工作方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">Obj.foo(); <span class=\"comment\">// 没问题</span></span><br><span class=\"line\">Obj.bar(); <span class=\"comment\">// 错误</span></span><br><span class=\"line\">Obj.INSTANCE.bar(); <span class=\"comment\">// 没问题，通过单例实例调用</span></span><br><span class=\"line\">Obj.INSTANCE.foo(); <span class=\"comment\">// 也没问题</span></span><br></pre></td></tr></table></figure>\n<p><strong>4、生成重载</strong></p>\n<blockquote>\n<p>如果你写一个有默认参数值的 Kotlin 函数，在 Java 中只会有一个所有参数都存在的完整参数签名的方法可见，如果希望向 Java 调用者暴露多个重载，可以使用 <code>@JvmOverloads</code> 注解。</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//kotlin</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> <span class=\"meta\">@JvmOverloads</span> <span class=\"keyword\">constructor</span></span>(x: <span class=\"built_in\">Int</span>, y: <span class=\"built_in\">Double</span> = <span class=\"number\">0.0</span>) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmOverloads</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">f</span><span class=\"params\">(a: <span class=\"type\">String</span>, b: <span class=\"type\">Int</span> = <span class=\"number\">0</span>, c: <span class=\"type\">String</span> = <span class=\"string\">\"abc\"</span>)</span></span> &#123; …… &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的例子最终会生成如下代码：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数：</span></span><br><span class=\"line\">Foo(<span class=\"keyword\">int</span> x, <span class=\"keyword\">double</span> y)</span><br><span class=\"line\">Foo(<span class=\"keyword\">int</span> x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(String a, <span class=\"keyword\">int</span> b, String c)</span> </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(String a, <span class=\"keyword\">int</span> b)</span> </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f</span><span class=\"params\">(String a)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>5、用 @JvmName 解决签名冲突</strong></p>\n<blockquote>\n<p>有时我们想让一个 Kotlin 中的命名函数在字节码中有另外一个 JVM 名称，最突出的例子是由于<em>类型擦除</em>引发的，下面两个函数在kotlin中能同时定义，因为它们的 JVM 签名是一样的：</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> List<span class=\"type\">&lt;String&gt;</span>.<span class=\"title\">filterValid</span><span class=\"params\">()</span></span>: List&lt;String&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> List<span class=\"type\">&lt;Int&gt;</span>.<span class=\"title\">filterValid</span><span class=\"params\">()</span></span>: List&lt;<span class=\"built_in\">Int</span>&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以用<code>@JvmName</code> 去标注其中的一个（或两个），并指定不同的名称作为参数</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> List<span class=\"type\">&lt;String&gt;</span>.<span class=\"title\">filterValid</span><span class=\"params\">()</span></span>: List&lt;String&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@JvmName(<span class=\"meta-string\">\"filterValidInt\"</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> List<span class=\"type\">&lt;Int&gt;</span>.<span class=\"title\">filterValid</span><span class=\"params\">()</span></span>: List&lt;<span class=\"built_in\">Int</span>&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Java中调用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; stringArr = Arrays.asList(<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"efa\"</span>, <span class=\"string\">\"bde\"</span>);</span><br><span class=\"line\">List&lt;Integer&gt; intArr = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">KotlinUseJvmNameKt.filterValid(stringArr);</span><br><span class=\"line\">KotlinUseJvmNameKt.filterValidInt(intArr);</span><br></pre></td></tr></table></figure>\n<p><strong>6、受检异常</strong></p>\n<blockquote>\n<p>Kotlin 没有受检异常。 所以通常 Kotlin 函数的 Java 签名不会声明抛出异常。 于是如果我们有一个这样的 Kotlin 函数</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.kt</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> demo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> IOException()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>然后我们想要在 Java 中调用它并捕捉这个异常</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Java</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  demo.Example.foo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (IOException e) &#123; <span class=\"comment\">// 错误：foo() 未在 throws 列表中声明 IOException</span></span><br><span class=\"line\">  <span class=\"comment\">// ……</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>因为 <code>foo()</code> 没有声明 <code>IOException</code>，我们从 Java 编译器得到了一个报错消息。 为了解决这个问题，要在 Kotlin 中使用 <code>@Throws</code> 注解</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Throws(IOException::class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> IOException()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这些算是实际项目中混合开发的核心了。我们能有个提前的了解就可以。当我们遇到类似的问题的时候对这个问题有印象知道有办法解决就行，至于怎么解决再去网上查询也不迟。</p>\n<h3 id=\"Kotin引入的影响\"><a href=\"#Kotin引入的影响\" class=\"headerlink\" title=\"Kotin引入的影响\"></a>Kotin引入的影响</h3><p>对于Android开发来说，kotlin的引入有如下方面的改变：</p>\n<ul>\n<li>1.基本不需要再写findViewById. 可通过静态布局引入直接使用布局Id，比ButterKnife更简洁。原理在<a href=\"https://blog.csdn.net/hust_twj/article/details/80290362\" target=\"_blank\" rel=\"noopener\">这里</a></li>\n<li>2.会增加很多可空性判断，需要我们来关注和处理。</li>\n<li>3.如何使用kotlin的语法特性让原有代码更简洁，逻辑更清晰。</li>\n</ul>\n<h3 id=\"开发中的问题汇总\"><a href=\"#开发中的问题汇总\" class=\"headerlink\" title=\"开发中的问题汇总\"></a>开发中的问题汇总</h3><p><strong>1.资源文件命名</strong></p>\n<p>由于可以直接在Fragment或者Activity中使用资源文件的id作为view的对象，但是以往，资源文件的id通常使用下划线命名例如：<code>android:id=&quot;@+id/buy_input_edit_text&quot;</code> ，java类中通常使用驼峰法命名。我们在使用时通过findViewById转换成buyInputEditText。但是现在如果直接在kotlin中使用buy_input_edit_text作为对象，会违背命名规范。所以建议使用kotlin后直接在资源文件中使用驼峰法命名id。就像这样：<code>android:id=&quot;@+id/buyInputEditText&quot;</code> 。</p>\n<p><strong>2.有些文件仍然需要使用findViewById</strong></p>\n<p>在不是Activity、Fragment或自定义view的一些类中使用布局id仍然需要手动的findViewById. 例如adapter、工具类等。但这毕竟是少数，可以接受。</p>\n<p><strong>3.变量定义时的非空设置</strong></p>\n<p>当我们转换一个现有的java文件到kotlin时，Android Stuido会自动帮我们做一些转换，经常碰到的情况是，当前页面的数据在网络请求后才能获取被赋值。所以在转换时默认会被定义成可空类型，在后续使用时每次调用都会进行空判断，或者非空断言：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> info : mInfo? = <span class=\"literal\">null</span></span><br><span class=\"line\">titleTv.text = mInfo?.title</span><br><span class=\"line\">contentTv.text = mInfo?.content</span><br><span class=\"line\"><span class=\"keyword\">if</span>(mInfo?.isValid!!) ...</span><br></pre></td></tr></table></figure>\n<p>这样看上去整个类中就会增加密密麻麻的”?”，代码编译后也会生成很多不必要的空检查。所以如果我们能够确认这个属性只有在初始化后才会使用，那么可以添加lateInit修饰符。将代码简化：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lateinit</span> <span class=\"keyword\">val</span> info : mInfo</span><br><span class=\"line\">titleTv.text = mInfo.title</span><br><span class=\"line\"><span class=\"keyword\">if</span>(mInfo.isValid) ...</span><br></pre></td></tr></table></figure>\n<p>如果在使用过程中有些地方不确定被<code>lateinit</code>修饰对象是否被初始化，并且需要调用其属性，我们可以给该属性添加判断初始化的方法：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lateinit</span> <span class=\"keyword\">val</span> info : mInfo</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">isInitialzed</span><span class=\"params\">()</span></span> = ::info.isInitialized</span><br></pre></td></tr></table></figure>\n<p>另外需要注意的是，如果该变量在init{}语句块中有初始化，则不需要添加<code>lateinit</code>修饰符。</p>\n<p><strong>4.空判断的一些技巧</strong></p>\n<ul>\n<li>？和 ?：的巧妙用法</li>\n</ul>\n<p>在java中有三元表达式，可以方便的进行简单的判断并返回值。但是kotlin则需要使用if…else…表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = (info != <span class=\"keyword\">null</span> &amp;&amp; info.value != <span class=\"keyword\">null</span>) ? info.value : <span class=\"number\">0</span> <span class=\"comment\">//java</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = <span class=\"keyword\">if</span>(info != <span class=\"literal\">null</span> &amp;&amp; info.value != <span class=\"literal\">null</span>) info.value <span class=\"keyword\">else</span> <span class=\"number\">0</span> <span class=\"comment\">//kotlin</span></span><br></pre></td></tr></table></figure>\n<p>其实像上面在一连串空判断后不为空时取值本身，否则取默认值的例子很多，我们可以通过kotlin <code>?</code> 和 <code>?:</code>两个操作符让其变得更简单：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a = info?.value?:<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>if判断条件可能为null的处理</li>\n</ul>\n<p>在kotlin中if中的判断结果要么是true要么是false,不能为null，所以很多时候自动转换会出现如下判断：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(mDialog != <span class=\"literal\">null</span> &amp;&amp; mDialog!!.isShowing)&#123;</span><br><span class=\"line\">    mDialog!!.dismiss()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个时候我们进行简化：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(mDialog?.isShowing == <span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">    mDialog!!.dismiss()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接进行想要结果的判断就可以，这个是够不管前面的isShowing是false还是null.判断结果都是false.和上面的判断是等效的，同样判断其他类型的值相等也可以。</p>\n<p>但是需要注意的是，如果这个时候添加了else.在else中则是两种情况。我们需要做对应的处理。</p>\n<ul>\n<li><code>?.let{}</code> 简化同一个对象的多次非空判断</li>\n</ul>\n<p>像上面的例子就可以通此操作符继续优化：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mDialog?.let&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(it.isShowing == <span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        it.dismiss()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到let{}块中使用时可通过it进行访问，同时省去了所有的空检查</p>\n<ul>\n<li><code>!!</code> 非空断言谨慎使用</li>\n</ul>\n<p>同时上面的例子我们可以看到，我们已经判断了非空，所有后面 <code>mDialog!!.dismiss()</code> 能够直接使用非空断言。在开发中我们尽量少使用非空断言，除非是在明确了不可能为null的情况。尤其是在通过java一键转kotlin的时候。我们需要对转换之后的逻辑进行确认。</p>\n<p><strong>5.as转换的问题</strong></p>\n<p>当我们在一键转换代码时，会遇到as转换自动为非空类型的问题，这会给代码带来很大的隐患。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Info info = (Info)data.getExtra(INFO); <span class=\"comment\">//java代码</span></span><br></pre></td></tr></table></figure>\n<p>自动转换成kotlin代码后：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> info = <span class=\"keyword\">data</span>.getExtra(INFO) <span class=\"keyword\">as</span> Info</span><br></pre></td></tr></table></figure>\n<p>这里需要我们手动的添加可空：<code>as Info?</code> ，避免找不到对象造成的类型转换出错。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本篇文章从大家从kotlin与java混合开发的原理进行展开。介绍了混合开发中相互调用需要注意的问题，最后结合实际开发中的一些发现，告诉大家需要注意的问题。本文仅列出了当前发现的一些问题。如有后面有新的发现还会持续更新。</p>\n<p>如果还没有看过看过上篇对kotlin的简介，可以前往这里查看 👉<a href=\"https://carlwe.com/2019/04/30/Kotlin%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E4%B8%8A/\">《kotlin混合开发上》</a></p>"},{"title":"全景北京","date":"2019-04-13T09:26:18.000Z","_content":"\n![](https://img.carlwe.com/IMG_2691.jpg-h)\n\n<!--more-->\n\n> 春日北京的天空显得格外透彻，同时也正值樱花盛开，于是来到了玉渊潭和景山逛一逛，所有照片都是由iPhone的全景模式拍摄。推荐点击图片进入大图查看模式～\n\n<br>\n\n![](https://img.carlwe.com/IMG_2625.jpg)\n<center>玉渊潭的樱花</center><br><br>\n\n\n![](https://img.carlwe.com/IMG_2679.jpg)\n<center>景山下的故宫</center><br><br>\n\n\n![img](https://img.carlwe.com/IMG_2753.jpg)\n<center>故宫角楼</center><br><br>\n\n\n![img](https://img.carlwe.com/IMG_2671.jpg)\n\n<center>远眺国贸</center><br><br>","source":"_posts/全景北京.md","raw":"---\ntitle: 全景北京\ndate: 2019-04-13 17:26:18\ntags: 摄影\n---\n\n![](https://img.carlwe.com/IMG_2691.jpg-h)\n\n<!--more-->\n\n> 春日北京的天空显得格外透彻，同时也正值樱花盛开，于是来到了玉渊潭和景山逛一逛，所有照片都是由iPhone的全景模式拍摄。推荐点击图片进入大图查看模式～\n\n<br>\n\n![](https://img.carlwe.com/IMG_2625.jpg)\n<center>玉渊潭的樱花</center><br><br>\n\n\n![](https://img.carlwe.com/IMG_2679.jpg)\n<center>景山下的故宫</center><br><br>\n\n\n![img](https://img.carlwe.com/IMG_2753.jpg)\n<center>故宫角楼</center><br><br>\n\n\n![img](https://img.carlwe.com/IMG_2671.jpg)\n\n<center>远眺国贸</center><br><br>","slug":"全景北京","published":1,"updated":"2020-08-18T02:25:58.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnp7000nt57s0ezb1196","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/IMG_2691.jpg-h\" alt=\"\"></p>\n<a id=\"more\"></a>\n<blockquote>\n<p>春日北京的天空显得格外透彻，同时也正值樱花盛开，于是来到了玉渊潭和景山逛一逛，所有照片都是由iPhone的全景模式拍摄。推荐点击图片进入大图查看模式～</p>\n</blockquote>\n<p><br></p>\n<p><img src=\"https://img.carlwe.com/IMG_2625.jpg\" alt=\"\"></p>\n<p><center>玉渊潭的樱花</center><br><br></p>\n<p><img src=\"https://img.carlwe.com/IMG_2679.jpg\" alt=\"\"></p>\n<p><center>景山下的故宫</center><br><br></p>\n<p><img src=\"https://img.carlwe.com/IMG_2753.jpg\" alt=\"img\"></p>\n<p><center>故宫角楼</center><br><br></p>\n<p><img src=\"https://img.carlwe.com/IMG_2671.jpg\" alt=\"img\"></p>\n<p><center>远眺国贸</center><br><br></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/IMG_2691.jpg-h\" alt=\"\"></p>","more":"<blockquote>\n<p>春日北京的天空显得格外透彻，同时也正值樱花盛开，于是来到了玉渊潭和景山逛一逛，所有照片都是由iPhone的全景模式拍摄。推荐点击图片进入大图查看模式～</p>\n</blockquote>\n<p><br></p>\n<p><img src=\"https://img.carlwe.com/IMG_2625.jpg\" alt=\"\"></p>\n<p><center>玉渊潭的樱花</center><br><br></p>\n<p><img src=\"https://img.carlwe.com/IMG_2679.jpg\" alt=\"\"></p>\n<p><center>景山下的故宫</center><br><br></p>\n<p><img src=\"https://img.carlwe.com/IMG_2753.jpg\" alt=\"img\"></p>\n<p><center>故宫角楼</center><br><br></p>\n<p><img src=\"https://img.carlwe.com/IMG_2671.jpg\" alt=\"img\"></p>\n<p><center>远眺国贸</center><br><br></p>"},{"title":"写给自己","date":"2019-07-20T14:54:08.000Z","_content":"\n![](https://img.carlwe.com/snoopy_three.png-h)\n\n<!--more-->\n\n今天看到微博上的一段话觉得挺有用，在这里记下来，写给自己。\n\n**1、坚持锻炼**\n\n你不一定非要去健身房撸铁，也不用非要去报瑜伽班，只要能保持一周3-4天的锻炼就可以，锻炼的方式有很多种，建议最好可以选择跑步，一开始可以从一公里、两公里慢慢坚持，设立目标，不必追求速度，慢跑即可，渐渐你会发现坚持十公里也不是多困难的事情。\n\n**2、阅读**\n\n你不一定非要有多高的学历，不一定非要名校毕业，但是希望你养成天天阅读的习惯，根据自己的爱好，买上几本名著，每晚入睡前阅读上几页，你会睡的更香，而且慢慢你会发现再和朋友聊天，不论朋友们聊到什么样的话题，你都不再无话可接。\n\n**3、不要把幸福寄托在别人身上**\n\n这或许很难，但是一定要明白人会变、情会散，人生的路就是要自己走，没有人可以代替我们的幸福，也不能有人夺走我们的幸福，自给自足的幸福才不会患得患失。\n\n**4、沉稳**\n\n比如任何事情，不要太早急于下结论；不随意表露自己的情绪；遇到事情，都要强制自己冷静下来，只有冷静，才会想到更好的应对方法。如果一开始做不到，压制不住内心的激动或紧张，那就装，使劲装，直到做到。\n\n**5、及时止损**\n\n不要在一个不爱你或者你不爱的人身上浪费时间；不要在你不喜欢且毫无好处的事情上浪费精力。一个人或者一件事，如果发现不对，要及时暂停付出，这样才能不会让自己的时间、经历甚至金钱白白浪费。\n\n**6、不和别人比较**\n\n“一辈子都要和别人比较是人生悲剧的源头。”不要拿自己的缺点和别人的优点比较；可以去羡慕别人，不要去嫉妒别人，我们遇到的每个人，要去发现别人的优点，然后去学习，看到别人的缺点，要联想到自己，在自身避免。\n\n**7、培养有一个爱好**\n\n它可以是唱歌、跳舞、乐器、画画、篮球、羽毛球等等，因为它可以让你在遇到挫折的时候转移注意力；还可以在高兴的时候更加放飞自我；也可以让你在朋友面前更好的展现自己。\n\n**8、拥有另一份收入**\n\n除了工作，一定要再有一个挣钱的技能，“挑水的同时不要忘记挖井”，这可以增加你的收入，况且任何职业都没有真正的“铁饭碗”，一旦有一天你失去工作，你会庆幸你还有一份可以维持生计的收入。\n\n**9、控制情绪**\n\n这一条或许你觉得与第四条相似，但相似绝不重复，这一点我想说的是与家人、朋友、同事相处，都可能会产生摩擦或矛盾，这个时候我希望你不论多生气，都先冷静30秒再说话，带着愤怒的情绪处理一件事只会让这件事最后变的更加糟糕。反之也是一样，得意但不要忘形。\n\n**10、万恶淫为首**\n\n这里的“淫”不是指淫欲或淫秽的意思，而是指“放纵、没有节制”，意思是讲这个世界上最大的恶是做事没有节制且放纵自己，不论好事还是坏事，适度最好，正如《论语•八佾》关雎中所说：“乐而不淫，哀而不伤”。\n\n**11、知行合一**\n\n最后一条算是对以上十条的再次叮嘱，王阳明提出“知行合一”，是要告诉我们“知道做不到，等于不知道”。再多的道理如果只是停留在知道的层面，而没有去付出实践，那这一切都将只是徒劳。\n\n#### 原微博到这里就结束了，我想着觉得还少了点儿什么，于是有了第12条。\n\n**12、百倍努力**\n\n别人都说一分耕耘一分收获，但是记得有个老师一直提醒我：\n\n> 一分努力零分收获\n>\n> 十分努力零分收获\n>\n> 九十九分努力零分收获\n>\n> 只有百分努力才会有一分收获\n\n","source":"_posts/写给自己.md","raw":"---\ntitle: 写给自己\ndate: 2019-07-20 22:54:08\ntags: 生活\n---\n\n![](https://img.carlwe.com/snoopy_three.png-h)\n\n<!--more-->\n\n今天看到微博上的一段话觉得挺有用，在这里记下来，写给自己。\n\n**1、坚持锻炼**\n\n你不一定非要去健身房撸铁，也不用非要去报瑜伽班，只要能保持一周3-4天的锻炼就可以，锻炼的方式有很多种，建议最好可以选择跑步，一开始可以从一公里、两公里慢慢坚持，设立目标，不必追求速度，慢跑即可，渐渐你会发现坚持十公里也不是多困难的事情。\n\n**2、阅读**\n\n你不一定非要有多高的学历，不一定非要名校毕业，但是希望你养成天天阅读的习惯，根据自己的爱好，买上几本名著，每晚入睡前阅读上几页，你会睡的更香，而且慢慢你会发现再和朋友聊天，不论朋友们聊到什么样的话题，你都不再无话可接。\n\n**3、不要把幸福寄托在别人身上**\n\n这或许很难，但是一定要明白人会变、情会散，人生的路就是要自己走，没有人可以代替我们的幸福，也不能有人夺走我们的幸福，自给自足的幸福才不会患得患失。\n\n**4、沉稳**\n\n比如任何事情，不要太早急于下结论；不随意表露自己的情绪；遇到事情，都要强制自己冷静下来，只有冷静，才会想到更好的应对方法。如果一开始做不到，压制不住内心的激动或紧张，那就装，使劲装，直到做到。\n\n**5、及时止损**\n\n不要在一个不爱你或者你不爱的人身上浪费时间；不要在你不喜欢且毫无好处的事情上浪费精力。一个人或者一件事，如果发现不对，要及时暂停付出，这样才能不会让自己的时间、经历甚至金钱白白浪费。\n\n**6、不和别人比较**\n\n“一辈子都要和别人比较是人生悲剧的源头。”不要拿自己的缺点和别人的优点比较；可以去羡慕别人，不要去嫉妒别人，我们遇到的每个人，要去发现别人的优点，然后去学习，看到别人的缺点，要联想到自己，在自身避免。\n\n**7、培养有一个爱好**\n\n它可以是唱歌、跳舞、乐器、画画、篮球、羽毛球等等，因为它可以让你在遇到挫折的时候转移注意力；还可以在高兴的时候更加放飞自我；也可以让你在朋友面前更好的展现自己。\n\n**8、拥有另一份收入**\n\n除了工作，一定要再有一个挣钱的技能，“挑水的同时不要忘记挖井”，这可以增加你的收入，况且任何职业都没有真正的“铁饭碗”，一旦有一天你失去工作，你会庆幸你还有一份可以维持生计的收入。\n\n**9、控制情绪**\n\n这一条或许你觉得与第四条相似，但相似绝不重复，这一点我想说的是与家人、朋友、同事相处，都可能会产生摩擦或矛盾，这个时候我希望你不论多生气，都先冷静30秒再说话，带着愤怒的情绪处理一件事只会让这件事最后变的更加糟糕。反之也是一样，得意但不要忘形。\n\n**10、万恶淫为首**\n\n这里的“淫”不是指淫欲或淫秽的意思，而是指“放纵、没有节制”，意思是讲这个世界上最大的恶是做事没有节制且放纵自己，不论好事还是坏事，适度最好，正如《论语•八佾》关雎中所说：“乐而不淫，哀而不伤”。\n\n**11、知行合一**\n\n最后一条算是对以上十条的再次叮嘱，王阳明提出“知行合一”，是要告诉我们“知道做不到，等于不知道”。再多的道理如果只是停留在知道的层面，而没有去付出实践，那这一切都将只是徒劳。\n\n#### 原微博到这里就结束了，我想着觉得还少了点儿什么，于是有了第12条。\n\n**12、百倍努力**\n\n别人都说一分耕耘一分收获，但是记得有个老师一直提醒我：\n\n> 一分努力零分收获\n>\n> 十分努力零分收获\n>\n> 九十九分努力零分收获\n>\n> 只有百分努力才会有一分收获\n\n","slug":"写给自己","published":1,"updated":"2020-08-18T02:25:58.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnp8000pt57s51dqgtj5","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/snoopy_three.png-h\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>今天看到微博上的一段话觉得挺有用，在这里记下来，写给自己。</p>\n<p><strong>1、坚持锻炼</strong></p>\n<p>你不一定非要去健身房撸铁，也不用非要去报瑜伽班，只要能保持一周3-4天的锻炼就可以，锻炼的方式有很多种，建议最好可以选择跑步，一开始可以从一公里、两公里慢慢坚持，设立目标，不必追求速度，慢跑即可，渐渐你会发现坚持十公里也不是多困难的事情。</p>\n<p><strong>2、阅读</strong></p>\n<p>你不一定非要有多高的学历，不一定非要名校毕业，但是希望你养成天天阅读的习惯，根据自己的爱好，买上几本名著，每晚入睡前阅读上几页，你会睡的更香，而且慢慢你会发现再和朋友聊天，不论朋友们聊到什么样的话题，你都不再无话可接。</p>\n<p><strong>3、不要把幸福寄托在别人身上</strong></p>\n<p>这或许很难，但是一定要明白人会变、情会散，人生的路就是要自己走，没有人可以代替我们的幸福，也不能有人夺走我们的幸福，自给自足的幸福才不会患得患失。</p>\n<p><strong>4、沉稳</strong></p>\n<p>比如任何事情，不要太早急于下结论；不随意表露自己的情绪；遇到事情，都要强制自己冷静下来，只有冷静，才会想到更好的应对方法。如果一开始做不到，压制不住内心的激动或紧张，那就装，使劲装，直到做到。</p>\n<p><strong>5、及时止损</strong></p>\n<p>不要在一个不爱你或者你不爱的人身上浪费时间；不要在你不喜欢且毫无好处的事情上浪费精力。一个人或者一件事，如果发现不对，要及时暂停付出，这样才能不会让自己的时间、经历甚至金钱白白浪费。</p>\n<p><strong>6、不和别人比较</strong></p>\n<p>“一辈子都要和别人比较是人生悲剧的源头。”不要拿自己的缺点和别人的优点比较；可以去羡慕别人，不要去嫉妒别人，我们遇到的每个人，要去发现别人的优点，然后去学习，看到别人的缺点，要联想到自己，在自身避免。</p>\n<p><strong>7、培养有一个爱好</strong></p>\n<p>它可以是唱歌、跳舞、乐器、画画、篮球、羽毛球等等，因为它可以让你在遇到挫折的时候转移注意力；还可以在高兴的时候更加放飞自我；也可以让你在朋友面前更好的展现自己。</p>\n<p><strong>8、拥有另一份收入</strong></p>\n<p>除了工作，一定要再有一个挣钱的技能，“挑水的同时不要忘记挖井”，这可以增加你的收入，况且任何职业都没有真正的“铁饭碗”，一旦有一天你失去工作，你会庆幸你还有一份可以维持生计的收入。</p>\n<p><strong>9、控制情绪</strong></p>\n<p>这一条或许你觉得与第四条相似，但相似绝不重复，这一点我想说的是与家人、朋友、同事相处，都可能会产生摩擦或矛盾，这个时候我希望你不论多生气，都先冷静30秒再说话，带着愤怒的情绪处理一件事只会让这件事最后变的更加糟糕。反之也是一样，得意但不要忘形。</p>\n<p><strong>10、万恶淫为首</strong></p>\n<p>这里的“淫”不是指淫欲或淫秽的意思，而是指“放纵、没有节制”，意思是讲这个世界上最大的恶是做事没有节制且放纵自己，不论好事还是坏事，适度最好，正如《论语•八佾》关雎中所说：“乐而不淫，哀而不伤”。</p>\n<p><strong>11、知行合一</strong></p>\n<p>最后一条算是对以上十条的再次叮嘱，王阳明提出“知行合一”，是要告诉我们“知道做不到，等于不知道”。再多的道理如果只是停留在知道的层面，而没有去付出实践，那这一切都将只是徒劳。</p>\n<h4 id=\"原微博到这里就结束了，我想着觉得还少了点儿什么，于是有了第12条。\"><a href=\"#原微博到这里就结束了，我想着觉得还少了点儿什么，于是有了第12条。\" class=\"headerlink\" title=\"原微博到这里就结束了，我想着觉得还少了点儿什么，于是有了第12条。\"></a>原微博到这里就结束了，我想着觉得还少了点儿什么，于是有了第12条。</h4><p><strong>12、百倍努力</strong></p>\n<p>别人都说一分耕耘一分收获，但是记得有个老师一直提醒我：</p>\n<blockquote>\n<p>一分努力零分收获</p>\n<p>十分努力零分收获</p>\n<p>九十九分努力零分收获</p>\n<p>只有百分努力才会有一分收获</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/snoopy_three.png-h\" alt=\"\"></p>","more":"<p>今天看到微博上的一段话觉得挺有用，在这里记下来，写给自己。</p>\n<p><strong>1、坚持锻炼</strong></p>\n<p>你不一定非要去健身房撸铁，也不用非要去报瑜伽班，只要能保持一周3-4天的锻炼就可以，锻炼的方式有很多种，建议最好可以选择跑步，一开始可以从一公里、两公里慢慢坚持，设立目标，不必追求速度，慢跑即可，渐渐你会发现坚持十公里也不是多困难的事情。</p>\n<p><strong>2、阅读</strong></p>\n<p>你不一定非要有多高的学历，不一定非要名校毕业，但是希望你养成天天阅读的习惯，根据自己的爱好，买上几本名著，每晚入睡前阅读上几页，你会睡的更香，而且慢慢你会发现再和朋友聊天，不论朋友们聊到什么样的话题，你都不再无话可接。</p>\n<p><strong>3、不要把幸福寄托在别人身上</strong></p>\n<p>这或许很难，但是一定要明白人会变、情会散，人生的路就是要自己走，没有人可以代替我们的幸福，也不能有人夺走我们的幸福，自给自足的幸福才不会患得患失。</p>\n<p><strong>4、沉稳</strong></p>\n<p>比如任何事情，不要太早急于下结论；不随意表露自己的情绪；遇到事情，都要强制自己冷静下来，只有冷静，才会想到更好的应对方法。如果一开始做不到，压制不住内心的激动或紧张，那就装，使劲装，直到做到。</p>\n<p><strong>5、及时止损</strong></p>\n<p>不要在一个不爱你或者你不爱的人身上浪费时间；不要在你不喜欢且毫无好处的事情上浪费精力。一个人或者一件事，如果发现不对，要及时暂停付出，这样才能不会让自己的时间、经历甚至金钱白白浪费。</p>\n<p><strong>6、不和别人比较</strong></p>\n<p>“一辈子都要和别人比较是人生悲剧的源头。”不要拿自己的缺点和别人的优点比较；可以去羡慕别人，不要去嫉妒别人，我们遇到的每个人，要去发现别人的优点，然后去学习，看到别人的缺点，要联想到自己，在自身避免。</p>\n<p><strong>7、培养有一个爱好</strong></p>\n<p>它可以是唱歌、跳舞、乐器、画画、篮球、羽毛球等等，因为它可以让你在遇到挫折的时候转移注意力；还可以在高兴的时候更加放飞自我；也可以让你在朋友面前更好的展现自己。</p>\n<p><strong>8、拥有另一份收入</strong></p>\n<p>除了工作，一定要再有一个挣钱的技能，“挑水的同时不要忘记挖井”，这可以增加你的收入，况且任何职业都没有真正的“铁饭碗”，一旦有一天你失去工作，你会庆幸你还有一份可以维持生计的收入。</p>\n<p><strong>9、控制情绪</strong></p>\n<p>这一条或许你觉得与第四条相似，但相似绝不重复，这一点我想说的是与家人、朋友、同事相处，都可能会产生摩擦或矛盾，这个时候我希望你不论多生气，都先冷静30秒再说话，带着愤怒的情绪处理一件事只会让这件事最后变的更加糟糕。反之也是一样，得意但不要忘形。</p>\n<p><strong>10、万恶淫为首</strong></p>\n<p>这里的“淫”不是指淫欲或淫秽的意思，而是指“放纵、没有节制”，意思是讲这个世界上最大的恶是做事没有节制且放纵自己，不论好事还是坏事，适度最好，正如《论语•八佾》关雎中所说：“乐而不淫，哀而不伤”。</p>\n<p><strong>11、知行合一</strong></p>\n<p>最后一条算是对以上十条的再次叮嘱，王阳明提出“知行合一”，是要告诉我们“知道做不到，等于不知道”。再多的道理如果只是停留在知道的层面，而没有去付出实践，那这一切都将只是徒劳。</p>\n<h4 id=\"原微博到这里就结束了，我想着觉得还少了点儿什么，于是有了第12条。\"><a href=\"#原微博到这里就结束了，我想着觉得还少了点儿什么，于是有了第12条。\" class=\"headerlink\" title=\"原微博到这里就结束了，我想着觉得还少了点儿什么，于是有了第12条。\"></a>原微博到这里就结束了，我想着觉得还少了点儿什么，于是有了第12条。</h4><p><strong>12、百倍努力</strong></p>\n<p>别人都说一分耕耘一分收获，但是记得有个老师一直提醒我：</p>\n<blockquote>\n<p>一分努力零分收获</p>\n<p>十分努力零分收获</p>\n<p>九十九分努力零分收获</p>\n<p>只有百分努力才会有一分收获</p>\n</blockquote>"},{"title":"十一苏州行","date":"2019-10-10T11:54:05.000Z","_content":"\n<style>    \n.one {    \n    margin: 0 auto;    \n    height: 100px;    \n    line-height: 230%;\n    writing-mode: vertical-lr;/*从左向右 从右向左是 writing-mode: vertical-rl;*/    \n    writing-mode: tb-lr;/*IE浏览器的从左向右 从右向左是 writing-mode: tb-rl；*/    \n}    \n</style>\n\n<div class=\"one\"><strong><font size=\"4\">忆 江 南</font></strong><br><font size=\"1\" color=\"grey\">白 居 易</font><br><br>江 南 好<br>风 景 旧 曾 谙<br>日 出 江 花<br>红 胜 火<br>春 来 江 水<br>绿 如 蓝<br>能 不 忆 江 南</div> \n<!--more-->\n\n今年的十一正值七十周年大庆，十一的安排就是前往苏州大姐家，想想距离上次来苏州已是四年前的事情了，这次主要是带父母过来玩，顺便拍了些照片。\n\n\n\n### 虎丘\n\n![](https://img.carlwe.com/sz_3817.jpg)\n\n> 上了虎丘山，便可近距离接触虎丘塔，[虎丘山风景区](https://baike.baidu.com/item/%E8%99%8E%E4%B8%98%E5%B1%B1%E9%A3%8E%E6%99%AF%E5%90%8D%E8%83%9C%E5%8C%BA/5635377?fr=aladdin)有2500年的悠久历史。\n\n![](https://img.carlwe.com/sz_9756.jpg)\n\n> 第二次来虎丘，依旧很喜欢这里。著名的景点还有剑池、憨憨泉、试剑石、千人石等，可以看到十一的游客还是挺多的。\n\n\n\n### 山塘街\n\n![](https://img.carlwe.com/sz_8525.jpg)\n\n> [山塘街](https://baike.baidu.com/item/%E5%B1%B1%E5%A1%98%E8%A1%97/641439?fr=aladdin)一角，也许人少的时候漫步其中才能体会到那江南小镇的韵味。\n\n![](https://img.carlwe.com/sz_0332.jpg)\n\n> 前往票务中心，准备登船。\n\n![](https://img.carlwe.com/sz_4055.jpg)\n\n> 船正在靠岸，仔细观察，每条船都配有很固定船的原始长杆。\n\n![](https://img.carlwe.com/sz_8702.jpg)\n\n> 坐在船上向外瞥去，便是江南水乡，小桥流水的美景，担心的可能只有手机了😅\n\n\n\n### 周庄古镇\n\n![](https://img.carlwe.com/sz_9485.jpg)\n\n> 第一次来[周庄古镇](https://baike.baidu.com/item/%E5%91%A8%E5%BA%84%E5%8F%A4%E9%95%87/1443792?fr=aladdin)，这里的文化气息更浓厚些，逛了张厅和沈厅，所见之景不愧被称为中国第一水乡。\n\n![](https://img.carlwe.com/sz_1222.jpg)\n\n> 午饭时在餐厅顶楼所拍，看上去人会少很多。下次再过来，一定错峰出行。\n\n\n\n### 大运河\n\n![](https://img.carlwe.com/sz_7116.jpg)\n\n> 天黑后回到姐姐家，眺望窗外，[京杭大运河](https://baike.baidu.com/item/%E4%BA%AC%E6%9D%AD%E5%A4%A7%E8%BF%90%E6%B2%B3/345335?fr=aladdin)依旧繁忙。\n\n\n\n### 东太湖\n\n![](https://img.carlwe.com/sz_2504.jpg)\n\n> 一行人来到东太湖准备看音乐喷泉，但由于天气原因没有开放，这里配一张16年初过来拍的照片。\n\n![](https://img.carlwe.com/sz_7661.jpg)\n\n> 太湖边的绿道\n\n![](https://img.carlwe.com/sz_2459.jpg)\n\n> 那年栈桥\n\n![](https://img.carlwe.com/sz_2508.jpg)\n\n> 渔夫收网\n\n![](https://img.carlwe.com/sz_2457.jpg)\n\n> 完～\n\n\n","source":"_posts/十一苏州行.md","raw":"---\ntitle: 十一苏州行\ndate: 2019-10-10 19:54:05\ntags: 摄影\n---\n\n<style>    \n.one {    \n    margin: 0 auto;    \n    height: 100px;    \n    line-height: 230%;\n    writing-mode: vertical-lr;/*从左向右 从右向左是 writing-mode: vertical-rl;*/    \n    writing-mode: tb-lr;/*IE浏览器的从左向右 从右向左是 writing-mode: tb-rl；*/    \n}    \n</style>\n\n<div class=\"one\"><strong><font size=\"4\">忆 江 南</font></strong><br><font size=\"1\" color=\"grey\">白 居 易</font><br><br>江 南 好<br>风 景 旧 曾 谙<br>日 出 江 花<br>红 胜 火<br>春 来 江 水<br>绿 如 蓝<br>能 不 忆 江 南</div> \n<!--more-->\n\n今年的十一正值七十周年大庆，十一的安排就是前往苏州大姐家，想想距离上次来苏州已是四年前的事情了，这次主要是带父母过来玩，顺便拍了些照片。\n\n\n\n### 虎丘\n\n![](https://img.carlwe.com/sz_3817.jpg)\n\n> 上了虎丘山，便可近距离接触虎丘塔，[虎丘山风景区](https://baike.baidu.com/item/%E8%99%8E%E4%B8%98%E5%B1%B1%E9%A3%8E%E6%99%AF%E5%90%8D%E8%83%9C%E5%8C%BA/5635377?fr=aladdin)有2500年的悠久历史。\n\n![](https://img.carlwe.com/sz_9756.jpg)\n\n> 第二次来虎丘，依旧很喜欢这里。著名的景点还有剑池、憨憨泉、试剑石、千人石等，可以看到十一的游客还是挺多的。\n\n\n\n### 山塘街\n\n![](https://img.carlwe.com/sz_8525.jpg)\n\n> [山塘街](https://baike.baidu.com/item/%E5%B1%B1%E5%A1%98%E8%A1%97/641439?fr=aladdin)一角，也许人少的时候漫步其中才能体会到那江南小镇的韵味。\n\n![](https://img.carlwe.com/sz_0332.jpg)\n\n> 前往票务中心，准备登船。\n\n![](https://img.carlwe.com/sz_4055.jpg)\n\n> 船正在靠岸，仔细观察，每条船都配有很固定船的原始长杆。\n\n![](https://img.carlwe.com/sz_8702.jpg)\n\n> 坐在船上向外瞥去，便是江南水乡，小桥流水的美景，担心的可能只有手机了😅\n\n\n\n### 周庄古镇\n\n![](https://img.carlwe.com/sz_9485.jpg)\n\n> 第一次来[周庄古镇](https://baike.baidu.com/item/%E5%91%A8%E5%BA%84%E5%8F%A4%E9%95%87/1443792?fr=aladdin)，这里的文化气息更浓厚些，逛了张厅和沈厅，所见之景不愧被称为中国第一水乡。\n\n![](https://img.carlwe.com/sz_1222.jpg)\n\n> 午饭时在餐厅顶楼所拍，看上去人会少很多。下次再过来，一定错峰出行。\n\n\n\n### 大运河\n\n![](https://img.carlwe.com/sz_7116.jpg)\n\n> 天黑后回到姐姐家，眺望窗外，[京杭大运河](https://baike.baidu.com/item/%E4%BA%AC%E6%9D%AD%E5%A4%A7%E8%BF%90%E6%B2%B3/345335?fr=aladdin)依旧繁忙。\n\n\n\n### 东太湖\n\n![](https://img.carlwe.com/sz_2504.jpg)\n\n> 一行人来到东太湖准备看音乐喷泉，但由于天气原因没有开放，这里配一张16年初过来拍的照片。\n\n![](https://img.carlwe.com/sz_7661.jpg)\n\n> 太湖边的绿道\n\n![](https://img.carlwe.com/sz_2459.jpg)\n\n> 那年栈桥\n\n![](https://img.carlwe.com/sz_2508.jpg)\n\n> 渔夫收网\n\n![](https://img.carlwe.com/sz_2457.jpg)\n\n> 完～\n\n\n","slug":"十一苏州行","published":1,"updated":"2020-08-18T02:25:58.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnp9000st57sdp3w87q2","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><style>    \n.one {    \n    margin: 0 auto;    \n    height: 100px;    \n    line-height: 230%;\n    writing-mode: vertical-lr;/*从左向右 从右向左是 writing-mode: vertical-rl;*/    \n    writing-mode: tb-lr;/*IE浏览器的从左向右 从右向左是 writing-mode: tb-rl；*/    \n}    \n</style>\n\n<p><div class=\"one\"><strong><font size=\"4\">忆 江 南</font></strong><br><font size=\"1\" color=\"grey\">白 居 易</font><br><br>江 南 好<br>风 景 旧 曾 谙<br>日 出 江 花<br>红 胜 火<br>春 来 江 水<br>绿 如 蓝<br>能 不 忆 江 南</div><br><a id=\"more\"></a></p>\n<p>今年的十一正值七十周年大庆，十一的安排就是前往苏州大姐家，想想距离上次来苏州已是四年前的事情了，这次主要是带父母过来玩，顺便拍了些照片。</p>\n<h3 id=\"虎丘\"><a href=\"#虎丘\" class=\"headerlink\" title=\"虎丘\"></a>虎丘</h3><p><img src=\"https://img.carlwe.com/sz_3817.jpg\" alt=\"\"></p>\n<blockquote>\n<p>上了虎丘山，便可近距离接触虎丘塔，<a href=\"https://baike.baidu.com/item/%E8%99%8E%E4%B8%98%E5%B1%B1%E9%A3%8E%E6%99%AF%E5%90%8D%E8%83%9C%E5%8C%BA/5635377?fr=aladdin\" target=\"_blank\" rel=\"noopener\">虎丘山风景区</a>有2500年的悠久历史。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_9756.jpg\" alt=\"\"></p>\n<blockquote>\n<p>第二次来虎丘，依旧很喜欢这里。著名的景点还有剑池、憨憨泉、试剑石、千人石等，可以看到十一的游客还是挺多的。</p>\n</blockquote>\n<h3 id=\"山塘街\"><a href=\"#山塘街\" class=\"headerlink\" title=\"山塘街\"></a>山塘街</h3><p><img src=\"https://img.carlwe.com/sz_8525.jpg\" alt=\"\"></p>\n<blockquote>\n<p><a href=\"https://baike.baidu.com/item/%E5%B1%B1%E5%A1%98%E8%A1%97/641439?fr=aladdin\" target=\"_blank\" rel=\"noopener\">山塘街</a>一角，也许人少的时候漫步其中才能体会到那江南小镇的韵味。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_0332.jpg\" alt=\"\"></p>\n<blockquote>\n<p>前往票务中心，准备登船。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_4055.jpg\" alt=\"\"></p>\n<blockquote>\n<p>船正在靠岸，仔细观察，每条船都配有很固定船的原始长杆。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_8702.jpg\" alt=\"\"></p>\n<blockquote>\n<p>坐在船上向外瞥去，便是江南水乡，小桥流水的美景，担心的可能只有手机了😅</p>\n</blockquote>\n<h3 id=\"周庄古镇\"><a href=\"#周庄古镇\" class=\"headerlink\" title=\"周庄古镇\"></a>周庄古镇</h3><p><img src=\"https://img.carlwe.com/sz_9485.jpg\" alt=\"\"></p>\n<blockquote>\n<p>第一次来<a href=\"https://baike.baidu.com/item/%E5%91%A8%E5%BA%84%E5%8F%A4%E9%95%87/1443792?fr=aladdin\" target=\"_blank\" rel=\"noopener\">周庄古镇</a>，这里的文化气息更浓厚些，逛了张厅和沈厅，所见之景不愧被称为中国第一水乡。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_1222.jpg\" alt=\"\"></p>\n<blockquote>\n<p>午饭时在餐厅顶楼所拍，看上去人会少很多。下次再过来，一定错峰出行。</p>\n</blockquote>\n<h3 id=\"大运河\"><a href=\"#大运河\" class=\"headerlink\" title=\"大运河\"></a>大运河</h3><p><img src=\"https://img.carlwe.com/sz_7116.jpg\" alt=\"\"></p>\n<blockquote>\n<p>天黑后回到姐姐家，眺望窗外，<a href=\"https://baike.baidu.com/item/%E4%BA%AC%E6%9D%AD%E5%A4%A7%E8%BF%90%E6%B2%B3/345335?fr=aladdin\" target=\"_blank\" rel=\"noopener\">京杭大运河</a>依旧繁忙。</p>\n</blockquote>\n<h3 id=\"东太湖\"><a href=\"#东太湖\" class=\"headerlink\" title=\"东太湖\"></a>东太湖</h3><p><img src=\"https://img.carlwe.com/sz_2504.jpg\" alt=\"\"></p>\n<blockquote>\n<p>一行人来到东太湖准备看音乐喷泉，但由于天气原因没有开放，这里配一张16年初过来拍的照片。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_7661.jpg\" alt=\"\"></p>\n<blockquote>\n<p>太湖边的绿道</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_2459.jpg\" alt=\"\"></p>\n<blockquote>\n<p>那年栈桥</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_2508.jpg\" alt=\"\"></p>\n<blockquote>\n<p>渔夫收网</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_2457.jpg\" alt=\"\"></p>\n<blockquote>\n<p>完～</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<style>    \n.one {    \n    margin: 0 auto;    \n    height: 100px;    \n    line-height: 230%;\n    writing-mode: vertical-lr;/*从左向右 从右向左是 writing-mode: vertical-rl;*/    \n    writing-mode: tb-lr;/*IE浏览器的从左向右 从右向左是 writing-mode: tb-rl；*/    \n}    \n</style>\n\n<p><div class=\"one\"><strong><font size=\"4\">忆 江 南</font></strong><br><font size=\"1\" color=\"grey\">白 居 易</font><br><br>江 南 好<br>风 景 旧 曾 谙<br>日 出 江 花<br>红 胜 火<br>春 来 江 水<br>绿 如 蓝<br>能 不 忆 江 南</div><br>","more":"</p>\n<p>今年的十一正值七十周年大庆，十一的安排就是前往苏州大姐家，想想距离上次来苏州已是四年前的事情了，这次主要是带父母过来玩，顺便拍了些照片。</p>\n<h3 id=\"虎丘\"><a href=\"#虎丘\" class=\"headerlink\" title=\"虎丘\"></a>虎丘</h3><p><img src=\"https://img.carlwe.com/sz_3817.jpg\" alt=\"\"></p>\n<blockquote>\n<p>上了虎丘山，便可近距离接触虎丘塔，<a href=\"https://baike.baidu.com/item/%E8%99%8E%E4%B8%98%E5%B1%B1%E9%A3%8E%E6%99%AF%E5%90%8D%E8%83%9C%E5%8C%BA/5635377?fr=aladdin\" target=\"_blank\" rel=\"noopener\">虎丘山风景区</a>有2500年的悠久历史。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_9756.jpg\" alt=\"\"></p>\n<blockquote>\n<p>第二次来虎丘，依旧很喜欢这里。著名的景点还有剑池、憨憨泉、试剑石、千人石等，可以看到十一的游客还是挺多的。</p>\n</blockquote>\n<h3 id=\"山塘街\"><a href=\"#山塘街\" class=\"headerlink\" title=\"山塘街\"></a>山塘街</h3><p><img src=\"https://img.carlwe.com/sz_8525.jpg\" alt=\"\"></p>\n<blockquote>\n<p><a href=\"https://baike.baidu.com/item/%E5%B1%B1%E5%A1%98%E8%A1%97/641439?fr=aladdin\" target=\"_blank\" rel=\"noopener\">山塘街</a>一角，也许人少的时候漫步其中才能体会到那江南小镇的韵味。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_0332.jpg\" alt=\"\"></p>\n<blockquote>\n<p>前往票务中心，准备登船。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_4055.jpg\" alt=\"\"></p>\n<blockquote>\n<p>船正在靠岸，仔细观察，每条船都配有很固定船的原始长杆。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_8702.jpg\" alt=\"\"></p>\n<blockquote>\n<p>坐在船上向外瞥去，便是江南水乡，小桥流水的美景，担心的可能只有手机了😅</p>\n</blockquote>\n<h3 id=\"周庄古镇\"><a href=\"#周庄古镇\" class=\"headerlink\" title=\"周庄古镇\"></a>周庄古镇</h3><p><img src=\"https://img.carlwe.com/sz_9485.jpg\" alt=\"\"></p>\n<blockquote>\n<p>第一次来<a href=\"https://baike.baidu.com/item/%E5%91%A8%E5%BA%84%E5%8F%A4%E9%95%87/1443792?fr=aladdin\" target=\"_blank\" rel=\"noopener\">周庄古镇</a>，这里的文化气息更浓厚些，逛了张厅和沈厅，所见之景不愧被称为中国第一水乡。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_1222.jpg\" alt=\"\"></p>\n<blockquote>\n<p>午饭时在餐厅顶楼所拍，看上去人会少很多。下次再过来，一定错峰出行。</p>\n</blockquote>\n<h3 id=\"大运河\"><a href=\"#大运河\" class=\"headerlink\" title=\"大运河\"></a>大运河</h3><p><img src=\"https://img.carlwe.com/sz_7116.jpg\" alt=\"\"></p>\n<blockquote>\n<p>天黑后回到姐姐家，眺望窗外，<a href=\"https://baike.baidu.com/item/%E4%BA%AC%E6%9D%AD%E5%A4%A7%E8%BF%90%E6%B2%B3/345335?fr=aladdin\" target=\"_blank\" rel=\"noopener\">京杭大运河</a>依旧繁忙。</p>\n</blockquote>\n<h3 id=\"东太湖\"><a href=\"#东太湖\" class=\"headerlink\" title=\"东太湖\"></a>东太湖</h3><p><img src=\"https://img.carlwe.com/sz_2504.jpg\" alt=\"\"></p>\n<blockquote>\n<p>一行人来到东太湖准备看音乐喷泉，但由于天气原因没有开放，这里配一张16年初过来拍的照片。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_7661.jpg\" alt=\"\"></p>\n<blockquote>\n<p>太湖边的绿道</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_2459.jpg\" alt=\"\"></p>\n<blockquote>\n<p>那年栈桥</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_2508.jpg\" alt=\"\"></p>\n<blockquote>\n<p>渔夫收网</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_2457.jpg\" alt=\"\"></p>\n<blockquote>\n<p>完～</p>\n</blockquote>"},{"title":"博客搭建之路","date":"2018-12-22T07:26:37.000Z","_content":"\n![](https://img.carlwe.com/successRoad.png-h)\n\n> 前面说了这是我第二次搭建博客，所以对搭建博客的基本流程还算清楚，当时也写过一次博客的搭建流程，写的特别细，每一步，每个截图都贴上去了。\n\n<!--more-->\n\n但说实话，这种搭建博客的步骤网上一大堆，而且你去复刻的时候会遇到各种问题，着实让人感觉头疼。其实，个人博客搭建就那些东西，所以这篇博客我主要绍下搭建博客的基本步骤，同时推荐几个我在搭建博客中用到的软件。\n\n## 博客应该是什么样子呢\n\n首先需要明确我们需要一个怎样的博客，对于我自己来说有如下四点要求：\n\n- 搭建博客方便\n- 简洁的博客界面\n- 友好的文章撰写工具\n- 博客能够方便的评论\n\n我觉得这些，对于我们想拥有一个自己的博客的人来说太重要了！首先如果博客搭建不够方便，那基本上第一步就迈不出去；其次，博客看起来太丑或手机上不兼容，那真是让人接受不了；再者，写一篇文章如果需要繁琐的撰写步骤和限制，估计你写几篇之后也就不想继续写了；最后如果你写的文章不管好坏，别人看了都不能发表意见，那样博客就失去了交互性。接下来我就来介绍下我是如何搭建一个满足上述四个要求的博客网站。\n\n## 开始搭建\n\n> 在博客搭建之前我想说明下，如果你有一定的编程经验那么搭建过程则会比较顺利，如果没有经验也没有关系，遇到问题百度下大部分问题都可以解决，如果解决不了，也欢迎大家在下面留言，我会一一给大家解答。\n\n### 一、快速搭建\n\n![](https://img.carlwe.com/hexo.png-s)\n\n- 挑选\n\n> 简单的说博客其实就是一个网站，有了博客框架，我们就不需要去通过写代码来搭建博客，我们只需要做一些简单的配置，来自定义你博客的名称、头像、主题等，让其变为自己想要的风格。目前流行的博客框架有**[WordPress](https://cn.wordpress.org)**和**[Hexo](https://hexo.io)**，WordPress一般国外用的比较多，这里我推荐的是Hexo，原因很简单，因为用的人多，相关的资料也比较多，如果遇到问题，上网上去查一下就很快可以解决。同时官网文档是这么介绍的：\n>\n> > Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n>\n> 可见其速度也非常快，到这里博客框架我们就选好了。\n\n- 搭建\n\n> Hexo的搭建可以参考[Hexo官方文档](https://hexo.io/zh-cn/docs/)，现在已经推出了视频教程。简单总结下可以分为如下几个步骤：\n>\n> 1. 配置环境（Node.js、Git、Hexo）\n> 2. 建站（在电脑本地的一个文件夹下执行 `hexo init` 生成网站所需的文件）\n> 3. 配置（在 `_config.yml` 文件中配置网站的标题、名称等信息）\n>\n> 完成上述三个步骤之后就可以通过顺次执行 `hexo g` 和 `hexo s` 在本地浏览器中进行预览了。\n\n- 部署\n\n![](https://img.carlwe.com/coding.png-s)\n\n>仅仅在自己电脑上能够浏览，肯定是你不希望的。那我们如何让所有的人都可以看到我们的博客呢？首先我们不需要通过购买服务器来展示你的博客，现在有很多免费的Pages静态服务，你可以把网站托管在上面，比如GitHub、GitLab、Coding，这里我推荐[Coding](https://dev.tencent.com/)（服务器在国内访问速度快）。部署步骤如下：\n>1. 注册Coding账号、创建一个项目、开通Pages服务。\n>\n>2. 修改博客配置文件 `_config.yml` 最后面的 `deploy` 的 `repo` 加上:\n>\n>   `coding: https://git.dev.tencent.com/AccountName/ProJectName.git`\n>\n>3. 执行 `hexo g -d` 部署成功之后，你就可以通过例如：[1649201921.coding.me/blog](https://1649201921.coding.me/blog) 让其他人来访问你的博客。\n>\n>到这里部署就完成了，如果你想让国外友人也可以方便的访问你的博客，也可以同时部署到GitHub。最后你可以去阿里云等平台去购买域名，然后添加域名解析到自己的博客，这样你就可以通过自己的域名访问你的博客了，在这里提醒下**最好购买能够备案的域名！！！**\n\n### 二、优化界面\n\n![](https://img.carlwe.com/NexT_logo.svg)\n\n- 挑选\n\n> 虽然上面我们已经把网站部署好了，但是你会发现网站并不是自己想要的样子，因为使用的是默认的主题 ，所以接下来我们要给我们的博客换一套好看的**“皮肤”**。Hexo支持主题的更换，并且有很多好看的主题，大部分都同时支持手机端访问。你可在Hexo的[主题页面](https://hexo.io/themes/)来挑选你所喜爱的主题。在这里我推荐两个主题：\n>\n> - [Yilia](https://github.com/litten/hexo-theme-yilia)\n> - [NexT](https://github.com/theme-next/hexo-theme-next)\n>\n> 我的博客使用的是NexT主题，NexT主题也有几种不同的样式，可以在在NexT的GitHub上查看不同样式的博客网站效果，找一个你所喜欢的。\n\n- 配置主题\n\n>主题的配置也很简单，分为如下三步：\n>\n>1. 安装，将主题clone到本地的 `themes/next` 文件夹下。\n>2. 配置博客根目录下的 `_config.yml` 修改为 `theme: next` 。\n>3. 配置主题文件下的 `_config.yml` ，该目录你可以修改博客的大部分自定义配置。例如设置菜单、 头像、昵称、第三方服务（文章统计、评论、分享）等，详细的配置你可以查看 [NexT 使用文档](http://theme-next.iissnan.com/) 。\n\n到这里你可以通过本地预览刚刚配置的博客，相信现在的博客大体上就可以满足你的要求了，但是似乎还没有你自己写的文章，那接下来我们就来看看如何方便的来进行博文的撰写。\n\n### 三、开始书写\n\n![](https://img.carlwe.com/typora_logo.png-s)\n\n对于博客拥有者来说写博客会占用其大部分时间。所以博客的创作过程的友好性也是十分重要的！Hexo通过渲染MarkDown格式的文本来展示你的博客。所以首先我们需要了解MarkDown的语法。\n\n* 学习MarkDown语法\n\n> 对于MarkDown的学习快速上手可以参考这里👉 [segmentfault](https://segmentfault.com/markdown)\n>\n> 详细的MarkDown语法可以参考这里👉 [简书](https://www.jianshu.com/p/191d1e21f7ed)\n>\n\n- 挑选MarkDown编辑器\n\n> 熟悉了MarkDown语法之后我们需要一个友好的MarkDown编辑器。推荐如下两个编辑器。\n>\n> - [CmdMarkDown](https://www.zybuluo.com/mdeditor)\n> - [Typora](https://www.typora.io/)\n>\n> 最开始用的是作业部落[CmdMarkDown](https://www.zybuluo.com/mdeditor)好处是可以左右对照。注册账号之后可以云端同步。后来无意之间发现了Typora，被其简洁的界面和无缝的编写方式所吸引。\n\n- 图片怎么办🤔 \n\n![](https://img.carlwe.com/qiniu_logo.png)\n\n>  博客中显示图片相信对每个写博客的人来说都很重要。因为图片较大，所以不建议和博客放一起，可以在GitHub或Coding上新建一个仓库放置图片，但通常的做法是利用图床。这里我推荐如下2个：\n>\n> - [七牛云对象存储](https://www.qiniu.com/products/kodo)\n> - [阿里云对象存储](https://www.aliyun.com/product/oss)\n>\n> 本来想推荐七牛云，但是不幸的是，七牛云现在每个自动分配的图片访问域名只能用一个月。如果想继续使用，你只能绑定你自己已备案的域名才能够享受免费每月10G的存储空间和100万次的GET请求，问了客服，花钱也不能长久使用。虽然这个免费策略对我们刚开始写博客的朋友来说确实很太友，但域名备案需要购买服务器，且需要花费20天左右的时间。所以如果你现在想使用，在购买域名的时候一定要注意，你的域名是否可以备案，2018年后工信部对于很多域名的备案都有限制，例如.cc的域名在北京就不可以备案。\n>\n> 再来说说阿里云，阿里云如果想使用对象存储，需要你购买存储包和流量包，而且请求次数较多时也会计费。适合企业级对于存储容量和访问次数要求较大的用户。但是一个好处就是，你可以先只花5元购买半年40G的存储空间。可以免费获得一个图片访问的域名。这个域名是和你的套餐一起的。只要你续费就不会过期。其他的花费是大概每个0.5元/G的流量费和0.1元/万次的请求费，这取决于你博客的图片大小、数量和访问人数，刚开始使用的话不会太贵。\n>\n> 如果你已经有一个备案过的域名，你可以添加一个域名解析，通过你自己的域名来访问七牛云或阿里云的照片，例如：[img.carlwe.com/whyblog.png](https://img.carlwe.com/whyblog.png)\n\n- 通过使用iPic让添加图片更方便\n\n![](https://img.carlwe.com/iPic.png-s)\n\n>如果你的图床已经就绪，一般图床都提供上传图片的地方。但是每次你都要去制作图片->打开网站->上传图片->复制链接->编辑 `![图片名称](链接)` ->把链接粘贴进去，确实不太方便。这里我推荐使用Typroa和iPic来结合使用。iPic目前需要收费，6/元每月，支持正版。\n>\n>- [iPic](https://toolinbox.net/iPic/)\n>\n>按照iPic上介绍的方式完成你图床和Typroa的设置之后，你只需要将图片拖入Typora即可。其他的你都不用管了。\n\n- 通过TinyPNG4Mac来压缩图片\n\n![](https://img.carlwe.com/TinyPNG4Mac.png-s)\n\n>如果你使用Mac，可以使用TinyPNG4Mac来压缩图片。TinyPNG4Mac 利用TinyPng的图片压缩技术，只需将图片拖入即可压缩，压缩比惊人，同时图片质量感官上基本上没有改变，关键还免费。强烈推荐！\n>\n>👉[TinyPNG4Mac](https://github.com/kyleduo/TinyPNG4Mac)\n\n### 四、评论系统\n\n![](https://img.carlwe.com/valine.png-s)\n\n通过上述三步，你已经可以开心的写自己的博客了。然而，博客发表之后如果你的博客能够评论那样交互性会变得更好，有了评论之后，你也可以获得读者的反馈，同读者进行交流，提升自己。\n\n* 挑选\n\n> 之前我的博客用的是畅言，我们可以通过微博或手机接收验证码登陆，然后进行评论，评论的门槛很高，就算有想要评论的朋友也会因为繁琐的过程而放弃。类似的评论系统有很多。而且大多需要网站进行备案。这里说下我的推荐：\n>\n> - [Valine](https://valine.js.org/)\n>\n> 优点是不需要域名备案、支持匿名评论、NexT原生支持、统一的风格、支持MarkDown、Gravatar、邮件提醒、文章阅读量统计，剩下的就是接入了。\n\n- 接入\n\n> 配置主题文件下的 `_config.yml` 开启Valine评论，同时需要去LeanCloud（评论数据所在的位置）注册账号，获取appid和appkey，然后在配置文件中填入即可，具体步骤可参考 [快速开始](https://valine.js.org/quickstart.html)\n\n作为博客所有人，你可以去Gravatar注册一个账号然后上传你的头像，在评论的时候输入你的邮箱和昵称就可以显示你的头像了。同时你可以在LeanCloud中设置邮件提醒，也可以开启评论验证码，但是不太推荐。\n\n## 总结及完善\n\n通过上面四点我们已经可以搭建一个满意的博客了，就像你现在看到样子。博客的搭建过程由于不同的环境可能会出现不同的问题，但是总结下来，我觉得如下三点很重要：\n\n>1. 尽量阅读官方的文档进行操作。大部分时候官方文档可以解决你90%的问题，而且是最权威的解决方式。\n>2. 遇到问题不要放弃，多尝试。\n>3. 博客搭建容易，难的是坚持写博客。\n\n虽然目前博客已经可以运行了，但其实还是有很多可以优化的地方，以下几点也是接下来我努力的方向：\n\n>1. 能够友好的分享到微信好友及朋友圈\n>2. 更好的图片、音频、视频浏览体验\n>3. 博客较多时开通搜索功能\n>4. 创建自定义的文章分类\n\n这就是我博客的搭建之路，过程中也遇到过很多问题，但只要你坚持下去，相信你的博客也将变得越来越好，有什么问题可以在下面给我留言。","source":"_posts/博客搭建之路.md","raw":"---\ntitle: 博客搭建之路\ndate: 2018-12-22 15:26:37\ntags: 科技\n---\n\n![](https://img.carlwe.com/successRoad.png-h)\n\n> 前面说了这是我第二次搭建博客，所以对搭建博客的基本流程还算清楚，当时也写过一次博客的搭建流程，写的特别细，每一步，每个截图都贴上去了。\n\n<!--more-->\n\n但说实话，这种搭建博客的步骤网上一大堆，而且你去复刻的时候会遇到各种问题，着实让人感觉头疼。其实，个人博客搭建就那些东西，所以这篇博客我主要绍下搭建博客的基本步骤，同时推荐几个我在搭建博客中用到的软件。\n\n## 博客应该是什么样子呢\n\n首先需要明确我们需要一个怎样的博客，对于我自己来说有如下四点要求：\n\n- 搭建博客方便\n- 简洁的博客界面\n- 友好的文章撰写工具\n- 博客能够方便的评论\n\n我觉得这些，对于我们想拥有一个自己的博客的人来说太重要了！首先如果博客搭建不够方便，那基本上第一步就迈不出去；其次，博客看起来太丑或手机上不兼容，那真是让人接受不了；再者，写一篇文章如果需要繁琐的撰写步骤和限制，估计你写几篇之后也就不想继续写了；最后如果你写的文章不管好坏，别人看了都不能发表意见，那样博客就失去了交互性。接下来我就来介绍下我是如何搭建一个满足上述四个要求的博客网站。\n\n## 开始搭建\n\n> 在博客搭建之前我想说明下，如果你有一定的编程经验那么搭建过程则会比较顺利，如果没有经验也没有关系，遇到问题百度下大部分问题都可以解决，如果解决不了，也欢迎大家在下面留言，我会一一给大家解答。\n\n### 一、快速搭建\n\n![](https://img.carlwe.com/hexo.png-s)\n\n- 挑选\n\n> 简单的说博客其实就是一个网站，有了博客框架，我们就不需要去通过写代码来搭建博客，我们只需要做一些简单的配置，来自定义你博客的名称、头像、主题等，让其变为自己想要的风格。目前流行的博客框架有**[WordPress](https://cn.wordpress.org)**和**[Hexo](https://hexo.io)**，WordPress一般国外用的比较多，这里我推荐的是Hexo，原因很简单，因为用的人多，相关的资料也比较多，如果遇到问题，上网上去查一下就很快可以解决。同时官网文档是这么介绍的：\n>\n> > Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n>\n> 可见其速度也非常快，到这里博客框架我们就选好了。\n\n- 搭建\n\n> Hexo的搭建可以参考[Hexo官方文档](https://hexo.io/zh-cn/docs/)，现在已经推出了视频教程。简单总结下可以分为如下几个步骤：\n>\n> 1. 配置环境（Node.js、Git、Hexo）\n> 2. 建站（在电脑本地的一个文件夹下执行 `hexo init` 生成网站所需的文件）\n> 3. 配置（在 `_config.yml` 文件中配置网站的标题、名称等信息）\n>\n> 完成上述三个步骤之后就可以通过顺次执行 `hexo g` 和 `hexo s` 在本地浏览器中进行预览了。\n\n- 部署\n\n![](https://img.carlwe.com/coding.png-s)\n\n>仅仅在自己电脑上能够浏览，肯定是你不希望的。那我们如何让所有的人都可以看到我们的博客呢？首先我们不需要通过购买服务器来展示你的博客，现在有很多免费的Pages静态服务，你可以把网站托管在上面，比如GitHub、GitLab、Coding，这里我推荐[Coding](https://dev.tencent.com/)（服务器在国内访问速度快）。部署步骤如下：\n>1. 注册Coding账号、创建一个项目、开通Pages服务。\n>\n>2. 修改博客配置文件 `_config.yml` 最后面的 `deploy` 的 `repo` 加上:\n>\n>   `coding: https://git.dev.tencent.com/AccountName/ProJectName.git`\n>\n>3. 执行 `hexo g -d` 部署成功之后，你就可以通过例如：[1649201921.coding.me/blog](https://1649201921.coding.me/blog) 让其他人来访问你的博客。\n>\n>到这里部署就完成了，如果你想让国外友人也可以方便的访问你的博客，也可以同时部署到GitHub。最后你可以去阿里云等平台去购买域名，然后添加域名解析到自己的博客，这样你就可以通过自己的域名访问你的博客了，在这里提醒下**最好购买能够备案的域名！！！**\n\n### 二、优化界面\n\n![](https://img.carlwe.com/NexT_logo.svg)\n\n- 挑选\n\n> 虽然上面我们已经把网站部署好了，但是你会发现网站并不是自己想要的样子，因为使用的是默认的主题 ，所以接下来我们要给我们的博客换一套好看的**“皮肤”**。Hexo支持主题的更换，并且有很多好看的主题，大部分都同时支持手机端访问。你可在Hexo的[主题页面](https://hexo.io/themes/)来挑选你所喜爱的主题。在这里我推荐两个主题：\n>\n> - [Yilia](https://github.com/litten/hexo-theme-yilia)\n> - [NexT](https://github.com/theme-next/hexo-theme-next)\n>\n> 我的博客使用的是NexT主题，NexT主题也有几种不同的样式，可以在在NexT的GitHub上查看不同样式的博客网站效果，找一个你所喜欢的。\n\n- 配置主题\n\n>主题的配置也很简单，分为如下三步：\n>\n>1. 安装，将主题clone到本地的 `themes/next` 文件夹下。\n>2. 配置博客根目录下的 `_config.yml` 修改为 `theme: next` 。\n>3. 配置主题文件下的 `_config.yml` ，该目录你可以修改博客的大部分自定义配置。例如设置菜单、 头像、昵称、第三方服务（文章统计、评论、分享）等，详细的配置你可以查看 [NexT 使用文档](http://theme-next.iissnan.com/) 。\n\n到这里你可以通过本地预览刚刚配置的博客，相信现在的博客大体上就可以满足你的要求了，但是似乎还没有你自己写的文章，那接下来我们就来看看如何方便的来进行博文的撰写。\n\n### 三、开始书写\n\n![](https://img.carlwe.com/typora_logo.png-s)\n\n对于博客拥有者来说写博客会占用其大部分时间。所以博客的创作过程的友好性也是十分重要的！Hexo通过渲染MarkDown格式的文本来展示你的博客。所以首先我们需要了解MarkDown的语法。\n\n* 学习MarkDown语法\n\n> 对于MarkDown的学习快速上手可以参考这里👉 [segmentfault](https://segmentfault.com/markdown)\n>\n> 详细的MarkDown语法可以参考这里👉 [简书](https://www.jianshu.com/p/191d1e21f7ed)\n>\n\n- 挑选MarkDown编辑器\n\n> 熟悉了MarkDown语法之后我们需要一个友好的MarkDown编辑器。推荐如下两个编辑器。\n>\n> - [CmdMarkDown](https://www.zybuluo.com/mdeditor)\n> - [Typora](https://www.typora.io/)\n>\n> 最开始用的是作业部落[CmdMarkDown](https://www.zybuluo.com/mdeditor)好处是可以左右对照。注册账号之后可以云端同步。后来无意之间发现了Typora，被其简洁的界面和无缝的编写方式所吸引。\n\n- 图片怎么办🤔 \n\n![](https://img.carlwe.com/qiniu_logo.png)\n\n>  博客中显示图片相信对每个写博客的人来说都很重要。因为图片较大，所以不建议和博客放一起，可以在GitHub或Coding上新建一个仓库放置图片，但通常的做法是利用图床。这里我推荐如下2个：\n>\n> - [七牛云对象存储](https://www.qiniu.com/products/kodo)\n> - [阿里云对象存储](https://www.aliyun.com/product/oss)\n>\n> 本来想推荐七牛云，但是不幸的是，七牛云现在每个自动分配的图片访问域名只能用一个月。如果想继续使用，你只能绑定你自己已备案的域名才能够享受免费每月10G的存储空间和100万次的GET请求，问了客服，花钱也不能长久使用。虽然这个免费策略对我们刚开始写博客的朋友来说确实很太友，但域名备案需要购买服务器，且需要花费20天左右的时间。所以如果你现在想使用，在购买域名的时候一定要注意，你的域名是否可以备案，2018年后工信部对于很多域名的备案都有限制，例如.cc的域名在北京就不可以备案。\n>\n> 再来说说阿里云，阿里云如果想使用对象存储，需要你购买存储包和流量包，而且请求次数较多时也会计费。适合企业级对于存储容量和访问次数要求较大的用户。但是一个好处就是，你可以先只花5元购买半年40G的存储空间。可以免费获得一个图片访问的域名。这个域名是和你的套餐一起的。只要你续费就不会过期。其他的花费是大概每个0.5元/G的流量费和0.1元/万次的请求费，这取决于你博客的图片大小、数量和访问人数，刚开始使用的话不会太贵。\n>\n> 如果你已经有一个备案过的域名，你可以添加一个域名解析，通过你自己的域名来访问七牛云或阿里云的照片，例如：[img.carlwe.com/whyblog.png](https://img.carlwe.com/whyblog.png)\n\n- 通过使用iPic让添加图片更方便\n\n![](https://img.carlwe.com/iPic.png-s)\n\n>如果你的图床已经就绪，一般图床都提供上传图片的地方。但是每次你都要去制作图片->打开网站->上传图片->复制链接->编辑 `![图片名称](链接)` ->把链接粘贴进去，确实不太方便。这里我推荐使用Typroa和iPic来结合使用。iPic目前需要收费，6/元每月，支持正版。\n>\n>- [iPic](https://toolinbox.net/iPic/)\n>\n>按照iPic上介绍的方式完成你图床和Typroa的设置之后，你只需要将图片拖入Typora即可。其他的你都不用管了。\n\n- 通过TinyPNG4Mac来压缩图片\n\n![](https://img.carlwe.com/TinyPNG4Mac.png-s)\n\n>如果你使用Mac，可以使用TinyPNG4Mac来压缩图片。TinyPNG4Mac 利用TinyPng的图片压缩技术，只需将图片拖入即可压缩，压缩比惊人，同时图片质量感官上基本上没有改变，关键还免费。强烈推荐！\n>\n>👉[TinyPNG4Mac](https://github.com/kyleduo/TinyPNG4Mac)\n\n### 四、评论系统\n\n![](https://img.carlwe.com/valine.png-s)\n\n通过上述三步，你已经可以开心的写自己的博客了。然而，博客发表之后如果你的博客能够评论那样交互性会变得更好，有了评论之后，你也可以获得读者的反馈，同读者进行交流，提升自己。\n\n* 挑选\n\n> 之前我的博客用的是畅言，我们可以通过微博或手机接收验证码登陆，然后进行评论，评论的门槛很高，就算有想要评论的朋友也会因为繁琐的过程而放弃。类似的评论系统有很多。而且大多需要网站进行备案。这里说下我的推荐：\n>\n> - [Valine](https://valine.js.org/)\n>\n> 优点是不需要域名备案、支持匿名评论、NexT原生支持、统一的风格、支持MarkDown、Gravatar、邮件提醒、文章阅读量统计，剩下的就是接入了。\n\n- 接入\n\n> 配置主题文件下的 `_config.yml` 开启Valine评论，同时需要去LeanCloud（评论数据所在的位置）注册账号，获取appid和appkey，然后在配置文件中填入即可，具体步骤可参考 [快速开始](https://valine.js.org/quickstart.html)\n\n作为博客所有人，你可以去Gravatar注册一个账号然后上传你的头像，在评论的时候输入你的邮箱和昵称就可以显示你的头像了。同时你可以在LeanCloud中设置邮件提醒，也可以开启评论验证码，但是不太推荐。\n\n## 总结及完善\n\n通过上面四点我们已经可以搭建一个满意的博客了，就像你现在看到样子。博客的搭建过程由于不同的环境可能会出现不同的问题，但是总结下来，我觉得如下三点很重要：\n\n>1. 尽量阅读官方的文档进行操作。大部分时候官方文档可以解决你90%的问题，而且是最权威的解决方式。\n>2. 遇到问题不要放弃，多尝试。\n>3. 博客搭建容易，难的是坚持写博客。\n\n虽然目前博客已经可以运行了，但其实还是有很多可以优化的地方，以下几点也是接下来我努力的方向：\n\n>1. 能够友好的分享到微信好友及朋友圈\n>2. 更好的图片、音频、视频浏览体验\n>3. 博客较多时开通搜索功能\n>4. 创建自定义的文章分类\n\n这就是我博客的搭建之路，过程中也遇到过很多问题，但只要你坚持下去，相信你的博客也将变得越来越好，有什么问题可以在下面给我留言。","slug":"博客搭建之路","published":1,"updated":"2020-08-18T02:25:58.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnpa000ut57sxwcu1uwq","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/successRoad.png-h\" alt=\"\"></p>\n<blockquote>\n<p>前面说了这是我第二次搭建博客，所以对搭建博客的基本流程还算清楚，当时也写过一次博客的搭建流程，写的特别细，每一步，每个截图都贴上去了。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>但说实话，这种搭建博客的步骤网上一大堆，而且你去复刻的时候会遇到各种问题，着实让人感觉头疼。其实，个人博客搭建就那些东西，所以这篇博客我主要绍下搭建博客的基本步骤，同时推荐几个我在搭建博客中用到的软件。</p>\n<h2 id=\"博客应该是什么样子呢\"><a href=\"#博客应该是什么样子呢\" class=\"headerlink\" title=\"博客应该是什么样子呢\"></a>博客应该是什么样子呢</h2><p>首先需要明确我们需要一个怎样的博客，对于我自己来说有如下四点要求：</p>\n<ul>\n<li>搭建博客方便</li>\n<li>简洁的博客界面</li>\n<li>友好的文章撰写工具</li>\n<li>博客能够方便的评论</li>\n</ul>\n<p>我觉得这些，对于我们想拥有一个自己的博客的人来说太重要了！首先如果博客搭建不够方便，那基本上第一步就迈不出去；其次，博客看起来太丑或手机上不兼容，那真是让人接受不了；再者，写一篇文章如果需要繁琐的撰写步骤和限制，估计你写几篇之后也就不想继续写了；最后如果你写的文章不管好坏，别人看了都不能发表意见，那样博客就失去了交互性。接下来我就来介绍下我是如何搭建一个满足上述四个要求的博客网站。</p>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><blockquote>\n<p>在博客搭建之前我想说明下，如果你有一定的编程经验那么搭建过程则会比较顺利，如果没有经验也没有关系，遇到问题百度下大部分问题都可以解决，如果解决不了，也欢迎大家在下面留言，我会一一给大家解答。</p>\n</blockquote>\n<h3 id=\"一、快速搭建\"><a href=\"#一、快速搭建\" class=\"headerlink\" title=\"一、快速搭建\"></a>一、快速搭建</h3><p><img src=\"https://img.carlwe.com/hexo.png-s\" alt=\"\"></p>\n<ul>\n<li>挑选</li>\n</ul>\n<blockquote>\n<p>简单的说博客其实就是一个网站，有了博客框架，我们就不需要去通过写代码来搭建博客，我们只需要做一些简单的配置，来自定义你博客的名称、头像、主题等，让其变为自己想要的风格。目前流行的博客框架有<strong><a href=\"https://cn.wordpress.org\" target=\"_blank\" rel=\"noopener\">WordPress</a></strong>和<strong><a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a></strong>，WordPress一般国外用的比较多，这里我推荐的是Hexo，原因很简单，因为用的人多，相关的资料也比较多，如果遇到问题，上网上去查一下就很快可以解决。同时官网文档是这么介绍的：</p>\n<blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<p>可见其速度也非常快，到这里博客框架我们就选好了。</p>\n</blockquote>\n<ul>\n<li>搭建</li>\n</ul>\n<blockquote>\n<p>Hexo的搭建可以参考<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a>，现在已经推出了视频教程。简单总结下可以分为如下几个步骤：</p>\n<ol>\n<li>配置环境（Node.js、Git、Hexo）</li>\n<li>建站（在电脑本地的一个文件夹下执行 <code>hexo init</code> 生成网站所需的文件）</li>\n<li>配置（在 <code>_config.yml</code> 文件中配置网站的标题、名称等信息）</li>\n</ol>\n<p>完成上述三个步骤之后就可以通过顺次执行 <code>hexo g</code> 和 <code>hexo s</code> 在本地浏览器中进行预览了。</p>\n</blockquote>\n<ul>\n<li>部署</li>\n</ul>\n<p><img src=\"https://img.carlwe.com/coding.png-s\" alt=\"\"></p>\n<blockquote>\n<p>仅仅在自己电脑上能够浏览，肯定是你不希望的。那我们如何让所有的人都可以看到我们的博客呢？首先我们不需要通过购买服务器来展示你的博客，现在有很多免费的Pages静态服务，你可以把网站托管在上面，比如GitHub、GitLab、Coding，这里我推荐<a href=\"https://dev.tencent.com/\" target=\"_blank\" rel=\"noopener\">Coding</a>（服务器在国内访问速度快）。部署步骤如下：</p>\n<ol>\n<li><p>注册Coding账号、创建一个项目、开通Pages服务。</p>\n</li>\n<li><p>修改博客配置文件 <code>_config.yml</code> 最后面的 <code>deploy</code> 的 <code>repo</code> 加上:</p>\n<p><code>coding: https://git.dev.tencent.com/AccountName/ProJectName.git</code></p>\n</li>\n<li><p>执行 <code>hexo g -d</code> 部署成功之后，你就可以通过例如：<a href=\"https://1649201921.coding.me/blog\" target=\"_blank\" rel=\"noopener\">1649201921.coding.me/blog</a> 让其他人来访问你的博客。</p>\n</li>\n</ol>\n<p>到这里部署就完成了，如果你想让国外友人也可以方便的访问你的博客，也可以同时部署到GitHub。最后你可以去阿里云等平台去购买域名，然后添加域名解析到自己的博客，这样你就可以通过自己的域名访问你的博客了，在这里提醒下<strong>最好购买能够备案的域名！！！</strong></p>\n</blockquote>\n<h3 id=\"二、优化界面\"><a href=\"#二、优化界面\" class=\"headerlink\" title=\"二、优化界面\"></a>二、优化界面</h3><p><img src=\"https://img.carlwe.com/NexT_logo.svg\" alt=\"\"></p>\n<ul>\n<li>挑选</li>\n</ul>\n<blockquote>\n<p>虽然上面我们已经把网站部署好了，但是你会发现网站并不是自己想要的样子，因为使用的是默认的主题 ，所以接下来我们要给我们的博客换一套好看的<strong>“皮肤”</strong>。Hexo支持主题的更换，并且有很多好看的主题，大部分都同时支持手机端访问。你可在Hexo的<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">主题页面</a>来挑选你所喜爱的主题。在这里我推荐两个主题：</p>\n<ul>\n<li><a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">Yilia</a></li>\n<li><a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">NexT</a></li>\n</ul>\n<p>我的博客使用的是NexT主题，NexT主题也有几种不同的样式，可以在在NexT的GitHub上查看不同样式的博客网站效果，找一个你所喜欢的。</p>\n</blockquote>\n<ul>\n<li>配置主题</li>\n</ul>\n<blockquote>\n<p>主题的配置也很简单，分为如下三步：</p>\n<ol>\n<li>安装，将主题clone到本地的 <code>themes/next</code> 文件夹下。</li>\n<li>配置博客根目录下的 <code>_config.yml</code> 修改为 <code>theme: next</code> 。</li>\n<li>配置主题文件下的 <code>_config.yml</code> ，该目录你可以修改博客的大部分自定义配置。例如设置菜单、 头像、昵称、第三方服务（文章统计、评论、分享）等，详细的配置你可以查看 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT 使用文档</a> 。</li>\n</ol>\n</blockquote>\n<p>到这里你可以通过本地预览刚刚配置的博客，相信现在的博客大体上就可以满足你的要求了，但是似乎还没有你自己写的文章，那接下来我们就来看看如何方便的来进行博文的撰写。</p>\n<h3 id=\"三、开始书写\"><a href=\"#三、开始书写\" class=\"headerlink\" title=\"三、开始书写\"></a>三、开始书写</h3><p><img src=\"https://img.carlwe.com/typora_logo.png-s\" alt=\"\"></p>\n<p>对于博客拥有者来说写博客会占用其大部分时间。所以博客的创作过程的友好性也是十分重要的！Hexo通过渲染MarkDown格式的文本来展示你的博客。所以首先我们需要了解MarkDown的语法。</p>\n<ul>\n<li>学习MarkDown语法</li>\n</ul>\n<blockquote>\n<p>对于MarkDown的学习快速上手可以参考这里👉 <a href=\"https://segmentfault.com/markdown\" target=\"_blank\" rel=\"noopener\">segmentfault</a></p>\n<p>详细的MarkDown语法可以参考这里👉 <a href=\"https://www.jianshu.com/p/191d1e21f7ed\" target=\"_blank\" rel=\"noopener\">简书</a></p>\n</blockquote>\n<ul>\n<li>挑选MarkDown编辑器</li>\n</ul>\n<blockquote>\n<p>熟悉了MarkDown语法之后我们需要一个友好的MarkDown编辑器。推荐如下两个编辑器。</p>\n<ul>\n<li><a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">CmdMarkDown</a></li>\n<li><a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a></li>\n</ul>\n<p>最开始用的是作业部落<a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">CmdMarkDown</a>好处是可以左右对照。注册账号之后可以云端同步。后来无意之间发现了Typora，被其简洁的界面和无缝的编写方式所吸引。</p>\n</blockquote>\n<ul>\n<li>图片怎么办🤔 </li>\n</ul>\n<p><img src=\"https://img.carlwe.com/qiniu_logo.png\" alt=\"\"></p>\n<blockquote>\n<p> 博客中显示图片相信对每个写博客的人来说都很重要。因为图片较大，所以不建议和博客放一起，可以在GitHub或Coding上新建一个仓库放置图片，但通常的做法是利用图床。这里我推荐如下2个：</p>\n<ul>\n<li><a href=\"https://www.qiniu.com/products/kodo\" target=\"_blank\" rel=\"noopener\">七牛云对象存储</a></li>\n<li><a href=\"https://www.aliyun.com/product/oss\" target=\"_blank\" rel=\"noopener\">阿里云对象存储</a></li>\n</ul>\n<p>本来想推荐七牛云，但是不幸的是，七牛云现在每个自动分配的图片访问域名只能用一个月。如果想继续使用，你只能绑定你自己已备案的域名才能够享受免费每月10G的存储空间和100万次的GET请求，问了客服，花钱也不能长久使用。虽然这个免费策略对我们刚开始写博客的朋友来说确实很太友，但域名备案需要购买服务器，且需要花费20天左右的时间。所以如果你现在想使用，在购买域名的时候一定要注意，你的域名是否可以备案，2018年后工信部对于很多域名的备案都有限制，例如.cc的域名在北京就不可以备案。</p>\n<p>再来说说阿里云，阿里云如果想使用对象存储，需要你购买存储包和流量包，而且请求次数较多时也会计费。适合企业级对于存储容量和访问次数要求较大的用户。但是一个好处就是，你可以先只花5元购买半年40G的存储空间。可以免费获得一个图片访问的域名。这个域名是和你的套餐一起的。只要你续费就不会过期。其他的花费是大概每个0.5元/G的流量费和0.1元/万次的请求费，这取决于你博客的图片大小、数量和访问人数，刚开始使用的话不会太贵。</p>\n<p>如果你已经有一个备案过的域名，你可以添加一个域名解析，通过你自己的域名来访问七牛云或阿里云的照片，例如：<a href=\"https://img.carlwe.com/whyblog.png\" target=\"_blank\" rel=\"noopener\">img.carlwe.com/whyblog.png</a></p>\n</blockquote>\n<ul>\n<li>通过使用iPic让添加图片更方便</li>\n</ul>\n<p><img src=\"https://img.carlwe.com/iPic.png-s\" alt=\"\"></p>\n<blockquote>\n<p>如果你的图床已经就绪，一般图床都提供上传图片的地方。但是每次你都要去制作图片-&gt;打开网站-&gt;上传图片-&gt;复制链接-&gt;编辑 <code>![图片名称](链接)</code> -&gt;把链接粘贴进去，确实不太方便。这里我推荐使用Typroa和iPic来结合使用。iPic目前需要收费，6/元每月，支持正版。</p>\n<ul>\n<li><a href=\"https://toolinbox.net/iPic/\" target=\"_blank\" rel=\"noopener\">iPic</a></li>\n</ul>\n<p>按照iPic上介绍的方式完成你图床和Typroa的设置之后，你只需要将图片拖入Typora即可。其他的你都不用管了。</p>\n</blockquote>\n<ul>\n<li>通过TinyPNG4Mac来压缩图片</li>\n</ul>\n<p><img src=\"https://img.carlwe.com/TinyPNG4Mac.png-s\" alt=\"\"></p>\n<blockquote>\n<p>如果你使用Mac，可以使用TinyPNG4Mac来压缩图片。TinyPNG4Mac 利用TinyPng的图片压缩技术，只需将图片拖入即可压缩，压缩比惊人，同时图片质量感官上基本上没有改变，关键还免费。强烈推荐！</p>\n<p>👉<a href=\"https://github.com/kyleduo/TinyPNG4Mac\" target=\"_blank\" rel=\"noopener\">TinyPNG4Mac</a></p>\n</blockquote>\n<h3 id=\"四、评论系统\"><a href=\"#四、评论系统\" class=\"headerlink\" title=\"四、评论系统\"></a>四、评论系统</h3><p><img src=\"https://img.carlwe.com/valine.png-s\" alt=\"\"></p>\n<p>通过上述三步，你已经可以开心的写自己的博客了。然而，博客发表之后如果你的博客能够评论那样交互性会变得更好，有了评论之后，你也可以获得读者的反馈，同读者进行交流，提升自己。</p>\n<ul>\n<li>挑选</li>\n</ul>\n<blockquote>\n<p>之前我的博客用的是畅言，我们可以通过微博或手机接收验证码登陆，然后进行评论，评论的门槛很高，就算有想要评论的朋友也会因为繁琐的过程而放弃。类似的评论系统有很多。而且大多需要网站进行备案。这里说下我的推荐：</p>\n<ul>\n<li><a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">Valine</a></li>\n</ul>\n<p>优点是不需要域名备案、支持匿名评论、NexT原生支持、统一的风格、支持MarkDown、Gravatar、邮件提醒、文章阅读量统计，剩下的就是接入了。</p>\n</blockquote>\n<ul>\n<li>接入</li>\n</ul>\n<blockquote>\n<p>配置主题文件下的 <code>_config.yml</code> 开启Valine评论，同时需要去LeanCloud（评论数据所在的位置）注册账号，获取appid和appkey，然后在配置文件中填入即可，具体步骤可参考 <a href=\"https://valine.js.org/quickstart.html\" target=\"_blank\" rel=\"noopener\">快速开始</a></p>\n</blockquote>\n<p>作为博客所有人，你可以去Gravatar注册一个账号然后上传你的头像，在评论的时候输入你的邮箱和昵称就可以显示你的头像了。同时你可以在LeanCloud中设置邮件提醒，也可以开启评论验证码，但是不太推荐。</p>\n<h2 id=\"总结及完善\"><a href=\"#总结及完善\" class=\"headerlink\" title=\"总结及完善\"></a>总结及完善</h2><p>通过上面四点我们已经可以搭建一个满意的博客了，就像你现在看到样子。博客的搭建过程由于不同的环境可能会出现不同的问题，但是总结下来，我觉得如下三点很重要：</p>\n<blockquote>\n<ol>\n<li>尽量阅读官方的文档进行操作。大部分时候官方文档可以解决你90%的问题，而且是最权威的解决方式。</li>\n<li>遇到问题不要放弃，多尝试。</li>\n<li>博客搭建容易，难的是坚持写博客。</li>\n</ol>\n</blockquote>\n<p>虽然目前博客已经可以运行了，但其实还是有很多可以优化的地方，以下几点也是接下来我努力的方向：</p>\n<blockquote>\n<ol>\n<li>能够友好的分享到微信好友及朋友圈</li>\n<li>更好的图片、音频、视频浏览体验</li>\n<li>博客较多时开通搜索功能</li>\n<li>创建自定义的文章分类</li>\n</ol>\n</blockquote>\n<p>这就是我博客的搭建之路，过程中也遇到过很多问题，但只要你坚持下去，相信你的博客也将变得越来越好，有什么问题可以在下面给我留言。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/successRoad.png-h\" alt=\"\"></p>\n<blockquote>\n<p>前面说了这是我第二次搭建博客，所以对搭建博客的基本流程还算清楚，当时也写过一次博客的搭建流程，写的特别细，每一步，每个截图都贴上去了。</p>\n</blockquote>","more":"<p>但说实话，这种搭建博客的步骤网上一大堆，而且你去复刻的时候会遇到各种问题，着实让人感觉头疼。其实，个人博客搭建就那些东西，所以这篇博客我主要绍下搭建博客的基本步骤，同时推荐几个我在搭建博客中用到的软件。</p>\n<h2 id=\"博客应该是什么样子呢\"><a href=\"#博客应该是什么样子呢\" class=\"headerlink\" title=\"博客应该是什么样子呢\"></a>博客应该是什么样子呢</h2><p>首先需要明确我们需要一个怎样的博客，对于我自己来说有如下四点要求：</p>\n<ul>\n<li>搭建博客方便</li>\n<li>简洁的博客界面</li>\n<li>友好的文章撰写工具</li>\n<li>博客能够方便的评论</li>\n</ul>\n<p>我觉得这些，对于我们想拥有一个自己的博客的人来说太重要了！首先如果博客搭建不够方便，那基本上第一步就迈不出去；其次，博客看起来太丑或手机上不兼容，那真是让人接受不了；再者，写一篇文章如果需要繁琐的撰写步骤和限制，估计你写几篇之后也就不想继续写了；最后如果你写的文章不管好坏，别人看了都不能发表意见，那样博客就失去了交互性。接下来我就来介绍下我是如何搭建一个满足上述四个要求的博客网站。</p>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><blockquote>\n<p>在博客搭建之前我想说明下，如果你有一定的编程经验那么搭建过程则会比较顺利，如果没有经验也没有关系，遇到问题百度下大部分问题都可以解决，如果解决不了，也欢迎大家在下面留言，我会一一给大家解答。</p>\n</blockquote>\n<h3 id=\"一、快速搭建\"><a href=\"#一、快速搭建\" class=\"headerlink\" title=\"一、快速搭建\"></a>一、快速搭建</h3><p><img src=\"https://img.carlwe.com/hexo.png-s\" alt=\"\"></p>\n<ul>\n<li>挑选</li>\n</ul>\n<blockquote>\n<p>简单的说博客其实就是一个网站，有了博客框架，我们就不需要去通过写代码来搭建博客，我们只需要做一些简单的配置，来自定义你博客的名称、头像、主题等，让其变为自己想要的风格。目前流行的博客框架有<strong><a href=\"https://cn.wordpress.org\" target=\"_blank\" rel=\"noopener\">WordPress</a></strong>和<strong><a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a></strong>，WordPress一般国外用的比较多，这里我推荐的是Hexo，原因很简单，因为用的人多，相关的资料也比较多，如果遇到问题，上网上去查一下就很快可以解决。同时官网文档是这么介绍的：</p>\n<blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<p>可见其速度也非常快，到这里博客框架我们就选好了。</p>\n</blockquote>\n<ul>\n<li>搭建</li>\n</ul>\n<blockquote>\n<p>Hexo的搭建可以参考<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a>，现在已经推出了视频教程。简单总结下可以分为如下几个步骤：</p>\n<ol>\n<li>配置环境（Node.js、Git、Hexo）</li>\n<li>建站（在电脑本地的一个文件夹下执行 <code>hexo init</code> 生成网站所需的文件）</li>\n<li>配置（在 <code>_config.yml</code> 文件中配置网站的标题、名称等信息）</li>\n</ol>\n<p>完成上述三个步骤之后就可以通过顺次执行 <code>hexo g</code> 和 <code>hexo s</code> 在本地浏览器中进行预览了。</p>\n</blockquote>\n<ul>\n<li>部署</li>\n</ul>\n<p><img src=\"https://img.carlwe.com/coding.png-s\" alt=\"\"></p>\n<blockquote>\n<p>仅仅在自己电脑上能够浏览，肯定是你不希望的。那我们如何让所有的人都可以看到我们的博客呢？首先我们不需要通过购买服务器来展示你的博客，现在有很多免费的Pages静态服务，你可以把网站托管在上面，比如GitHub、GitLab、Coding，这里我推荐<a href=\"https://dev.tencent.com/\" target=\"_blank\" rel=\"noopener\">Coding</a>（服务器在国内访问速度快）。部署步骤如下：</p>\n<ol>\n<li><p>注册Coding账号、创建一个项目、开通Pages服务。</p>\n</li>\n<li><p>修改博客配置文件 <code>_config.yml</code> 最后面的 <code>deploy</code> 的 <code>repo</code> 加上:</p>\n<p><code>coding: https://git.dev.tencent.com/AccountName/ProJectName.git</code></p>\n</li>\n<li><p>执行 <code>hexo g -d</code> 部署成功之后，你就可以通过例如：<a href=\"https://1649201921.coding.me/blog\" target=\"_blank\" rel=\"noopener\">1649201921.coding.me/blog</a> 让其他人来访问你的博客。</p>\n</li>\n</ol>\n<p>到这里部署就完成了，如果你想让国外友人也可以方便的访问你的博客，也可以同时部署到GitHub。最后你可以去阿里云等平台去购买域名，然后添加域名解析到自己的博客，这样你就可以通过自己的域名访问你的博客了，在这里提醒下<strong>最好购买能够备案的域名！！！</strong></p>\n</blockquote>\n<h3 id=\"二、优化界面\"><a href=\"#二、优化界面\" class=\"headerlink\" title=\"二、优化界面\"></a>二、优化界面</h3><p><img src=\"https://img.carlwe.com/NexT_logo.svg\" alt=\"\"></p>\n<ul>\n<li>挑选</li>\n</ul>\n<blockquote>\n<p>虽然上面我们已经把网站部署好了，但是你会发现网站并不是自己想要的样子，因为使用的是默认的主题 ，所以接下来我们要给我们的博客换一套好看的<strong>“皮肤”</strong>。Hexo支持主题的更换，并且有很多好看的主题，大部分都同时支持手机端访问。你可在Hexo的<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">主题页面</a>来挑选你所喜爱的主题。在这里我推荐两个主题：</p>\n<ul>\n<li><a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">Yilia</a></li>\n<li><a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">NexT</a></li>\n</ul>\n<p>我的博客使用的是NexT主题，NexT主题也有几种不同的样式，可以在在NexT的GitHub上查看不同样式的博客网站效果，找一个你所喜欢的。</p>\n</blockquote>\n<ul>\n<li>配置主题</li>\n</ul>\n<blockquote>\n<p>主题的配置也很简单，分为如下三步：</p>\n<ol>\n<li>安装，将主题clone到本地的 <code>themes/next</code> 文件夹下。</li>\n<li>配置博客根目录下的 <code>_config.yml</code> 修改为 <code>theme: next</code> 。</li>\n<li>配置主题文件下的 <code>_config.yml</code> ，该目录你可以修改博客的大部分自定义配置。例如设置菜单、 头像、昵称、第三方服务（文章统计、评论、分享）等，详细的配置你可以查看 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT 使用文档</a> 。</li>\n</ol>\n</blockquote>\n<p>到这里你可以通过本地预览刚刚配置的博客，相信现在的博客大体上就可以满足你的要求了，但是似乎还没有你自己写的文章，那接下来我们就来看看如何方便的来进行博文的撰写。</p>\n<h3 id=\"三、开始书写\"><a href=\"#三、开始书写\" class=\"headerlink\" title=\"三、开始书写\"></a>三、开始书写</h3><p><img src=\"https://img.carlwe.com/typora_logo.png-s\" alt=\"\"></p>\n<p>对于博客拥有者来说写博客会占用其大部分时间。所以博客的创作过程的友好性也是十分重要的！Hexo通过渲染MarkDown格式的文本来展示你的博客。所以首先我们需要了解MarkDown的语法。</p>\n<ul>\n<li>学习MarkDown语法</li>\n</ul>\n<blockquote>\n<p>对于MarkDown的学习快速上手可以参考这里👉 <a href=\"https://segmentfault.com/markdown\" target=\"_blank\" rel=\"noopener\">segmentfault</a></p>\n<p>详细的MarkDown语法可以参考这里👉 <a href=\"https://www.jianshu.com/p/191d1e21f7ed\" target=\"_blank\" rel=\"noopener\">简书</a></p>\n</blockquote>\n<ul>\n<li>挑选MarkDown编辑器</li>\n</ul>\n<blockquote>\n<p>熟悉了MarkDown语法之后我们需要一个友好的MarkDown编辑器。推荐如下两个编辑器。</p>\n<ul>\n<li><a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">CmdMarkDown</a></li>\n<li><a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a></li>\n</ul>\n<p>最开始用的是作业部落<a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">CmdMarkDown</a>好处是可以左右对照。注册账号之后可以云端同步。后来无意之间发现了Typora，被其简洁的界面和无缝的编写方式所吸引。</p>\n</blockquote>\n<ul>\n<li>图片怎么办🤔 </li>\n</ul>\n<p><img src=\"https://img.carlwe.com/qiniu_logo.png\" alt=\"\"></p>\n<blockquote>\n<p> 博客中显示图片相信对每个写博客的人来说都很重要。因为图片较大，所以不建议和博客放一起，可以在GitHub或Coding上新建一个仓库放置图片，但通常的做法是利用图床。这里我推荐如下2个：</p>\n<ul>\n<li><a href=\"https://www.qiniu.com/products/kodo\" target=\"_blank\" rel=\"noopener\">七牛云对象存储</a></li>\n<li><a href=\"https://www.aliyun.com/product/oss\" target=\"_blank\" rel=\"noopener\">阿里云对象存储</a></li>\n</ul>\n<p>本来想推荐七牛云，但是不幸的是，七牛云现在每个自动分配的图片访问域名只能用一个月。如果想继续使用，你只能绑定你自己已备案的域名才能够享受免费每月10G的存储空间和100万次的GET请求，问了客服，花钱也不能长久使用。虽然这个免费策略对我们刚开始写博客的朋友来说确实很太友，但域名备案需要购买服务器，且需要花费20天左右的时间。所以如果你现在想使用，在购买域名的时候一定要注意，你的域名是否可以备案，2018年后工信部对于很多域名的备案都有限制，例如.cc的域名在北京就不可以备案。</p>\n<p>再来说说阿里云，阿里云如果想使用对象存储，需要你购买存储包和流量包，而且请求次数较多时也会计费。适合企业级对于存储容量和访问次数要求较大的用户。但是一个好处就是，你可以先只花5元购买半年40G的存储空间。可以免费获得一个图片访问的域名。这个域名是和你的套餐一起的。只要你续费就不会过期。其他的花费是大概每个0.5元/G的流量费和0.1元/万次的请求费，这取决于你博客的图片大小、数量和访问人数，刚开始使用的话不会太贵。</p>\n<p>如果你已经有一个备案过的域名，你可以添加一个域名解析，通过你自己的域名来访问七牛云或阿里云的照片，例如：<a href=\"https://img.carlwe.com/whyblog.png\" target=\"_blank\" rel=\"noopener\">img.carlwe.com/whyblog.png</a></p>\n</blockquote>\n<ul>\n<li>通过使用iPic让添加图片更方便</li>\n</ul>\n<p><img src=\"https://img.carlwe.com/iPic.png-s\" alt=\"\"></p>\n<blockquote>\n<p>如果你的图床已经就绪，一般图床都提供上传图片的地方。但是每次你都要去制作图片-&gt;打开网站-&gt;上传图片-&gt;复制链接-&gt;编辑 <code>![图片名称](链接)</code> -&gt;把链接粘贴进去，确实不太方便。这里我推荐使用Typroa和iPic来结合使用。iPic目前需要收费，6/元每月，支持正版。</p>\n<ul>\n<li><a href=\"https://toolinbox.net/iPic/\" target=\"_blank\" rel=\"noopener\">iPic</a></li>\n</ul>\n<p>按照iPic上介绍的方式完成你图床和Typroa的设置之后，你只需要将图片拖入Typora即可。其他的你都不用管了。</p>\n</blockquote>\n<ul>\n<li>通过TinyPNG4Mac来压缩图片</li>\n</ul>\n<p><img src=\"https://img.carlwe.com/TinyPNG4Mac.png-s\" alt=\"\"></p>\n<blockquote>\n<p>如果你使用Mac，可以使用TinyPNG4Mac来压缩图片。TinyPNG4Mac 利用TinyPng的图片压缩技术，只需将图片拖入即可压缩，压缩比惊人，同时图片质量感官上基本上没有改变，关键还免费。强烈推荐！</p>\n<p>👉<a href=\"https://github.com/kyleduo/TinyPNG4Mac\" target=\"_blank\" rel=\"noopener\">TinyPNG4Mac</a></p>\n</blockquote>\n<h3 id=\"四、评论系统\"><a href=\"#四、评论系统\" class=\"headerlink\" title=\"四、评论系统\"></a>四、评论系统</h3><p><img src=\"https://img.carlwe.com/valine.png-s\" alt=\"\"></p>\n<p>通过上述三步，你已经可以开心的写自己的博客了。然而，博客发表之后如果你的博客能够评论那样交互性会变得更好，有了评论之后，你也可以获得读者的反馈，同读者进行交流，提升自己。</p>\n<ul>\n<li>挑选</li>\n</ul>\n<blockquote>\n<p>之前我的博客用的是畅言，我们可以通过微博或手机接收验证码登陆，然后进行评论，评论的门槛很高，就算有想要评论的朋友也会因为繁琐的过程而放弃。类似的评论系统有很多。而且大多需要网站进行备案。这里说下我的推荐：</p>\n<ul>\n<li><a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">Valine</a></li>\n</ul>\n<p>优点是不需要域名备案、支持匿名评论、NexT原生支持、统一的风格、支持MarkDown、Gravatar、邮件提醒、文章阅读量统计，剩下的就是接入了。</p>\n</blockquote>\n<ul>\n<li>接入</li>\n</ul>\n<blockquote>\n<p>配置主题文件下的 <code>_config.yml</code> 开启Valine评论，同时需要去LeanCloud（评论数据所在的位置）注册账号，获取appid和appkey，然后在配置文件中填入即可，具体步骤可参考 <a href=\"https://valine.js.org/quickstart.html\" target=\"_blank\" rel=\"noopener\">快速开始</a></p>\n</blockquote>\n<p>作为博客所有人，你可以去Gravatar注册一个账号然后上传你的头像，在评论的时候输入你的邮箱和昵称就可以显示你的头像了。同时你可以在LeanCloud中设置邮件提醒，也可以开启评论验证码，但是不太推荐。</p>\n<h2 id=\"总结及完善\"><a href=\"#总结及完善\" class=\"headerlink\" title=\"总结及完善\"></a>总结及完善</h2><p>通过上面四点我们已经可以搭建一个满意的博客了，就像你现在看到样子。博客的搭建过程由于不同的环境可能会出现不同的问题，但是总结下来，我觉得如下三点很重要：</p>\n<blockquote>\n<ol>\n<li>尽量阅读官方的文档进行操作。大部分时候官方文档可以解决你90%的问题，而且是最权威的解决方式。</li>\n<li>遇到问题不要放弃，多尝试。</li>\n<li>博客搭建容易，难的是坚持写博客。</li>\n</ol>\n</blockquote>\n<p>虽然目前博客已经可以运行了，但其实还是有很多可以优化的地方，以下几点也是接下来我努力的方向：</p>\n<blockquote>\n<ol>\n<li>能够友好的分享到微信好友及朋友圈</li>\n<li>更好的图片、音频、视频浏览体验</li>\n<li>博客较多时开通搜索功能</li>\n<li>创建自定义的文章分类</li>\n</ol>\n</blockquote>\n<p>这就是我博客的搭建之路，过程中也遇到过很多问题，但只要你坚持下去，相信你的博客也将变得越来越好，有什么问题可以在下面给我留言。</p>"},{"title":"我有20张照片想和你分享","date":"2019-02-03T13:20:31.000Z","_content":"\n![](https://img.carlwe.com/jimu_logo.jpg-h)\n\n<!--more-->\n\n{% meting \"29567187\" \"netease\" \"song\" %}\n\n##  \n\n今天除夕，我从今年拍摄的一万多张照片中精选了20张图片分享给大家，可点击查看大图，图片排名不分先后。如果喜欢，欢迎在下方评论区留言，说出你觉得好看的照片～\n\n\n\n##  \n\n<center>1.蜿蜒长城</center>\n\n![](https://img.carlwe.com/IMG_1236.jpg)\n\n> 拍摄于去年春节之后，带着大姐去爬长城，那天的天空和照片中的一样蓝。喜欢长城的起伏蜿蜒和磅礴的气势，70D拍摄。\n\n\n\n<center>2.昆明湖</center>\n\n![](https://img.carlwe.com/IMG_1425.jpg)\n\n> 这张照片同样是拍摄于去年春节期间，烈日下的昆明湖面与远处的佛香阁交相辉映，70D拍摄。\n\n\n\n<center>3.大空山</center>\n\n![](https://img.carlwe.com/dakongshan.jpg)\n\n> 大空山位于云南腾冲县境内，5A级景区，喷发于90万年以前，海拔2072米，附近大小火山100多座，可乘坐热气球观光，风景优美，70D拍摄。\n\n\n\n<center>4.柱状节理</center>\n\n![](https://img.carlwe.com/jieli.jpg)\n\n>腾冲黑鱼河柱状节理，当地人称为“神柱”，火山岩冷却时形成，是我国迄今为止发现的一片规模最大、保存完整、年代最短的柱状节理，大约形成于4万年前，70D拍摄。\n\n\n\n<center>5.观音殿</center>\n\n![](https://img.carlwe.com/IMG_2184.jpg)\n\n> 该观音殿位于大理三塔寺内，70D、10mm广角拍摄。\n\n\n\n<center>6.日照苍山</center>\n\n![](https://img.carlwe.com/IMG_20180319_073536_HDR.jpg)\n\n> 清晨7点35分，在洱海边太阳还未升起，太阳的余晖映射到苍山上，呈现出的金色格外好看。小米6拍摄，LR调色。\n\n\n\n<center>7.苍山与洱海</center>\n\n![](https://img.carlwe.com/IMG_20180328_221958.jpg)\n\n> 三月，带着三脚架和相机爬上近4000米的苍山顶，雪还未融化，雨后的白云触手可及，山下的洱海碧波万顷，70D拍摄。\n\n\n\n<center>8.十渡</center>\n\n![](https://img.carlwe.com/IMG_4134.jpg)\n\n>十渡拒马河景区， 对面“蝙蝠山”犹如一只振翅欲飞的蝙蝠，造型生动、形象逼真，感叹大自然的鬼斧神工，70D拍摄。\n\n\n\n<center>9.午后的森林公园</center>\n\n![](https://img.carlwe.com/IMG_0234.jpg)\n\n> 大运河森林公园中的一景，shotoniphone\n\n\n\n<center>10.归雁</center>\n\n![](https://img.carlwe.com/IMG_3726.jpg)\n\n> 同样在大运河森林公园中，偶遇大雁排成人字，70D拍摄。\n\n\n\n<center>11.飞机</center>\n\n![](https://img.carlwe.com/IMG_0535.jpg)\n\n> 回家路上随手拍，尝试了一下iPhone的2x变焦功能。\n\n\n\n<center>12.小区晴天</center>\n\n![](https://img.carlwe.com/IMG_0477.jpg)\n\n> 上班路上小区随手拍，喜欢这种简单的照片，无后期，shotoniphone\n\n\n\n<center>13.清晨的窗外</center>\n\n![](https://img.carlwe.com/IMG_0944.jpg)\n\n> 早上醒来拉开窗帘，发现上图窗外风景，急忙拿起手机，打开窗户，伸出窗外，开启全景模式，一点儿也不觉得窗外零下10多度会有多冷，shotoniphone\n\n\n\n<center>14.小区夕阳</center>\n\n![](https://img.carlwe.com/IMG_3814.jpg)\n\n> 太阳落下后，远处的火烧云层次分明，连50公里外的西山也清晰可见，繁忙的马路上人们各自忙着，70D拍摄。\n\n\n\n<center>15.红蜻蜓</center>\n\n![](https://img.carlwe.com/IMG_3852.jpg)\n\n> 拍摄于北京古塔公园的池塘边，70D 300mm长焦虚化。\n\n\n\n<center>16.水仙花</center>\n\n![](https://img.carlwe.com/IMG_1039.jpg)\n\n> 上班前发现姐姐拿来的水仙花正好盛开，在窗外冬日暖阳的照射下显得格外鲜艳，shotoniphone\n\n\n\n<center>17.满天星</center>\n\n![](https://img.carlwe.com/IMG_1231.jpg)\n\n> 腊月二十八，上街买朵花。\n>\n> iPhone 开启闪光灯模式，满天星被闪光照射后，影子被映射到墙上，加上合适的距离和角度，看上去像是加了特效一般。照片为直出效果，shotoniphone\n\n\n\n<center>18.洱海日出</center>\n\n![](https://img.carlwe.com/IMG_1970.jpg)\n\n> 这张照片是在拍日出延时的时候捕获的，太阳刚刚从洱海对面的山丘上升起，漏出一点点星芒，这也许是日出最美的时刻，70D拍摄。\n\n\n\n<center>19.栈桥公园</center>\n\n![](https://img.carlwe.com/qingdao.jpg)\n\n> 青岛栈桥公园边，太阳刚落下，潮水开始退去，岸边的碎石便露了出来，显现出夕阳余晖的砖红色，70D拍摄。","source":"_posts/我有20张照片想和你分享.md","raw":"---\ntitle: 我有20张照片想和你分享\ndate: 2019-02-03 21:20:31\ntags: 摄影\n---\n\n![](https://img.carlwe.com/jimu_logo.jpg-h)\n\n<!--more-->\n\n{% meting \"29567187\" \"netease\" \"song\" %}\n\n##  \n\n今天除夕，我从今年拍摄的一万多张照片中精选了20张图片分享给大家，可点击查看大图，图片排名不分先后。如果喜欢，欢迎在下方评论区留言，说出你觉得好看的照片～\n\n\n\n##  \n\n<center>1.蜿蜒长城</center>\n\n![](https://img.carlwe.com/IMG_1236.jpg)\n\n> 拍摄于去年春节之后，带着大姐去爬长城，那天的天空和照片中的一样蓝。喜欢长城的起伏蜿蜒和磅礴的气势，70D拍摄。\n\n\n\n<center>2.昆明湖</center>\n\n![](https://img.carlwe.com/IMG_1425.jpg)\n\n> 这张照片同样是拍摄于去年春节期间，烈日下的昆明湖面与远处的佛香阁交相辉映，70D拍摄。\n\n\n\n<center>3.大空山</center>\n\n![](https://img.carlwe.com/dakongshan.jpg)\n\n> 大空山位于云南腾冲县境内，5A级景区，喷发于90万年以前，海拔2072米，附近大小火山100多座，可乘坐热气球观光，风景优美，70D拍摄。\n\n\n\n<center>4.柱状节理</center>\n\n![](https://img.carlwe.com/jieli.jpg)\n\n>腾冲黑鱼河柱状节理，当地人称为“神柱”，火山岩冷却时形成，是我国迄今为止发现的一片规模最大、保存完整、年代最短的柱状节理，大约形成于4万年前，70D拍摄。\n\n\n\n<center>5.观音殿</center>\n\n![](https://img.carlwe.com/IMG_2184.jpg)\n\n> 该观音殿位于大理三塔寺内，70D、10mm广角拍摄。\n\n\n\n<center>6.日照苍山</center>\n\n![](https://img.carlwe.com/IMG_20180319_073536_HDR.jpg)\n\n> 清晨7点35分，在洱海边太阳还未升起，太阳的余晖映射到苍山上，呈现出的金色格外好看。小米6拍摄，LR调色。\n\n\n\n<center>7.苍山与洱海</center>\n\n![](https://img.carlwe.com/IMG_20180328_221958.jpg)\n\n> 三月，带着三脚架和相机爬上近4000米的苍山顶，雪还未融化，雨后的白云触手可及，山下的洱海碧波万顷，70D拍摄。\n\n\n\n<center>8.十渡</center>\n\n![](https://img.carlwe.com/IMG_4134.jpg)\n\n>十渡拒马河景区， 对面“蝙蝠山”犹如一只振翅欲飞的蝙蝠，造型生动、形象逼真，感叹大自然的鬼斧神工，70D拍摄。\n\n\n\n<center>9.午后的森林公园</center>\n\n![](https://img.carlwe.com/IMG_0234.jpg)\n\n> 大运河森林公园中的一景，shotoniphone\n\n\n\n<center>10.归雁</center>\n\n![](https://img.carlwe.com/IMG_3726.jpg)\n\n> 同样在大运河森林公园中，偶遇大雁排成人字，70D拍摄。\n\n\n\n<center>11.飞机</center>\n\n![](https://img.carlwe.com/IMG_0535.jpg)\n\n> 回家路上随手拍，尝试了一下iPhone的2x变焦功能。\n\n\n\n<center>12.小区晴天</center>\n\n![](https://img.carlwe.com/IMG_0477.jpg)\n\n> 上班路上小区随手拍，喜欢这种简单的照片，无后期，shotoniphone\n\n\n\n<center>13.清晨的窗外</center>\n\n![](https://img.carlwe.com/IMG_0944.jpg)\n\n> 早上醒来拉开窗帘，发现上图窗外风景，急忙拿起手机，打开窗户，伸出窗外，开启全景模式，一点儿也不觉得窗外零下10多度会有多冷，shotoniphone\n\n\n\n<center>14.小区夕阳</center>\n\n![](https://img.carlwe.com/IMG_3814.jpg)\n\n> 太阳落下后，远处的火烧云层次分明，连50公里外的西山也清晰可见，繁忙的马路上人们各自忙着，70D拍摄。\n\n\n\n<center>15.红蜻蜓</center>\n\n![](https://img.carlwe.com/IMG_3852.jpg)\n\n> 拍摄于北京古塔公园的池塘边，70D 300mm长焦虚化。\n\n\n\n<center>16.水仙花</center>\n\n![](https://img.carlwe.com/IMG_1039.jpg)\n\n> 上班前发现姐姐拿来的水仙花正好盛开，在窗外冬日暖阳的照射下显得格外鲜艳，shotoniphone\n\n\n\n<center>17.满天星</center>\n\n![](https://img.carlwe.com/IMG_1231.jpg)\n\n> 腊月二十八，上街买朵花。\n>\n> iPhone 开启闪光灯模式，满天星被闪光照射后，影子被映射到墙上，加上合适的距离和角度，看上去像是加了特效一般。照片为直出效果，shotoniphone\n\n\n\n<center>18.洱海日出</center>\n\n![](https://img.carlwe.com/IMG_1970.jpg)\n\n> 这张照片是在拍日出延时的时候捕获的，太阳刚刚从洱海对面的山丘上升起，漏出一点点星芒，这也许是日出最美的时刻，70D拍摄。\n\n\n\n<center>19.栈桥公园</center>\n\n![](https://img.carlwe.com/qingdao.jpg)\n\n> 青岛栈桥公园边，太阳刚落下，潮水开始退去，岸边的碎石便露了出来，显现出夕阳余晖的砖红色，70D拍摄。","slug":"我有20张照片想和你分享","published":1,"updated":"2020-08-18T02:25:58.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnpb000xt57s5ugwwusy","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/jimu_logo.jpg-h\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n    <div id=\"aplayer-nMNRzSHl\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"29567187\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"></div>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h2><p>今天除夕，我从今年拍摄的一万多张照片中精选了20张图片分享给大家，可点击查看大图，图片排名不分先后。如果喜欢，欢迎在下方评论区留言，说出你觉得好看的照片～</p>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\" \"></a> </h2><center>1.蜿蜒长城</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_1236.jpg\" alt=\"\"></p>\n<blockquote>\n<p>拍摄于去年春节之后，带着大姐去爬长城，那天的天空和照片中的一样蓝。喜欢长城的起伏蜿蜒和磅礴的气势，70D拍摄。</p>\n</blockquote>\n<center>2.昆明湖</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_1425.jpg\" alt=\"\"></p>\n<blockquote>\n<p>这张照片同样是拍摄于去年春节期间，烈日下的昆明湖面与远处的佛香阁交相辉映，70D拍摄。</p>\n</blockquote>\n<center>3.大空山</center>\n\n<p><img src=\"https://img.carlwe.com/dakongshan.jpg\" alt=\"\"></p>\n<blockquote>\n<p>大空山位于云南腾冲县境内，5A级景区，喷发于90万年以前，海拔2072米，附近大小火山100多座，可乘坐热气球观光，风景优美，70D拍摄。</p>\n</blockquote>\n<center>4.柱状节理</center>\n\n<p><img src=\"https://img.carlwe.com/jieli.jpg\" alt=\"\"></p>\n<blockquote>\n<p>腾冲黑鱼河柱状节理，当地人称为“神柱”，火山岩冷却时形成，是我国迄今为止发现的一片规模最大、保存完整、年代最短的柱状节理，大约形成于4万年前，70D拍摄。</p>\n</blockquote>\n<center>5.观音殿</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_2184.jpg\" alt=\"\"></p>\n<blockquote>\n<p>该观音殿位于大理三塔寺内，70D、10mm广角拍摄。</p>\n</blockquote>\n<center>6.日照苍山</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_20180319_073536_HDR.jpg\" alt=\"\"></p>\n<blockquote>\n<p>清晨7点35分，在洱海边太阳还未升起，太阳的余晖映射到苍山上，呈现出的金色格外好看。小米6拍摄，LR调色。</p>\n</blockquote>\n<center>7.苍山与洱海</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_20180328_221958.jpg\" alt=\"\"></p>\n<blockquote>\n<p>三月，带着三脚架和相机爬上近4000米的苍山顶，雪还未融化，雨后的白云触手可及，山下的洱海碧波万顷，70D拍摄。</p>\n</blockquote>\n<center>8.十渡</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_4134.jpg\" alt=\"\"></p>\n<blockquote>\n<p>十渡拒马河景区， 对面“蝙蝠山”犹如一只振翅欲飞的蝙蝠，造型生动、形象逼真，感叹大自然的鬼斧神工，70D拍摄。</p>\n</blockquote>\n<center>9.午后的森林公园</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_0234.jpg\" alt=\"\"></p>\n<blockquote>\n<p>大运河森林公园中的一景，shotoniphone</p>\n</blockquote>\n<center>10.归雁</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_3726.jpg\" alt=\"\"></p>\n<blockquote>\n<p>同样在大运河森林公园中，偶遇大雁排成人字，70D拍摄。</p>\n</blockquote>\n<center>11.飞机</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_0535.jpg\" alt=\"\"></p>\n<blockquote>\n<p>回家路上随手拍，尝试了一下iPhone的2x变焦功能。</p>\n</blockquote>\n<center>12.小区晴天</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_0477.jpg\" alt=\"\"></p>\n<blockquote>\n<p>上班路上小区随手拍，喜欢这种简单的照片，无后期，shotoniphone</p>\n</blockquote>\n<center>13.清晨的窗外</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_0944.jpg\" alt=\"\"></p>\n<blockquote>\n<p>早上醒来拉开窗帘，发现上图窗外风景，急忙拿起手机，打开窗户，伸出窗外，开启全景模式，一点儿也不觉得窗外零下10多度会有多冷，shotoniphone</p>\n</blockquote>\n<center>14.小区夕阳</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_3814.jpg\" alt=\"\"></p>\n<blockquote>\n<p>太阳落下后，远处的火烧云层次分明，连50公里外的西山也清晰可见，繁忙的马路上人们各自忙着，70D拍摄。</p>\n</blockquote>\n<center>15.红蜻蜓</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_3852.jpg\" alt=\"\"></p>\n<blockquote>\n<p>拍摄于北京古塔公园的池塘边，70D 300mm长焦虚化。</p>\n</blockquote>\n<center>16.水仙花</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_1039.jpg\" alt=\"\"></p>\n<blockquote>\n<p>上班前发现姐姐拿来的水仙花正好盛开，在窗外冬日暖阳的照射下显得格外鲜艳，shotoniphone</p>\n</blockquote>\n<center>17.满天星</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_1231.jpg\" alt=\"\"></p>\n<blockquote>\n<p>腊月二十八，上街买朵花。</p>\n<p>iPhone 开启闪光灯模式，满天星被闪光照射后，影子被映射到墙上，加上合适的距离和角度，看上去像是加了特效一般。照片为直出效果，shotoniphone</p>\n</blockquote>\n<center>18.洱海日出</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_1970.jpg\" alt=\"\"></p>\n<blockquote>\n<p>这张照片是在拍日出延时的时候捕获的，太阳刚刚从洱海对面的山丘上升起，漏出一点点星芒，这也许是日出最美的时刻，70D拍摄。</p>\n</blockquote>\n<center>19.栈桥公园</center>\n\n<p><img src=\"https://img.carlwe.com/qingdao.jpg\" alt=\"\"></p>\n<blockquote>\n<p>青岛栈桥公园边，太阳刚落下，潮水开始退去，岸边的碎石便露了出来，显现出夕阳余晖的砖红色，70D拍摄。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/jimu_logo.jpg-h\" alt=\"\"></p>","more":"<div id=\"aplayer-nMNRzSHl\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"29567187\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"></div>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h2><p>今天除夕，我从今年拍摄的一万多张照片中精选了20张图片分享给大家，可点击查看大图，图片排名不分先后。如果喜欢，欢迎在下方评论区留言，说出你觉得好看的照片～</p>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\" \"></a> </h2><center>1.蜿蜒长城</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_1236.jpg\" alt=\"\"></p>\n<blockquote>\n<p>拍摄于去年春节之后，带着大姐去爬长城，那天的天空和照片中的一样蓝。喜欢长城的起伏蜿蜒和磅礴的气势，70D拍摄。</p>\n</blockquote>\n<center>2.昆明湖</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_1425.jpg\" alt=\"\"></p>\n<blockquote>\n<p>这张照片同样是拍摄于去年春节期间，烈日下的昆明湖面与远处的佛香阁交相辉映，70D拍摄。</p>\n</blockquote>\n<center>3.大空山</center>\n\n<p><img src=\"https://img.carlwe.com/dakongshan.jpg\" alt=\"\"></p>\n<blockquote>\n<p>大空山位于云南腾冲县境内，5A级景区，喷发于90万年以前，海拔2072米，附近大小火山100多座，可乘坐热气球观光，风景优美，70D拍摄。</p>\n</blockquote>\n<center>4.柱状节理</center>\n\n<p><img src=\"https://img.carlwe.com/jieli.jpg\" alt=\"\"></p>\n<blockquote>\n<p>腾冲黑鱼河柱状节理，当地人称为“神柱”，火山岩冷却时形成，是我国迄今为止发现的一片规模最大、保存完整、年代最短的柱状节理，大约形成于4万年前，70D拍摄。</p>\n</blockquote>\n<center>5.观音殿</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_2184.jpg\" alt=\"\"></p>\n<blockquote>\n<p>该观音殿位于大理三塔寺内，70D、10mm广角拍摄。</p>\n</blockquote>\n<center>6.日照苍山</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_20180319_073536_HDR.jpg\" alt=\"\"></p>\n<blockquote>\n<p>清晨7点35分，在洱海边太阳还未升起，太阳的余晖映射到苍山上，呈现出的金色格外好看。小米6拍摄，LR调色。</p>\n</blockquote>\n<center>7.苍山与洱海</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_20180328_221958.jpg\" alt=\"\"></p>\n<blockquote>\n<p>三月，带着三脚架和相机爬上近4000米的苍山顶，雪还未融化，雨后的白云触手可及，山下的洱海碧波万顷，70D拍摄。</p>\n</blockquote>\n<center>8.十渡</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_4134.jpg\" alt=\"\"></p>\n<blockquote>\n<p>十渡拒马河景区， 对面“蝙蝠山”犹如一只振翅欲飞的蝙蝠，造型生动、形象逼真，感叹大自然的鬼斧神工，70D拍摄。</p>\n</blockquote>\n<center>9.午后的森林公园</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_0234.jpg\" alt=\"\"></p>\n<blockquote>\n<p>大运河森林公园中的一景，shotoniphone</p>\n</blockquote>\n<center>10.归雁</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_3726.jpg\" alt=\"\"></p>\n<blockquote>\n<p>同样在大运河森林公园中，偶遇大雁排成人字，70D拍摄。</p>\n</blockquote>\n<center>11.飞机</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_0535.jpg\" alt=\"\"></p>\n<blockquote>\n<p>回家路上随手拍，尝试了一下iPhone的2x变焦功能。</p>\n</blockquote>\n<center>12.小区晴天</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_0477.jpg\" alt=\"\"></p>\n<blockquote>\n<p>上班路上小区随手拍，喜欢这种简单的照片，无后期，shotoniphone</p>\n</blockquote>\n<center>13.清晨的窗外</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_0944.jpg\" alt=\"\"></p>\n<blockquote>\n<p>早上醒来拉开窗帘，发现上图窗外风景，急忙拿起手机，打开窗户，伸出窗外，开启全景模式，一点儿也不觉得窗外零下10多度会有多冷，shotoniphone</p>\n</blockquote>\n<center>14.小区夕阳</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_3814.jpg\" alt=\"\"></p>\n<blockquote>\n<p>太阳落下后，远处的火烧云层次分明，连50公里外的西山也清晰可见，繁忙的马路上人们各自忙着，70D拍摄。</p>\n</blockquote>\n<center>15.红蜻蜓</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_3852.jpg\" alt=\"\"></p>\n<blockquote>\n<p>拍摄于北京古塔公园的池塘边，70D 300mm长焦虚化。</p>\n</blockquote>\n<center>16.水仙花</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_1039.jpg\" alt=\"\"></p>\n<blockquote>\n<p>上班前发现姐姐拿来的水仙花正好盛开，在窗外冬日暖阳的照射下显得格外鲜艳，shotoniphone</p>\n</blockquote>\n<center>17.满天星</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_1231.jpg\" alt=\"\"></p>\n<blockquote>\n<p>腊月二十八，上街买朵花。</p>\n<p>iPhone 开启闪光灯模式，满天星被闪光照射后，影子被映射到墙上，加上合适的距离和角度，看上去像是加了特效一般。照片为直出效果，shotoniphone</p>\n</blockquote>\n<center>18.洱海日出</center>\n\n<p><img src=\"https://img.carlwe.com/IMG_1970.jpg\" alt=\"\"></p>\n<blockquote>\n<p>这张照片是在拍日出延时的时候捕获的，太阳刚刚从洱海对面的山丘上升起，漏出一点点星芒，这也许是日出最美的时刻，70D拍摄。</p>\n</blockquote>\n<center>19.栈桥公园</center>\n\n<p><img src=\"https://img.carlwe.com/qingdao.jpg\" alt=\"\"></p>\n<blockquote>\n<p>青岛栈桥公园边，太阳刚落下，潮水开始退去，岸边的碎石便露了出来，显现出夕阳余晖的砖红色，70D拍摄。</p>\n</blockquote>"},{"title":"我记忆中的武汉","date":"2020-01-27T11:37:47.000Z","_content":"\n我记忆中的武汉是个很美的地方，从上大学到毕业工作，在武汉生活算下来有6年多的时间，去过武汉的大部分地方，都有深刻的印象。然而2020这个年对于我们每个人来说都是特殊的，武汉正经历着肺炎的侵袭，大家都说这座城市“得病了”，太多的人因为肺炎而改变了生活，希望肺炎快快结束，大家都能平平安安，健健康康，社会秩序尽快恢复。等疫情结束，请你吃热干面，看樱花开 🌸🌸🌸，武汉加油💪\n\n<!--more-->\n\n下面是之前在武汉的时候留下的一些照片：\n\n<center>樱花</center>\n![](https://img.carlwe.com/wh_9569.jpg)\n\n![](https://img.carlwe.com/wh_9308.jpg)\n\n![](https://img.carlwe.com/wh_9364.jpg)\n\n![](https://img.carlwe.com/wh_9432.jpg)\n\n> 武汉的樱花，除了武汉大学的，东湖樱花园的也很好看。每到樱花盛开时，遍是整个武汉的节日。\n\n\n\n<center>东湖</center>\n![](https://img.carlwe.com/wh_1199.jpg)\n\n![](https://img.carlwe.com/wh_senlin_donghu.jpg)\n\n![](https://img.carlwe.com/wh_senlingongyuan.jpg)\n\n![](https://img.carlwe.com/IMG_9640.jpg)\n\n> 东湖很大，最近几年新修了绿道，还有磨山风景区，环境越来越好了。\n\n\n\n<center>木兰天池</center>\n![](https://img.carlwe.com/wh_mulantianchi.jpg)\n\n> 从这里爬上去之后就是木兰天池了，值得一去。\n\n\n\n<center>长江</center>\n![](https://img.carlwe.com/wh_cj_bridge.jpg)\n\n> 长江大桥很适合走一走，然后去到对面的晴川阁。\n\n\n\n<center>晴川阁</center>\n![](https://img.carlwe.com/wh_changjiang_river.jpg)\n\n![](https://img.carlwe.com/wh_qingchuange.jpg)\n\n> 从晴川阁眺望对面的武昌，阁楼上的铃铛还在摇曳。\n\n\n\n<center>黄鹤楼</center>\n![](https://img.carlwe.com/wh_huanghelou.jpg)\n\n> 每次经过黄鹤楼，然而我一次也没有进去看过。黄鹤楼在历史上被烧过，现在重建的黄鹤楼已经不属于文物古迹。\n\n\n\n<center>长江邮轮</center>\n![](https://img.carlwe.com/IMG_9641.jpg)\n\n> 从户部巷吃完热干面，当然要出来坐一坐邮轮，然后慢慢看着河岸远去，不一会儿就会看到对面汉江与长江交汇处的泾渭分明，你已经不知不觉的到达晴川桥旁，汉正街下。\n\n\n\n<center>武昌起义纪念馆</center>\n![](https://img.carlwe.com/wh_wcqy.jpg)\n\n> 新修的武昌起义纪念馆，犹如一只展翅的大雁等待着起飞。同时也更推荐去去湖北省博物馆，哪里有著名的曾侯乙编钟。\n\n\n\n<center>昙华林</center>\n![](https://img.carlwe.com/wh_tanhualin.jpg)\n\n> 武汉哪里最适合情侣约会？对一定要去昙华林。\n\n\n\n<center>光谷步行街</center>\n![](https://img.carlwe.com/wh_3216.jpg)\n\n> 我对光谷步行街深刻的记忆莫过于这里。虽然后面还修建了更好玩的西班牙风情街、德国风情街以及莫多大教堂。\n\n\n\n<center>汉街</center>\n![](https://img.carlwe.com/wh_hanjie_bridge.jpg)\n\n![](https://img.carlwe.com/wh_hanjiedeng.jpg)\n\n![](https://img.carlwe.com/wh_hanjie.jpg)\n\n![](https://img.carlwe.com/wh_hanxiu.jpg)\n\n![](https://img.carlwe.com/wh_shahu.jpg)\n\n> 汉街是一个很美的地方，每当夜幕降临，这里的灯光便会亮起。可以坐着游船游览一圈，四周的美景尽收眼底。\n\n\n\n<center>武汉地铁</center>\n![](https://img.carlwe.com/wh_3207.jpg)\n\n> 武汉在高速发展，地铁总里程已经位居全国第五，仅次于深圳。而且武汉的地铁站都各具特色，很多地铁站都真的很漂亮！\n\n\n\n<center>我的学校</center>\n![](https://img.carlwe.com/wh_ershi.jpg)\n\n> 学校对于我来说当然是感情最深的地方。武汉的高校众多。教育资源雄厚。\n\n\n\n<center>武汉日落</center>\n![](https://img.carlwe.com/wh_0806.jpg)\n\n![](https://img.carlwe.com/wh_near_changjiang.jpg)\n\n![](https://img.carlwe.com/wh_changjiang_sunset.jpg)\n\n![](https://img.carlwe.com/wh_guangguyilu.jpg)\n\n![](https://img.carlwe.com/wh_tcmy.jpg)\n\n![](https://img.carlwe.com/wh_wdkjy.jpg)\n\n![](https://img.carlwe.com/wh_5266.jpg)\n\n![](https://img.carlwe.com/wh_sw_sunset.jpg)\n\n![](https://img.carlwe.com/wh_baiyun_yueliang.jpg)\n\n\n\n相信彩虹总在风雨后！\n\n![](https://img.carlwe.com/wh_caihong.jpg)\n\n\n\n# 武汉加油💪💪💪！！！\n\n","source":"_posts/我记忆中的武汉.md","raw":"---\ntitle: 我记忆中的武汉\ndate: 2020-01-27 19:37:47\ntags: 摄影\n---\n\n我记忆中的武汉是个很美的地方，从上大学到毕业工作，在武汉生活算下来有6年多的时间，去过武汉的大部分地方，都有深刻的印象。然而2020这个年对于我们每个人来说都是特殊的，武汉正经历着肺炎的侵袭，大家都说这座城市“得病了”，太多的人因为肺炎而改变了生活，希望肺炎快快结束，大家都能平平安安，健健康康，社会秩序尽快恢复。等疫情结束，请你吃热干面，看樱花开 🌸🌸🌸，武汉加油💪\n\n<!--more-->\n\n下面是之前在武汉的时候留下的一些照片：\n\n<center>樱花</center>\n![](https://img.carlwe.com/wh_9569.jpg)\n\n![](https://img.carlwe.com/wh_9308.jpg)\n\n![](https://img.carlwe.com/wh_9364.jpg)\n\n![](https://img.carlwe.com/wh_9432.jpg)\n\n> 武汉的樱花，除了武汉大学的，东湖樱花园的也很好看。每到樱花盛开时，遍是整个武汉的节日。\n\n\n\n<center>东湖</center>\n![](https://img.carlwe.com/wh_1199.jpg)\n\n![](https://img.carlwe.com/wh_senlin_donghu.jpg)\n\n![](https://img.carlwe.com/wh_senlingongyuan.jpg)\n\n![](https://img.carlwe.com/IMG_9640.jpg)\n\n> 东湖很大，最近几年新修了绿道，还有磨山风景区，环境越来越好了。\n\n\n\n<center>木兰天池</center>\n![](https://img.carlwe.com/wh_mulantianchi.jpg)\n\n> 从这里爬上去之后就是木兰天池了，值得一去。\n\n\n\n<center>长江</center>\n![](https://img.carlwe.com/wh_cj_bridge.jpg)\n\n> 长江大桥很适合走一走，然后去到对面的晴川阁。\n\n\n\n<center>晴川阁</center>\n![](https://img.carlwe.com/wh_changjiang_river.jpg)\n\n![](https://img.carlwe.com/wh_qingchuange.jpg)\n\n> 从晴川阁眺望对面的武昌，阁楼上的铃铛还在摇曳。\n\n\n\n<center>黄鹤楼</center>\n![](https://img.carlwe.com/wh_huanghelou.jpg)\n\n> 每次经过黄鹤楼，然而我一次也没有进去看过。黄鹤楼在历史上被烧过，现在重建的黄鹤楼已经不属于文物古迹。\n\n\n\n<center>长江邮轮</center>\n![](https://img.carlwe.com/IMG_9641.jpg)\n\n> 从户部巷吃完热干面，当然要出来坐一坐邮轮，然后慢慢看着河岸远去，不一会儿就会看到对面汉江与长江交汇处的泾渭分明，你已经不知不觉的到达晴川桥旁，汉正街下。\n\n\n\n<center>武昌起义纪念馆</center>\n![](https://img.carlwe.com/wh_wcqy.jpg)\n\n> 新修的武昌起义纪念馆，犹如一只展翅的大雁等待着起飞。同时也更推荐去去湖北省博物馆，哪里有著名的曾侯乙编钟。\n\n\n\n<center>昙华林</center>\n![](https://img.carlwe.com/wh_tanhualin.jpg)\n\n> 武汉哪里最适合情侣约会？对一定要去昙华林。\n\n\n\n<center>光谷步行街</center>\n![](https://img.carlwe.com/wh_3216.jpg)\n\n> 我对光谷步行街深刻的记忆莫过于这里。虽然后面还修建了更好玩的西班牙风情街、德国风情街以及莫多大教堂。\n\n\n\n<center>汉街</center>\n![](https://img.carlwe.com/wh_hanjie_bridge.jpg)\n\n![](https://img.carlwe.com/wh_hanjiedeng.jpg)\n\n![](https://img.carlwe.com/wh_hanjie.jpg)\n\n![](https://img.carlwe.com/wh_hanxiu.jpg)\n\n![](https://img.carlwe.com/wh_shahu.jpg)\n\n> 汉街是一个很美的地方，每当夜幕降临，这里的灯光便会亮起。可以坐着游船游览一圈，四周的美景尽收眼底。\n\n\n\n<center>武汉地铁</center>\n![](https://img.carlwe.com/wh_3207.jpg)\n\n> 武汉在高速发展，地铁总里程已经位居全国第五，仅次于深圳。而且武汉的地铁站都各具特色，很多地铁站都真的很漂亮！\n\n\n\n<center>我的学校</center>\n![](https://img.carlwe.com/wh_ershi.jpg)\n\n> 学校对于我来说当然是感情最深的地方。武汉的高校众多。教育资源雄厚。\n\n\n\n<center>武汉日落</center>\n![](https://img.carlwe.com/wh_0806.jpg)\n\n![](https://img.carlwe.com/wh_near_changjiang.jpg)\n\n![](https://img.carlwe.com/wh_changjiang_sunset.jpg)\n\n![](https://img.carlwe.com/wh_guangguyilu.jpg)\n\n![](https://img.carlwe.com/wh_tcmy.jpg)\n\n![](https://img.carlwe.com/wh_wdkjy.jpg)\n\n![](https://img.carlwe.com/wh_5266.jpg)\n\n![](https://img.carlwe.com/wh_sw_sunset.jpg)\n\n![](https://img.carlwe.com/wh_baiyun_yueliang.jpg)\n\n\n\n相信彩虹总在风雨后！\n\n![](https://img.carlwe.com/wh_caihong.jpg)\n\n\n\n# 武汉加油💪💪💪！！！\n\n","slug":"我记忆中的武汉","published":1,"updated":"2020-08-18T02:25:58.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnpc000zt57sixn16hep","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>我记忆中的武汉是个很美的地方，从上大学到毕业工作，在武汉生活算下来有6年多的时间，去过武汉的大部分地方，都有深刻的印象。然而2020这个年对于我们每个人来说都是特殊的，武汉正经历着肺炎的侵袭，大家都说这座城市“得病了”，太多的人因为肺炎而改变了生活，希望肺炎快快结束，大家都能平平安安，健健康康，社会秩序尽快恢复。等疫情结束，请你吃热干面，看樱花开 🌸🌸🌸，武汉加油💪</p>\n<a id=\"more\"></a>\n<p>下面是之前在武汉的时候留下的一些照片：</p>\n<p><center>樱花</center><br><img src=\"https://img.carlwe.com/wh_9569.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_9308.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_9364.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_9432.jpg\" alt=\"\"></p>\n<blockquote>\n<p>武汉的樱花，除了武汉大学的，东湖樱花园的也很好看。每到樱花盛开时，遍是整个武汉的节日。</p>\n</blockquote>\n<p><center>东湖</center><br><img src=\"https://img.carlwe.com/wh_1199.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_senlin_donghu.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_senlingongyuan.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/IMG_9640.jpg\" alt=\"\"></p>\n<blockquote>\n<p>东湖很大，最近几年新修了绿道，还有磨山风景区，环境越来越好了。</p>\n</blockquote>\n<p><center>木兰天池</center><br><img src=\"https://img.carlwe.com/wh_mulantianchi.jpg\" alt=\"\"></p>\n<blockquote>\n<p>从这里爬上去之后就是木兰天池了，值得一去。</p>\n</blockquote>\n<p><center>长江</center><br><img src=\"https://img.carlwe.com/wh_cj_bridge.jpg\" alt=\"\"></p>\n<blockquote>\n<p>长江大桥很适合走一走，然后去到对面的晴川阁。</p>\n</blockquote>\n<p><center>晴川阁</center><br><img src=\"https://img.carlwe.com/wh_changjiang_river.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_qingchuange.jpg\" alt=\"\"></p>\n<blockquote>\n<p>从晴川阁眺望对面的武昌，阁楼上的铃铛还在摇曳。</p>\n</blockquote>\n<p><center>黄鹤楼</center><br><img src=\"https://img.carlwe.com/wh_huanghelou.jpg\" alt=\"\"></p>\n<blockquote>\n<p>每次经过黄鹤楼，然而我一次也没有进去看过。黄鹤楼在历史上被烧过，现在重建的黄鹤楼已经不属于文物古迹。</p>\n</blockquote>\n<p><center>长江邮轮</center><br><img src=\"https://img.carlwe.com/IMG_9641.jpg\" alt=\"\"></p>\n<blockquote>\n<p>从户部巷吃完热干面，当然要出来坐一坐邮轮，然后慢慢看着河岸远去，不一会儿就会看到对面汉江与长江交汇处的泾渭分明，你已经不知不觉的到达晴川桥旁，汉正街下。</p>\n</blockquote>\n<p><center>武昌起义纪念馆</center><br><img src=\"https://img.carlwe.com/wh_wcqy.jpg\" alt=\"\"></p>\n<blockquote>\n<p>新修的武昌起义纪念馆，犹如一只展翅的大雁等待着起飞。同时也更推荐去去湖北省博物馆，哪里有著名的曾侯乙编钟。</p>\n</blockquote>\n<p><center>昙华林</center><br><img src=\"https://img.carlwe.com/wh_tanhualin.jpg\" alt=\"\"></p>\n<blockquote>\n<p>武汉哪里最适合情侣约会？对一定要去昙华林。</p>\n</blockquote>\n<p><center>光谷步行街</center><br><img src=\"https://img.carlwe.com/wh_3216.jpg\" alt=\"\"></p>\n<blockquote>\n<p>我对光谷步行街深刻的记忆莫过于这里。虽然后面还修建了更好玩的西班牙风情街、德国风情街以及莫多大教堂。</p>\n</blockquote>\n<p><center>汉街</center><br><img src=\"https://img.carlwe.com/wh_hanjie_bridge.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_hanjiedeng.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_hanjie.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_hanxiu.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_shahu.jpg\" alt=\"\"></p>\n<blockquote>\n<p>汉街是一个很美的地方，每当夜幕降临，这里的灯光便会亮起。可以坐着游船游览一圈，四周的美景尽收眼底。</p>\n</blockquote>\n<p><center>武汉地铁</center><br><img src=\"https://img.carlwe.com/wh_3207.jpg\" alt=\"\"></p>\n<blockquote>\n<p>武汉在高速发展，地铁总里程已经位居全国第五，仅次于深圳。而且武汉的地铁站都各具特色，很多地铁站都真的很漂亮！</p>\n</blockquote>\n<p><center>我的学校</center><br><img src=\"https://img.carlwe.com/wh_ershi.jpg\" alt=\"\"></p>\n<blockquote>\n<p>学校对于我来说当然是感情最深的地方。武汉的高校众多。教育资源雄厚。</p>\n</blockquote>\n<p><center>武汉日落</center><br><img src=\"https://img.carlwe.com/wh_0806.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_near_changjiang.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_changjiang_sunset.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_guangguyilu.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_tcmy.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_wdkjy.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_5266.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_sw_sunset.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_baiyun_yueliang.jpg\" alt=\"\"></p>\n<p>相信彩虹总在风雨后！</p>\n<p><img src=\"https://img.carlwe.com/wh_caihong.jpg\" alt=\"\"></p>\n<h1 id=\"武汉加油💪💪💪！！！\"><a href=\"#武汉加油💪💪💪！！！\" class=\"headerlink\" title=\"武汉加油💪💪💪！！！\"></a>武汉加油💪💪💪！！！</h1>","site":{"data":{}},"excerpt":"<p>我记忆中的武汉是个很美的地方，从上大学到毕业工作，在武汉生活算下来有6年多的时间，去过武汉的大部分地方，都有深刻的印象。然而2020这个年对于我们每个人来说都是特殊的，武汉正经历着肺炎的侵袭，大家都说这座城市“得病了”，太多的人因为肺炎而改变了生活，希望肺炎快快结束，大家都能平平安安，健健康康，社会秩序尽快恢复。等疫情结束，请你吃热干面，看樱花开 🌸🌸🌸，武汉加油💪</p>","more":"<p>下面是之前在武汉的时候留下的一些照片：</p>\n<p><center>樱花</center><br><img src=\"https://img.carlwe.com/wh_9569.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_9308.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_9364.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_9432.jpg\" alt=\"\"></p>\n<blockquote>\n<p>武汉的樱花，除了武汉大学的，东湖樱花园的也很好看。每到樱花盛开时，遍是整个武汉的节日。</p>\n</blockquote>\n<p><center>东湖</center><br><img src=\"https://img.carlwe.com/wh_1199.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_senlin_donghu.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_senlingongyuan.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/IMG_9640.jpg\" alt=\"\"></p>\n<blockquote>\n<p>东湖很大，最近几年新修了绿道，还有磨山风景区，环境越来越好了。</p>\n</blockquote>\n<p><center>木兰天池</center><br><img src=\"https://img.carlwe.com/wh_mulantianchi.jpg\" alt=\"\"></p>\n<blockquote>\n<p>从这里爬上去之后就是木兰天池了，值得一去。</p>\n</blockquote>\n<p><center>长江</center><br><img src=\"https://img.carlwe.com/wh_cj_bridge.jpg\" alt=\"\"></p>\n<blockquote>\n<p>长江大桥很适合走一走，然后去到对面的晴川阁。</p>\n</blockquote>\n<p><center>晴川阁</center><br><img src=\"https://img.carlwe.com/wh_changjiang_river.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_qingchuange.jpg\" alt=\"\"></p>\n<blockquote>\n<p>从晴川阁眺望对面的武昌，阁楼上的铃铛还在摇曳。</p>\n</blockquote>\n<p><center>黄鹤楼</center><br><img src=\"https://img.carlwe.com/wh_huanghelou.jpg\" alt=\"\"></p>\n<blockquote>\n<p>每次经过黄鹤楼，然而我一次也没有进去看过。黄鹤楼在历史上被烧过，现在重建的黄鹤楼已经不属于文物古迹。</p>\n</blockquote>\n<p><center>长江邮轮</center><br><img src=\"https://img.carlwe.com/IMG_9641.jpg\" alt=\"\"></p>\n<blockquote>\n<p>从户部巷吃完热干面，当然要出来坐一坐邮轮，然后慢慢看着河岸远去，不一会儿就会看到对面汉江与长江交汇处的泾渭分明，你已经不知不觉的到达晴川桥旁，汉正街下。</p>\n</blockquote>\n<p><center>武昌起义纪念馆</center><br><img src=\"https://img.carlwe.com/wh_wcqy.jpg\" alt=\"\"></p>\n<blockquote>\n<p>新修的武昌起义纪念馆，犹如一只展翅的大雁等待着起飞。同时也更推荐去去湖北省博物馆，哪里有著名的曾侯乙编钟。</p>\n</blockquote>\n<p><center>昙华林</center><br><img src=\"https://img.carlwe.com/wh_tanhualin.jpg\" alt=\"\"></p>\n<blockquote>\n<p>武汉哪里最适合情侣约会？对一定要去昙华林。</p>\n</blockquote>\n<p><center>光谷步行街</center><br><img src=\"https://img.carlwe.com/wh_3216.jpg\" alt=\"\"></p>\n<blockquote>\n<p>我对光谷步行街深刻的记忆莫过于这里。虽然后面还修建了更好玩的西班牙风情街、德国风情街以及莫多大教堂。</p>\n</blockquote>\n<p><center>汉街</center><br><img src=\"https://img.carlwe.com/wh_hanjie_bridge.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_hanjiedeng.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_hanjie.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_hanxiu.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_shahu.jpg\" alt=\"\"></p>\n<blockquote>\n<p>汉街是一个很美的地方，每当夜幕降临，这里的灯光便会亮起。可以坐着游船游览一圈，四周的美景尽收眼底。</p>\n</blockquote>\n<p><center>武汉地铁</center><br><img src=\"https://img.carlwe.com/wh_3207.jpg\" alt=\"\"></p>\n<blockquote>\n<p>武汉在高速发展，地铁总里程已经位居全国第五，仅次于深圳。而且武汉的地铁站都各具特色，很多地铁站都真的很漂亮！</p>\n</blockquote>\n<p><center>我的学校</center><br><img src=\"https://img.carlwe.com/wh_ershi.jpg\" alt=\"\"></p>\n<blockquote>\n<p>学校对于我来说当然是感情最深的地方。武汉的高校众多。教育资源雄厚。</p>\n</blockquote>\n<p><center>武汉日落</center><br><img src=\"https://img.carlwe.com/wh_0806.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_near_changjiang.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_changjiang_sunset.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_guangguyilu.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_tcmy.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_wdkjy.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_5266.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_sw_sunset.jpg\" alt=\"\"></p>\n<p><img src=\"https://img.carlwe.com/wh_baiyun_yueliang.jpg\" alt=\"\"></p>\n<p>相信彩虹总在风雨后！</p>\n<p><img src=\"https://img.carlwe.com/wh_caihong.jpg\" alt=\"\"></p>\n<h1 id=\"武汉加油💪💪💪！！！\"><a href=\"#武汉加油💪💪💪！！！\" class=\"headerlink\" title=\"武汉加油💪💪💪！！！\"></a>武汉加油💪💪💪！！！</h1>"},{"title":"来聊聊我的新博客","date":"2018-12-05T04:25:13.000Z","_content":"## 为什么要写博客🤔\n\n![](https://img.carlwe.com/whyblog.png-h)\n\n时间很快来到了2018年的最后一个月，为什么说是新博客呢，因为之前搭建过一次博客，也写了几篇文章，还放了一些照片。<!--more-->但是总感觉写不下去，可能是因为沉淀的还不够多吧。不管怎样，写博客还是一个很好的习惯，可以记录生活的点滴，自己的想法和爱好，也是向大家展示自己很好的一种方式。坚持写博客能够让自己得到反思与成长，何乐而不为呢。\n\n### 那为什么要自建网站写博客呢\n\n其实很简单，不太喜欢其他博客类网站的风格，例如CSDN、简书或微信公众号之类的，自己建网站会比较自由一些，并不是追求写文章给多少人看，主要还是想**安静的记录自己想表达的东西**，才会显得与众不同吧。\n\n同时自建博客网站并没有那么复杂，利用Hexo快速搭建网站，选个主题nexT，配个评论系统Valine，找个Pages服务Coding或者GitHub，然后买个个性的域名，加上熟悉下MarkDown语法，基本上你就可以开始写博客，不需要任何编程基础，当然这次详细的建站过程我会在接下来的博客中介绍，这里就不过多说了。嗯，就因为自建博客也没那么复杂，并且自己还是懂一些技术的，所以我选择自建博客。\n\n## 我会写哪些东西\n\n其实最开始我也在问自己我的博客里面要写些什么东西呢，后来我想明白了，不应该**为了写博客而去写博客**，而是当觉得这个东西有意思，我一定要把它记录下来。所以在我的博客里写的文章应该都是自己感兴趣的、实践过的，并且会尽量写的通俗易懂，排版上段落清晰，这也是我给自己定的目标。所以博客暂定会写如下的内容：\n\n- 技术类\n\n>技术类的博客当然也会写自己了解的，可能目前最多的还是关于Android的技术博客。后面会介绍一些小程序、AI、算法之类的技术文章。\n\n- 科技类\n\n>科技类的博客会写一些数码产品的测评，最新的科技新闻之类的，当然一定会有我自己的看法。\n\n- 摄影类\n\n> 介绍一些我自己对于摄影的经历还有一些摄影技巧，包括单不限于手机摄影、单反摄影、vlog、后期制作等方面的文章，力争做到**你看了就会** 。\n\n- 天文类\n\n> 当然作为一个准业余的天文爱好者，从小学时候看的天文爱好者杂志到大学自己购买天文望远镜的一些经历，其实很多时候对于天文都有很高的热情，会分享一些自己的认知和想法，带大家一起了解浩瀚的宇宙。\n\n- 生活类\n\n>生活类的文章就比较杂了，会写一些自己近期遇到人或事，会写一些对生活中发生重要事件的议论文，会写一些出去玩的游记，自己的总结，总之这个很杂，但争取都还是有一点点意思吧。\n\n## 博客里面可以做什么\n\n这不废话吗！博客当然是用来看的，确实，但我还是希望看了之后你能够留下宝贵的评论，同时如果觉得有意思分享给你的朋友。\n\n* 关于评论\n\n>**就是它Valine**，为了评论的友好性，我找了很多博客的评论系统，我觉得都太复杂了，之前用过畅言，类似的都需要注册账号才能评论，后来无意中发现了Valine，这家伙竟然可以匿名评论，嗯，大大的减小的评论的门槛。那就是他了。\n>\n>**如何拥有评论头像**，你可以什么都不留，直接匿名写下你的评论，也可以留一个昵称，来区分你自己。当然你可以通过注册 [Gravatar](https://en.gravatar.com/) 填写邮箱然后上传一个头像，评论时留下邮箱和昵称，就会自动显示你的头像了。[Gravatar](https://en.gravatar.com/) 很多评论系统及网站都支持，所以可以注册一个留着以后用。\n>\n>**其他**，评论支持MarkDown，如果不知道如何使用请点击评论左下角的[M↓](https://segmentfault.com/markdown) 查看如何使用，同时支持Emoji表情和预览，我还特意去除了点击评论的验证码。那东西目前来说还是很讨厌的。\n\n* 关于分享\n\n> 本博客会支持分享，但目前还不支持，但相信马上就会支持。请给我一些时间～\n\n## 如何访问\n\n博客可以通过网址来访问 [carlwe.com](https://www.carlwe.com) \n\n- 为什么是 **CarlWe **\n\n> 虽然上学时候很多英语老师给我取了不同的英文名，但是第一个是Carl，所以印象最深刻，Carl在名字里是伟大的意思。比如有著名的卡尔·高斯、卡尔文还有卡尔·马克思。嗯，这个名字我很喜欢！😂😂😂\n\n最后请记住 👉🏻 **carlwe.com**\n\n\n\n","source":"_posts/来聊聊我的新博客.md","raw":"---\ntitle: 来聊聊我的新博客\ndate: 2018-12-05 12:25:13\ntags: 生活\n---\n## 为什么要写博客🤔\n\n![](https://img.carlwe.com/whyblog.png-h)\n\n时间很快来到了2018年的最后一个月，为什么说是新博客呢，因为之前搭建过一次博客，也写了几篇文章，还放了一些照片。<!--more-->但是总感觉写不下去，可能是因为沉淀的还不够多吧。不管怎样，写博客还是一个很好的习惯，可以记录生活的点滴，自己的想法和爱好，也是向大家展示自己很好的一种方式。坚持写博客能够让自己得到反思与成长，何乐而不为呢。\n\n### 那为什么要自建网站写博客呢\n\n其实很简单，不太喜欢其他博客类网站的风格，例如CSDN、简书或微信公众号之类的，自己建网站会比较自由一些，并不是追求写文章给多少人看，主要还是想**安静的记录自己想表达的东西**，才会显得与众不同吧。\n\n同时自建博客网站并没有那么复杂，利用Hexo快速搭建网站，选个主题nexT，配个评论系统Valine，找个Pages服务Coding或者GitHub，然后买个个性的域名，加上熟悉下MarkDown语法，基本上你就可以开始写博客，不需要任何编程基础，当然这次详细的建站过程我会在接下来的博客中介绍，这里就不过多说了。嗯，就因为自建博客也没那么复杂，并且自己还是懂一些技术的，所以我选择自建博客。\n\n## 我会写哪些东西\n\n其实最开始我也在问自己我的博客里面要写些什么东西呢，后来我想明白了，不应该**为了写博客而去写博客**，而是当觉得这个东西有意思，我一定要把它记录下来。所以在我的博客里写的文章应该都是自己感兴趣的、实践过的，并且会尽量写的通俗易懂，排版上段落清晰，这也是我给自己定的目标。所以博客暂定会写如下的内容：\n\n- 技术类\n\n>技术类的博客当然也会写自己了解的，可能目前最多的还是关于Android的技术博客。后面会介绍一些小程序、AI、算法之类的技术文章。\n\n- 科技类\n\n>科技类的博客会写一些数码产品的测评，最新的科技新闻之类的，当然一定会有我自己的看法。\n\n- 摄影类\n\n> 介绍一些我自己对于摄影的经历还有一些摄影技巧，包括单不限于手机摄影、单反摄影、vlog、后期制作等方面的文章，力争做到**你看了就会** 。\n\n- 天文类\n\n> 当然作为一个准业余的天文爱好者，从小学时候看的天文爱好者杂志到大学自己购买天文望远镜的一些经历，其实很多时候对于天文都有很高的热情，会分享一些自己的认知和想法，带大家一起了解浩瀚的宇宙。\n\n- 生活类\n\n>生活类的文章就比较杂了，会写一些自己近期遇到人或事，会写一些对生活中发生重要事件的议论文，会写一些出去玩的游记，自己的总结，总之这个很杂，但争取都还是有一点点意思吧。\n\n## 博客里面可以做什么\n\n这不废话吗！博客当然是用来看的，确实，但我还是希望看了之后你能够留下宝贵的评论，同时如果觉得有意思分享给你的朋友。\n\n* 关于评论\n\n>**就是它Valine**，为了评论的友好性，我找了很多博客的评论系统，我觉得都太复杂了，之前用过畅言，类似的都需要注册账号才能评论，后来无意中发现了Valine，这家伙竟然可以匿名评论，嗯，大大的减小的评论的门槛。那就是他了。\n>\n>**如何拥有评论头像**，你可以什么都不留，直接匿名写下你的评论，也可以留一个昵称，来区分你自己。当然你可以通过注册 [Gravatar](https://en.gravatar.com/) 填写邮箱然后上传一个头像，评论时留下邮箱和昵称，就会自动显示你的头像了。[Gravatar](https://en.gravatar.com/) 很多评论系统及网站都支持，所以可以注册一个留着以后用。\n>\n>**其他**，评论支持MarkDown，如果不知道如何使用请点击评论左下角的[M↓](https://segmentfault.com/markdown) 查看如何使用，同时支持Emoji表情和预览，我还特意去除了点击评论的验证码。那东西目前来说还是很讨厌的。\n\n* 关于分享\n\n> 本博客会支持分享，但目前还不支持，但相信马上就会支持。请给我一些时间～\n\n## 如何访问\n\n博客可以通过网址来访问 [carlwe.com](https://www.carlwe.com) \n\n- 为什么是 **CarlWe **\n\n> 虽然上学时候很多英语老师给我取了不同的英文名，但是第一个是Carl，所以印象最深刻，Carl在名字里是伟大的意思。比如有著名的卡尔·高斯、卡尔文还有卡尔·马克思。嗯，这个名字我很喜欢！😂😂😂\n\n最后请记住 👉🏻 **carlwe.com**\n\n\n\n","slug":"来聊聊我的新博客","published":1,"updated":"2020-08-18T02:25:58.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnpd0011t57s9zlbvx2e","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"为什么要写博客🤔\"><a href=\"#为什么要写博客🤔\" class=\"headerlink\" title=\"为什么要写博客🤔\"></a>为什么要写博客🤔</h2><p><img src=\"https://img.carlwe.com/whyblog.png-h\" alt=\"\"></p>\n<p>时间很快来到了2018年的最后一个月，为什么说是新博客呢，因为之前搭建过一次博客，也写了几篇文章，还放了一些照片。<a id=\"more\"></a>但是总感觉写不下去，可能是因为沉淀的还不够多吧。不管怎样，写博客还是一个很好的习惯，可以记录生活的点滴，自己的想法和爱好，也是向大家展示自己很好的一种方式。坚持写博客能够让自己得到反思与成长，何乐而不为呢。</p>\n<h3 id=\"那为什么要自建网站写博客呢\"><a href=\"#那为什么要自建网站写博客呢\" class=\"headerlink\" title=\"那为什么要自建网站写博客呢\"></a>那为什么要自建网站写博客呢</h3><p>其实很简单，不太喜欢其他博客类网站的风格，例如CSDN、简书或微信公众号之类的，自己建网站会比较自由一些，并不是追求写文章给多少人看，主要还是想<strong>安静的记录自己想表达的东西</strong>，才会显得与众不同吧。</p>\n<p>同时自建博客网站并没有那么复杂，利用Hexo快速搭建网站，选个主题nexT，配个评论系统Valine，找个Pages服务Coding或者GitHub，然后买个个性的域名，加上熟悉下MarkDown语法，基本上你就可以开始写博客，不需要任何编程基础，当然这次详细的建站过程我会在接下来的博客中介绍，这里就不过多说了。嗯，就因为自建博客也没那么复杂，并且自己还是懂一些技术的，所以我选择自建博客。</p>\n<h2 id=\"我会写哪些东西\"><a href=\"#我会写哪些东西\" class=\"headerlink\" title=\"我会写哪些东西\"></a>我会写哪些东西</h2><p>其实最开始我也在问自己我的博客里面要写些什么东西呢，后来我想明白了，不应该<strong>为了写博客而去写博客</strong>，而是当觉得这个东西有意思，我一定要把它记录下来。所以在我的博客里写的文章应该都是自己感兴趣的、实践过的，并且会尽量写的通俗易懂，排版上段落清晰，这也是我给自己定的目标。所以博客暂定会写如下的内容：</p>\n<ul>\n<li>技术类</li>\n</ul>\n<blockquote>\n<p>技术类的博客当然也会写自己了解的，可能目前最多的还是关于Android的技术博客。后面会介绍一些小程序、AI、算法之类的技术文章。</p>\n</blockquote>\n<ul>\n<li>科技类</li>\n</ul>\n<blockquote>\n<p>科技类的博客会写一些数码产品的测评，最新的科技新闻之类的，当然一定会有我自己的看法。</p>\n</blockquote>\n<ul>\n<li>摄影类</li>\n</ul>\n<blockquote>\n<p>介绍一些我自己对于摄影的经历还有一些摄影技巧，包括单不限于手机摄影、单反摄影、vlog、后期制作等方面的文章，力争做到<strong>你看了就会</strong> 。</p>\n</blockquote>\n<ul>\n<li>天文类</li>\n</ul>\n<blockquote>\n<p>当然作为一个准业余的天文爱好者，从小学时候看的天文爱好者杂志到大学自己购买天文望远镜的一些经历，其实很多时候对于天文都有很高的热情，会分享一些自己的认知和想法，带大家一起了解浩瀚的宇宙。</p>\n</blockquote>\n<ul>\n<li>生活类</li>\n</ul>\n<blockquote>\n<p>生活类的文章就比较杂了，会写一些自己近期遇到人或事，会写一些对生活中发生重要事件的议论文，会写一些出去玩的游记，自己的总结，总之这个很杂，但争取都还是有一点点意思吧。</p>\n</blockquote>\n<h2 id=\"博客里面可以做什么\"><a href=\"#博客里面可以做什么\" class=\"headerlink\" title=\"博客里面可以做什么\"></a>博客里面可以做什么</h2><p>这不废话吗！博客当然是用来看的，确实，但我还是希望看了之后你能够留下宝贵的评论，同时如果觉得有意思分享给你的朋友。</p>\n<ul>\n<li>关于评论</li>\n</ul>\n<blockquote>\n<p><strong>就是它Valine</strong>，为了评论的友好性，我找了很多博客的评论系统，我觉得都太复杂了，之前用过畅言，类似的都需要注册账号才能评论，后来无意中发现了Valine，这家伙竟然可以匿名评论，嗯，大大的减小的评论的门槛。那就是他了。</p>\n<p><strong>如何拥有评论头像</strong>，你可以什么都不留，直接匿名写下你的评论，也可以留一个昵称，来区分你自己。当然你可以通过注册 <a href=\"https://en.gravatar.com/\" target=\"_blank\" rel=\"noopener\">Gravatar</a> 填写邮箱然后上传一个头像，评论时留下邮箱和昵称，就会自动显示你的头像了。<a href=\"https://en.gravatar.com/\" target=\"_blank\" rel=\"noopener\">Gravatar</a> 很多评论系统及网站都支持，所以可以注册一个留着以后用。</p>\n<p><strong>其他</strong>，评论支持MarkDown，如果不知道如何使用请点击评论左下角的<a href=\"https://segmentfault.com/markdown\" target=\"_blank\" rel=\"noopener\">M↓</a> 查看如何使用，同时支持Emoji表情和预览，我还特意去除了点击评论的验证码。那东西目前来说还是很讨厌的。</p>\n</blockquote>\n<ul>\n<li>关于分享</li>\n</ul>\n<blockquote>\n<p>本博客会支持分享，但目前还不支持，但相信马上就会支持。请给我一些时间～</p>\n</blockquote>\n<h2 id=\"如何访问\"><a href=\"#如何访问\" class=\"headerlink\" title=\"如何访问\"></a>如何访问</h2><p>博客可以通过网址来访问 <a href=\"https://www.carlwe.com\" target=\"_blank\" rel=\"noopener\">carlwe.com</a> </p>\n<ul>\n<li>为什么是 <strong>CarlWe </strong></li>\n</ul>\n<blockquote>\n<p>虽然上学时候很多英语老师给我取了不同的英文名，但是第一个是Carl，所以印象最深刻，Carl在名字里是伟大的意思。比如有著名的卡尔·高斯、卡尔文还有卡尔·马克思。嗯，这个名字我很喜欢！😂😂😂</p>\n</blockquote>\n<p>最后请记住 👉🏻 <strong>carlwe.com</strong></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"为什么要写博客🤔\"><a href=\"#为什么要写博客🤔\" class=\"headerlink\" title=\"为什么要写博客🤔\"></a>为什么要写博客🤔</h2><p><img src=\"https://img.carlwe.com/whyblog.png-h\" alt=\"\"></p>\n<p>时间很快来到了2018年的最后一个月，为什么说是新博客呢，因为之前搭建过一次博客，也写了几篇文章，还放了一些照片。","more":"但是总感觉写不下去，可能是因为沉淀的还不够多吧。不管怎样，写博客还是一个很好的习惯，可以记录生活的点滴，自己的想法和爱好，也是向大家展示自己很好的一种方式。坚持写博客能够让自己得到反思与成长，何乐而不为呢。</p>\n<h3 id=\"那为什么要自建网站写博客呢\"><a href=\"#那为什么要自建网站写博客呢\" class=\"headerlink\" title=\"那为什么要自建网站写博客呢\"></a>那为什么要自建网站写博客呢</h3><p>其实很简单，不太喜欢其他博客类网站的风格，例如CSDN、简书或微信公众号之类的，自己建网站会比较自由一些，并不是追求写文章给多少人看，主要还是想<strong>安静的记录自己想表达的东西</strong>，才会显得与众不同吧。</p>\n<p>同时自建博客网站并没有那么复杂，利用Hexo快速搭建网站，选个主题nexT，配个评论系统Valine，找个Pages服务Coding或者GitHub，然后买个个性的域名，加上熟悉下MarkDown语法，基本上你就可以开始写博客，不需要任何编程基础，当然这次详细的建站过程我会在接下来的博客中介绍，这里就不过多说了。嗯，就因为自建博客也没那么复杂，并且自己还是懂一些技术的，所以我选择自建博客。</p>\n<h2 id=\"我会写哪些东西\"><a href=\"#我会写哪些东西\" class=\"headerlink\" title=\"我会写哪些东西\"></a>我会写哪些东西</h2><p>其实最开始我也在问自己我的博客里面要写些什么东西呢，后来我想明白了，不应该<strong>为了写博客而去写博客</strong>，而是当觉得这个东西有意思，我一定要把它记录下来。所以在我的博客里写的文章应该都是自己感兴趣的、实践过的，并且会尽量写的通俗易懂，排版上段落清晰，这也是我给自己定的目标。所以博客暂定会写如下的内容：</p>\n<ul>\n<li>技术类</li>\n</ul>\n<blockquote>\n<p>技术类的博客当然也会写自己了解的，可能目前最多的还是关于Android的技术博客。后面会介绍一些小程序、AI、算法之类的技术文章。</p>\n</blockquote>\n<ul>\n<li>科技类</li>\n</ul>\n<blockquote>\n<p>科技类的博客会写一些数码产品的测评，最新的科技新闻之类的，当然一定会有我自己的看法。</p>\n</blockquote>\n<ul>\n<li>摄影类</li>\n</ul>\n<blockquote>\n<p>介绍一些我自己对于摄影的经历还有一些摄影技巧，包括单不限于手机摄影、单反摄影、vlog、后期制作等方面的文章，力争做到<strong>你看了就会</strong> 。</p>\n</blockquote>\n<ul>\n<li>天文类</li>\n</ul>\n<blockquote>\n<p>当然作为一个准业余的天文爱好者，从小学时候看的天文爱好者杂志到大学自己购买天文望远镜的一些经历，其实很多时候对于天文都有很高的热情，会分享一些自己的认知和想法，带大家一起了解浩瀚的宇宙。</p>\n</blockquote>\n<ul>\n<li>生活类</li>\n</ul>\n<blockquote>\n<p>生活类的文章就比较杂了，会写一些自己近期遇到人或事，会写一些对生活中发生重要事件的议论文，会写一些出去玩的游记，自己的总结，总之这个很杂，但争取都还是有一点点意思吧。</p>\n</blockquote>\n<h2 id=\"博客里面可以做什么\"><a href=\"#博客里面可以做什么\" class=\"headerlink\" title=\"博客里面可以做什么\"></a>博客里面可以做什么</h2><p>这不废话吗！博客当然是用来看的，确实，但我还是希望看了之后你能够留下宝贵的评论，同时如果觉得有意思分享给你的朋友。</p>\n<ul>\n<li>关于评论</li>\n</ul>\n<blockquote>\n<p><strong>就是它Valine</strong>，为了评论的友好性，我找了很多博客的评论系统，我觉得都太复杂了，之前用过畅言，类似的都需要注册账号才能评论，后来无意中发现了Valine，这家伙竟然可以匿名评论，嗯，大大的减小的评论的门槛。那就是他了。</p>\n<p><strong>如何拥有评论头像</strong>，你可以什么都不留，直接匿名写下你的评论，也可以留一个昵称，来区分你自己。当然你可以通过注册 <a href=\"https://en.gravatar.com/\" target=\"_blank\" rel=\"noopener\">Gravatar</a> 填写邮箱然后上传一个头像，评论时留下邮箱和昵称，就会自动显示你的头像了。<a href=\"https://en.gravatar.com/\" target=\"_blank\" rel=\"noopener\">Gravatar</a> 很多评论系统及网站都支持，所以可以注册一个留着以后用。</p>\n<p><strong>其他</strong>，评论支持MarkDown，如果不知道如何使用请点击评论左下角的<a href=\"https://segmentfault.com/markdown\" target=\"_blank\" rel=\"noopener\">M↓</a> 查看如何使用，同时支持Emoji表情和预览，我还特意去除了点击评论的验证码。那东西目前来说还是很讨厌的。</p>\n</blockquote>\n<ul>\n<li>关于分享</li>\n</ul>\n<blockquote>\n<p>本博客会支持分享，但目前还不支持，但相信马上就会支持。请给我一些时间～</p>\n</blockquote>\n<h2 id=\"如何访问\"><a href=\"#如何访问\" class=\"headerlink\" title=\"如何访问\"></a>如何访问</h2><p>博客可以通过网址来访问 <a href=\"https://www.carlwe.com\" target=\"_blank\" rel=\"noopener\">carlwe.com</a> </p>\n<ul>\n<li>为什么是 <strong>CarlWe </strong></li>\n</ul>\n<blockquote>\n<p>虽然上学时候很多英语老师给我取了不同的英文名，但是第一个是Carl，所以印象最深刻，Carl在名字里是伟大的意思。比如有著名的卡尔·高斯、卡尔文还有卡尔·马克思。嗯，这个名字我很喜欢！😂😂😂</p>\n</blockquote>\n<p>最后请记住 👉🏻 <strong>carlwe.com</strong></p>"},{"title":"研发管理（二）Jira实现基本功能","date":"2022-05-06T00:31:23.000Z","_content":"\n![](https://img.carlwe.com/xs/jira-header.webp)\n\n上一篇文章中介绍到了我们现在的研发现状，为何要选择Jira以及对Jira基本功能进行了介绍，那我们就在这篇文章中正式开始介绍我们如何从现状迁移到jira。\n\n<!--more-->\n\n* 研发管理（一）从现状到Jira\n* **研发管理（二）Jira实现基本功能**\n* 研发管理（三）从实际出发优化Jira使用\n* 研发管理（四）可用报表及项目管理\n\n回顾下之前的流程如下图：\n\n![](https://img.carlwe.com/xs/minjie_kanban.jpg)\n\n这里列出我们需要在Jira实现的核心功能点：\n\n* 创建一个项目和对应的一个带版本的冲刺看板。\n* 创建能够承载每个故事的大卡片，同时需要能够在该故事下创建关联的子任务。\n* 故事卡片和对应的子任务可以能够录入上述纸条中的信息。\n* 创建上述流程中对应的泳道。并能够实现各个泳道之间的快捷拖动。\n\n再完成上述配置之前的准备工作。\n\n## 系统配置\n\n在开始创建项目之前，对于整个jira系统我们需要有一些非常重要的基本配置需要完成，其中主要包含：\n\n> 1. **用户管理**：添加用户，给用户添加组，以方便后续对于不同组的同学设置对应的权限。\n> \n> 2. **问题**： 问题中主要是完成对于问题类型、工作流、界面、字段、优先级、问题的特性、问题属性等设置。\n> \n> 3. **管理应用**：管理我们在JIRA应用商店中购买的应用的一些基本设置，例如我们用到了Advanced RoadMaps For Jira、WorkLogs、Test等的一些基本配置。\n> \n> 4. **系统**：可以完成对于整个jira的一般配置、系统支持、安全、用户界面、导入导出、邮件配置等功能\n\n上面几项中用用的比较多的就是问题相关设置。下面主要介绍下问题中我们需要关注的内容：\n\n### 问题类型\n\n一般来说问题类型我们用到如下几种基本就够了：\n\n1. **Epic（史诗）**:适用于大型用户故事的事务类型，需对其加以细分。\n\n2. **Story（故事）**:适用于一种用户故事的事务类型。\n\n3. **Task（任务）**:一个问题或一个任务。\n\n4. **SubTask（子任务）**:问题的子任务或者用户故事的子任务。\n\n5. **Bug（故障）**:开发中遇到的问题。\n\n问题类型设置好后，需要为不同的项目创建问题类型方案：\n\n![](https://img.carlwe.com/xs/issue_type_schema_add.png)\n\n> 新建问题类型方案，在编辑页面中设置默认问题类型、以及当前方案的名称和需要的问题类型。\n\n问题类型方案设置好后后续在创建项目后需要用到。\n\n![](https://img.carlwe.com/xs/issue_type_scheme.png)\n\n> 在这里我们一般用到的都是故事，大家的任务都在故事下创建子任务，出现的bug使用故障的类型，Epic保留类型暂用不到。\n\n### 工作流\n\n工作流的主要目的是按照真实工作场景和流程来管理不同类型的问题在不同节点的状态转换。我们可以按照上述在墙上的流程来来配置工作流：\n\n> 待办->开发中->集成中->开发完成->测试中->上线\n\n在jira中工作流的配置也分成两部，第一步创建不同场景的工作流，例如我们在开发过程中涉及到两个工作流，一个是开发的，一个是出现bug解决问题的，那我们就先创建这两个：\n\n![](https://img.carlwe.com/xs/dev_work_flow.png)\n\n> 可以看到我们创建了待办、开发中、集成中、开发完成、测试中、完成这几个状态，这些状态可以在左上角的添加状态中添加（这些状态都是在问题属性->状态中添加管理），并在面包中编辑状态流转，这些状态可以不断通过实际开发流程不断衍生而来，发现某个流程没有再去添加。\n\n![](https://img.carlwe.com/xs/bug_work_flow.png)\n\n> 同样的这个是bug的处理流程\n\n![](https://img.carlwe.com/xs/dev_work_flow_text_edit.png)\n\n> 我们可以切换到文本的形式进行查看编辑以及增加删除转换，同时进入每一个状态进行更高级的编辑。\n\n工作流创建好了后我们需要把项目需要用到的工作流组合成一个工作流方案，应用到项目上：\n\n![](https://img.carlwe.com/xs/work_flow_scheme.png)\n\n> 我们在右侧点击添加工作流，选择之前我们创建好的工作流，再选择对应的问题类型，就可以创建出如上图所示的工作流方案，只有故障类型的问题走故障的工作流，其他问题类型都走默认的开发工作流。\n\n到这里工作流就配置完了。\n\n### 界面\n\n前面问题类型、工作流都配置好后，我们需要配置界面，怎么理解这个界面呢：\n\n> jira中的界面顾名思义就是我们看到的页面内容，关于页面的展示主要是配置需要编辑和看到的字段以及顺序。\n\n同时jira支持对于不同操作（新建、编辑、查看）状态配置不同的界面，同时针对不同的问题类型也可以配置不同的界面。jira中分为：界面、界面方案、问题类型界面方案。\n\n1. 界面，我们可以创建多个场景下的界面字段和顺序。\n\n2. 界面方案，我们可以创建一个问题在新建、编辑、查看时对应的不同界面当作一个界面方案。\n\n3. 问题类型界面方案，我们可以按照不同的问题类型，关联上不同的界面方案，当完成多个问题类型关联页面方案的组合后形成一个项目的界面方案。\n\n![](https://img.carlwe.com/xs/bug_issue_status_screen_scheme.png)\n\n> 这是故障页面在编辑问题和其他状态下配置的界面方案。\n\n![](https://img.carlwe.com/xs/issue_type_screen_scheme.png)\n\n> 这个是项目在默认类型，子任务类型、故障类型时所创建的不同页面。\n\n在创建界面时我们需要添加页面字段，同时按照实际需求调整页面字段的顺序：\n\n![](https://img.carlwe.com/xs/sub_task_screen.png)\n\n下面我们就来看下字段：\n\n### 字段\n\n在jira中字段问题四项配置：\n\n1. 系统字段：jira为我们提供好了的字段，一般我们不需要改变。\n\n2. 自定义字段：我们可以按照实际的开发需要自定义一些字段，选择字段类型，并做相关的配置，例如可以自定义开始日、等待时间等。\n\n3. 字段配置：添加并配置一种字段状态，添加的这个配置里包含所有字段，并可以单独配置每一个字段的显示隐藏、是否必填，说明文案等信息。我们可以按照不同的问题类型来配置，例如子任务的预估时间是必须填写的，这样大家在创建子任务卡片后开发时间就会都填写好。\n   \n   ![](https://img.carlwe.com/xs/filed_config.png)\n   \n   > 这里感觉字段配置功能可配的并不多，而且页面比较繁琐。\n\n4. 字段配置方案，这个就是配置一个项目的字段配置方案，我们可以将几个不同类型的问题的字段配置按需组合成一个项目的字段配置方案：\n\n![](https://img.carlwe.com/xs/dev_filed_scheme.png)\n\n上面这些基本的功能完成后我们就可以着手开始创建项目了：\n\n## 项目及面版创建\n\n### 创建项目\n\n按照引到创建好项目：\n\n![](https://img.carlwe.com/xs/create_project.png)\n\n> 选择创建项目\n\n![](https://img.carlwe.com/xs/create_project_scrum.png)\n\n> 我们创建软件开发Scrum开发方法的项目，上面也支持Business相关项目管理、流程管理项目的创建\n\n![](https://img.carlwe.com/xs/scrum_dev_method.png)\n\n> scrum开发方法的介绍\n\n![](https://img.carlwe.com/xs/project_backlog.png)\n\n> 输入项目名称后完成项目的创建，如上图会来到项目的首页Backlog中。\n\n接下来我们来介绍项目的配置以及面板的配置。\n\n### 项目设置\n\n进入左下角进入项目设置页面\n\n![](https://img.carlwe.com/xs/app_test_project_setting.png)\n\n除了上述提到的系统设置相关的设置外，我们需要处理下优先级、版本、模块、用户和角色。\n\n> 优先级：这个可以按照默认的优先级策略从P0-P4。\n> \n> 版本：建议所有前后端研发需求都按照版本来进行规划，我们可以按照实际的版本编号在其中创建版本。\n> \n> 模块：模块是一个固定在这里编辑的字段，可以理解为业务中划分的模块，也可以将其当作不同端的划分，例如App、小程序、web前端等端的划分。\n> \n> 用户和角色：可以按照产品、测试、开发、UI等角色，在项目中给每一个人赋于角色，这个角色其实就是每一个人在项目中的一个属性。在后续编写脚本判断中会用到。\n\n### 面板创建\n\n完成上述项目配置后开始面板的配置，要实现本文开头说的效果，主要是在面板配置中进行配置，当然，我们需要提前创建好一个面板。\n\n![](https://img.carlwe.com/xs/create_scrum_board.png)\n\n> 按照说明，这里我们选择Scrum看板，上图已经介绍的比较清晰，对于App开发这种功能节奏和版本规划较强的项目来说，比较适合于scrum。\n\n![](https://img.carlwe.com/xs/create_scrum_with_jql.png)\n\n> 接着会让我们选择是依赖于一个项目还是一个筛选器，这个一般我们选择一个筛选器。\n\n![](https://img.carlwe.com/xs/naming_borad_with_jql.png)\n\n> 这里我们选择一个已保存的筛选器来进行项目的创建。\n\n下面介绍下筛选器JQL：\n\n![](https://img.carlwe.com/xs/jira_jql_edit.png)\n\n> 我们可以通过筛选问题类型、状态、经办人、模块等更多字段来组成一个筛选语句，点击高级可以查看语句内容：\n> \n> ```sql\n> project = DEV AND issuetype in (任务, 故事, 子任务) AND component = App ORDER BY 等级 ASC\n> ```\n\n更高级的语法可以参考：[官方文档](https://confluence.atlassian.com/jirasoftwareserver0820/advanced-searching-1095249245.html) 不得不说jira做的很好，每一个版本都有自己对应的文档说明，非常清晰，后面有机会再介绍JQL的一些高级功能。\n\n创建好面板之后，我们就可以创建一个冲刺，并在冲刺中创建故事和任务。\n\n### 任务创建\n\n1.创建故事：\n\n![](https://img.carlwe.com/xs/jira_create_story.png)\n\n> 首先创建故事，需要我们完成概要、冲刺、模块、版本、经办人的填写。然后创建故事。\n\n2.创建子任务：\n\n![](https://img.carlwe.com/xs/jira_create_subtask.png)\n\n> 在故事创建好之后，在故事详情页中可以点击创建子任务，默认出现的问题类型就是子任务，我嗯需要完成对应的概要、预估时间填写。并创建子任务。\n\n这里所有的字段及字段的顺序都是之前配置好的。那么现在就有如下的问题了：\n\n> - 如何解决经办人、开始日、到期日等这些没办法在系统设置中设置成必填，但是实际中又是必须填写的问题呢？\n> \n> - 不管是故事还是子任务，其都是一个问题，都拥有所有的字段，如果确保子任务冲刺、模块、修复的版本，这些字段直接复用主任务的字段而不用再手动填写一遍呢？\n\n上述的问题我们会在后面一篇文章中进行解答，敬请期待。\n\n3.当故事和子任务都创建好之后，我们就可以查看backlog：\n\n![](https://img.carlwe.com/xs/backlog_story_subtask_show.png)\n\n> 一般冲刺的名称按照版本好来命名，会在所有的故事和子任务创建好后开始冲刺。我们会划分好每一个单独的用户故事，并在其下创建前后端开发、测试对应的子任务卡片，以及评估需要的时间。\n\n明显这只是backlog中的展示，并没有能够达到我们之前预估的在不同的泳道展示不同的卡片的样子，接下来我们就需要点击面板，对面板的展示进行配置：\n\n### 面板配置\n\n![](https://img.carlwe.com/xs/jira_board_config_main.png)\n\n点击面板配置进入配置页，可以看到我们可以对面板进行多种配置，这里主要说下如下几种配置：\n\n1. 列配置\n   \n   ![](https://img.carlwe.com/xs/jira_%20board_config_column.png)\n   \n   > 我们根据项目初始配置中的状态按照顺序来创建不同的列，并把状态拖动到其中\n\n2. 泳道配置\n   \n   ![](https://img.carlwe.com/xs/jira_board_config_yongdao.png)\n   \n   > 因为我们希望按照用户故事的维度来展示每个用户故事下不同的卡片的状态，所以这里面板的泳道配置是基于故事的，同时我们也可以选择经办人或者特定的查询。\n\n3. 卡片布局配置\n   \n   ![](https://img.carlwe.com/xs/jira_board_card_layout_edit.png)\n   \n   > 我们希望在面板上每个卡片展示其标签和初始预估就够了，那我们就可以按照我们的需求来进行特定字段的配置。\n\n4. 预估可以按照原预估时间和剩余的预估时间来展示，这样能方便看到当前卡片的进展。我们使用工作日志登记来进行卡片预估时间的消耗。后面还会提到这个。\n\n5. 问题详情视图，配置的是在面板中，我们点击卡片右侧展示的详情中需要展示的字段。这个按照不同项目重要性来配置就好。\n\n### 面板查看\n\n完成上述配置后，我们回道项目主页中的活动的Sprint\n\n![](https://img.carlwe.com/xs/jira_board_detail.png)\n\n可以看到我们已经完成类似于之前在墙上看版的样子，每一个用户故事下方对应的就是前后端开发的卡片内容，每个卡片都有自己与之前一致的对应状态，大家每天可以看着这个面板来拖动自己的任务更新自己的任务卡片。\n\n## 总结\n\n到这里本篇文章的介绍就结束了，本文主要介绍了jira系统配置中核心的\n\n> 1. 问题类型\n> \n> 2. 工作流\n> \n> 3. 界面\n> \n> 4. 字段\n\n同时以还原之前下线的墙上看版的目的介绍了：\n\n> 1. 项目创建\n> \n> 2. 项目设置\n> \n> 3. 面板创建\n> \n> 4. 任务创建\n> \n> 5. 面板配置\n> \n> 6. 面板查看\n\n本文介绍的知识点较多，平时用到的一些基础内容基本都在里面了。接下来的文章会回答文章的问题，以及如何让这个看版更好用的一些方法。\n","source":"_posts/研发管理（二）Jira实现基本功能.md","raw":"---\ntitle: 研发管理（二）Jira实现基本功能\ndate: 2022-05-06 08:31:23\ntags: Jira\n---\n\n![](https://img.carlwe.com/xs/jira-header.webp)\n\n上一篇文章中介绍到了我们现在的研发现状，为何要选择Jira以及对Jira基本功能进行了介绍，那我们就在这篇文章中正式开始介绍我们如何从现状迁移到jira。\n\n<!--more-->\n\n* 研发管理（一）从现状到Jira\n* **研发管理（二）Jira实现基本功能**\n* 研发管理（三）从实际出发优化Jira使用\n* 研发管理（四）可用报表及项目管理\n\n回顾下之前的流程如下图：\n\n![](https://img.carlwe.com/xs/minjie_kanban.jpg)\n\n这里列出我们需要在Jira实现的核心功能点：\n\n* 创建一个项目和对应的一个带版本的冲刺看板。\n* 创建能够承载每个故事的大卡片，同时需要能够在该故事下创建关联的子任务。\n* 故事卡片和对应的子任务可以能够录入上述纸条中的信息。\n* 创建上述流程中对应的泳道。并能够实现各个泳道之间的快捷拖动。\n\n再完成上述配置之前的准备工作。\n\n## 系统配置\n\n在开始创建项目之前，对于整个jira系统我们需要有一些非常重要的基本配置需要完成，其中主要包含：\n\n> 1. **用户管理**：添加用户，给用户添加组，以方便后续对于不同组的同学设置对应的权限。\n> \n> 2. **问题**： 问题中主要是完成对于问题类型、工作流、界面、字段、优先级、问题的特性、问题属性等设置。\n> \n> 3. **管理应用**：管理我们在JIRA应用商店中购买的应用的一些基本设置，例如我们用到了Advanced RoadMaps For Jira、WorkLogs、Test等的一些基本配置。\n> \n> 4. **系统**：可以完成对于整个jira的一般配置、系统支持、安全、用户界面、导入导出、邮件配置等功能\n\n上面几项中用用的比较多的就是问题相关设置。下面主要介绍下问题中我们需要关注的内容：\n\n### 问题类型\n\n一般来说问题类型我们用到如下几种基本就够了：\n\n1. **Epic（史诗）**:适用于大型用户故事的事务类型，需对其加以细分。\n\n2. **Story（故事）**:适用于一种用户故事的事务类型。\n\n3. **Task（任务）**:一个问题或一个任务。\n\n4. **SubTask（子任务）**:问题的子任务或者用户故事的子任务。\n\n5. **Bug（故障）**:开发中遇到的问题。\n\n问题类型设置好后，需要为不同的项目创建问题类型方案：\n\n![](https://img.carlwe.com/xs/issue_type_schema_add.png)\n\n> 新建问题类型方案，在编辑页面中设置默认问题类型、以及当前方案的名称和需要的问题类型。\n\n问题类型方案设置好后后续在创建项目后需要用到。\n\n![](https://img.carlwe.com/xs/issue_type_scheme.png)\n\n> 在这里我们一般用到的都是故事，大家的任务都在故事下创建子任务，出现的bug使用故障的类型，Epic保留类型暂用不到。\n\n### 工作流\n\n工作流的主要目的是按照真实工作场景和流程来管理不同类型的问题在不同节点的状态转换。我们可以按照上述在墙上的流程来来配置工作流：\n\n> 待办->开发中->集成中->开发完成->测试中->上线\n\n在jira中工作流的配置也分成两部，第一步创建不同场景的工作流，例如我们在开发过程中涉及到两个工作流，一个是开发的，一个是出现bug解决问题的，那我们就先创建这两个：\n\n![](https://img.carlwe.com/xs/dev_work_flow.png)\n\n> 可以看到我们创建了待办、开发中、集成中、开发完成、测试中、完成这几个状态，这些状态可以在左上角的添加状态中添加（这些状态都是在问题属性->状态中添加管理），并在面包中编辑状态流转，这些状态可以不断通过实际开发流程不断衍生而来，发现某个流程没有再去添加。\n\n![](https://img.carlwe.com/xs/bug_work_flow.png)\n\n> 同样的这个是bug的处理流程\n\n![](https://img.carlwe.com/xs/dev_work_flow_text_edit.png)\n\n> 我们可以切换到文本的形式进行查看编辑以及增加删除转换，同时进入每一个状态进行更高级的编辑。\n\n工作流创建好了后我们需要把项目需要用到的工作流组合成一个工作流方案，应用到项目上：\n\n![](https://img.carlwe.com/xs/work_flow_scheme.png)\n\n> 我们在右侧点击添加工作流，选择之前我们创建好的工作流，再选择对应的问题类型，就可以创建出如上图所示的工作流方案，只有故障类型的问题走故障的工作流，其他问题类型都走默认的开发工作流。\n\n到这里工作流就配置完了。\n\n### 界面\n\n前面问题类型、工作流都配置好后，我们需要配置界面，怎么理解这个界面呢：\n\n> jira中的界面顾名思义就是我们看到的页面内容，关于页面的展示主要是配置需要编辑和看到的字段以及顺序。\n\n同时jira支持对于不同操作（新建、编辑、查看）状态配置不同的界面，同时针对不同的问题类型也可以配置不同的界面。jira中分为：界面、界面方案、问题类型界面方案。\n\n1. 界面，我们可以创建多个场景下的界面字段和顺序。\n\n2. 界面方案，我们可以创建一个问题在新建、编辑、查看时对应的不同界面当作一个界面方案。\n\n3. 问题类型界面方案，我们可以按照不同的问题类型，关联上不同的界面方案，当完成多个问题类型关联页面方案的组合后形成一个项目的界面方案。\n\n![](https://img.carlwe.com/xs/bug_issue_status_screen_scheme.png)\n\n> 这是故障页面在编辑问题和其他状态下配置的界面方案。\n\n![](https://img.carlwe.com/xs/issue_type_screen_scheme.png)\n\n> 这个是项目在默认类型，子任务类型、故障类型时所创建的不同页面。\n\n在创建界面时我们需要添加页面字段，同时按照实际需求调整页面字段的顺序：\n\n![](https://img.carlwe.com/xs/sub_task_screen.png)\n\n下面我们就来看下字段：\n\n### 字段\n\n在jira中字段问题四项配置：\n\n1. 系统字段：jira为我们提供好了的字段，一般我们不需要改变。\n\n2. 自定义字段：我们可以按照实际的开发需要自定义一些字段，选择字段类型，并做相关的配置，例如可以自定义开始日、等待时间等。\n\n3. 字段配置：添加并配置一种字段状态，添加的这个配置里包含所有字段，并可以单独配置每一个字段的显示隐藏、是否必填，说明文案等信息。我们可以按照不同的问题类型来配置，例如子任务的预估时间是必须填写的，这样大家在创建子任务卡片后开发时间就会都填写好。\n   \n   ![](https://img.carlwe.com/xs/filed_config.png)\n   \n   > 这里感觉字段配置功能可配的并不多，而且页面比较繁琐。\n\n4. 字段配置方案，这个就是配置一个项目的字段配置方案，我们可以将几个不同类型的问题的字段配置按需组合成一个项目的字段配置方案：\n\n![](https://img.carlwe.com/xs/dev_filed_scheme.png)\n\n上面这些基本的功能完成后我们就可以着手开始创建项目了：\n\n## 项目及面版创建\n\n### 创建项目\n\n按照引到创建好项目：\n\n![](https://img.carlwe.com/xs/create_project.png)\n\n> 选择创建项目\n\n![](https://img.carlwe.com/xs/create_project_scrum.png)\n\n> 我们创建软件开发Scrum开发方法的项目，上面也支持Business相关项目管理、流程管理项目的创建\n\n![](https://img.carlwe.com/xs/scrum_dev_method.png)\n\n> scrum开发方法的介绍\n\n![](https://img.carlwe.com/xs/project_backlog.png)\n\n> 输入项目名称后完成项目的创建，如上图会来到项目的首页Backlog中。\n\n接下来我们来介绍项目的配置以及面板的配置。\n\n### 项目设置\n\n进入左下角进入项目设置页面\n\n![](https://img.carlwe.com/xs/app_test_project_setting.png)\n\n除了上述提到的系统设置相关的设置外，我们需要处理下优先级、版本、模块、用户和角色。\n\n> 优先级：这个可以按照默认的优先级策略从P0-P4。\n> \n> 版本：建议所有前后端研发需求都按照版本来进行规划，我们可以按照实际的版本编号在其中创建版本。\n> \n> 模块：模块是一个固定在这里编辑的字段，可以理解为业务中划分的模块，也可以将其当作不同端的划分，例如App、小程序、web前端等端的划分。\n> \n> 用户和角色：可以按照产品、测试、开发、UI等角色，在项目中给每一个人赋于角色，这个角色其实就是每一个人在项目中的一个属性。在后续编写脚本判断中会用到。\n\n### 面板创建\n\n完成上述项目配置后开始面板的配置，要实现本文开头说的效果，主要是在面板配置中进行配置，当然，我们需要提前创建好一个面板。\n\n![](https://img.carlwe.com/xs/create_scrum_board.png)\n\n> 按照说明，这里我们选择Scrum看板，上图已经介绍的比较清晰，对于App开发这种功能节奏和版本规划较强的项目来说，比较适合于scrum。\n\n![](https://img.carlwe.com/xs/create_scrum_with_jql.png)\n\n> 接着会让我们选择是依赖于一个项目还是一个筛选器，这个一般我们选择一个筛选器。\n\n![](https://img.carlwe.com/xs/naming_borad_with_jql.png)\n\n> 这里我们选择一个已保存的筛选器来进行项目的创建。\n\n下面介绍下筛选器JQL：\n\n![](https://img.carlwe.com/xs/jira_jql_edit.png)\n\n> 我们可以通过筛选问题类型、状态、经办人、模块等更多字段来组成一个筛选语句，点击高级可以查看语句内容：\n> \n> ```sql\n> project = DEV AND issuetype in (任务, 故事, 子任务) AND component = App ORDER BY 等级 ASC\n> ```\n\n更高级的语法可以参考：[官方文档](https://confluence.atlassian.com/jirasoftwareserver0820/advanced-searching-1095249245.html) 不得不说jira做的很好，每一个版本都有自己对应的文档说明，非常清晰，后面有机会再介绍JQL的一些高级功能。\n\n创建好面板之后，我们就可以创建一个冲刺，并在冲刺中创建故事和任务。\n\n### 任务创建\n\n1.创建故事：\n\n![](https://img.carlwe.com/xs/jira_create_story.png)\n\n> 首先创建故事，需要我们完成概要、冲刺、模块、版本、经办人的填写。然后创建故事。\n\n2.创建子任务：\n\n![](https://img.carlwe.com/xs/jira_create_subtask.png)\n\n> 在故事创建好之后，在故事详情页中可以点击创建子任务，默认出现的问题类型就是子任务，我嗯需要完成对应的概要、预估时间填写。并创建子任务。\n\n这里所有的字段及字段的顺序都是之前配置好的。那么现在就有如下的问题了：\n\n> - 如何解决经办人、开始日、到期日等这些没办法在系统设置中设置成必填，但是实际中又是必须填写的问题呢？\n> \n> - 不管是故事还是子任务，其都是一个问题，都拥有所有的字段，如果确保子任务冲刺、模块、修复的版本，这些字段直接复用主任务的字段而不用再手动填写一遍呢？\n\n上述的问题我们会在后面一篇文章中进行解答，敬请期待。\n\n3.当故事和子任务都创建好之后，我们就可以查看backlog：\n\n![](https://img.carlwe.com/xs/backlog_story_subtask_show.png)\n\n> 一般冲刺的名称按照版本好来命名，会在所有的故事和子任务创建好后开始冲刺。我们会划分好每一个单独的用户故事，并在其下创建前后端开发、测试对应的子任务卡片，以及评估需要的时间。\n\n明显这只是backlog中的展示，并没有能够达到我们之前预估的在不同的泳道展示不同的卡片的样子，接下来我们就需要点击面板，对面板的展示进行配置：\n\n### 面板配置\n\n![](https://img.carlwe.com/xs/jira_board_config_main.png)\n\n点击面板配置进入配置页，可以看到我们可以对面板进行多种配置，这里主要说下如下几种配置：\n\n1. 列配置\n   \n   ![](https://img.carlwe.com/xs/jira_%20board_config_column.png)\n   \n   > 我们根据项目初始配置中的状态按照顺序来创建不同的列，并把状态拖动到其中\n\n2. 泳道配置\n   \n   ![](https://img.carlwe.com/xs/jira_board_config_yongdao.png)\n   \n   > 因为我们希望按照用户故事的维度来展示每个用户故事下不同的卡片的状态，所以这里面板的泳道配置是基于故事的，同时我们也可以选择经办人或者特定的查询。\n\n3. 卡片布局配置\n   \n   ![](https://img.carlwe.com/xs/jira_board_card_layout_edit.png)\n   \n   > 我们希望在面板上每个卡片展示其标签和初始预估就够了，那我们就可以按照我们的需求来进行特定字段的配置。\n\n4. 预估可以按照原预估时间和剩余的预估时间来展示，这样能方便看到当前卡片的进展。我们使用工作日志登记来进行卡片预估时间的消耗。后面还会提到这个。\n\n5. 问题详情视图，配置的是在面板中，我们点击卡片右侧展示的详情中需要展示的字段。这个按照不同项目重要性来配置就好。\n\n### 面板查看\n\n完成上述配置后，我们回道项目主页中的活动的Sprint\n\n![](https://img.carlwe.com/xs/jira_board_detail.png)\n\n可以看到我们已经完成类似于之前在墙上看版的样子，每一个用户故事下方对应的就是前后端开发的卡片内容，每个卡片都有自己与之前一致的对应状态，大家每天可以看着这个面板来拖动自己的任务更新自己的任务卡片。\n\n## 总结\n\n到这里本篇文章的介绍就结束了，本文主要介绍了jira系统配置中核心的\n\n> 1. 问题类型\n> \n> 2. 工作流\n> \n> 3. 界面\n> \n> 4. 字段\n\n同时以还原之前下线的墙上看版的目的介绍了：\n\n> 1. 项目创建\n> \n> 2. 项目设置\n> \n> 3. 面板创建\n> \n> 4. 任务创建\n> \n> 5. 面板配置\n> \n> 6. 面板查看\n\n本文介绍的知识点较多，平时用到的一些基础内容基本都在里面了。接下来的文章会回答文章的问题，以及如何让这个看版更好用的一些方法。\n","slug":"研发管理（二）Jira实现基本功能","published":1,"updated":"2022-05-06T00:32:28.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnpd0013t57snhe6nn2z","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/xs/jira-header.webp\" alt=\"\"></p>\n<p>上一篇文章中介绍到了我们现在的研发现状，为何要选择Jira以及对Jira基本功能进行了介绍，那我们就在这篇文章中正式开始介绍我们如何从现状迁移到jira。</p>\n<a id=\"more\"></a>\n<ul>\n<li>研发管理（一）从现状到Jira</li>\n<li><strong>研发管理（二）Jira实现基本功能</strong></li>\n<li>研发管理（三）从实际出发优化Jira使用</li>\n<li>研发管理（四）可用报表及项目管理</li>\n</ul>\n<p>回顾下之前的流程如下图：</p>\n<p><img src=\"https://img.carlwe.com/xs/minjie_kanban.jpg\" alt=\"\"></p>\n<p>这里列出我们需要在Jira实现的核心功能点：</p>\n<ul>\n<li>创建一个项目和对应的一个带版本的冲刺看板。</li>\n<li>创建能够承载每个故事的大卡片，同时需要能够在该故事下创建关联的子任务。</li>\n<li>故事卡片和对应的子任务可以能够录入上述纸条中的信息。</li>\n<li>创建上述流程中对应的泳道。并能够实现各个泳道之间的快捷拖动。</li>\n</ul>\n<p>再完成上述配置之前的准备工作。</p>\n<h2 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h2><p>在开始创建项目之前，对于整个jira系统我们需要有一些非常重要的基本配置需要完成，其中主要包含：</p>\n<blockquote>\n<ol>\n<li><p><strong>用户管理</strong>：添加用户，给用户添加组，以方便后续对于不同组的同学设置对应的权限。</p>\n</li>\n<li><p><strong>问题</strong>： 问题中主要是完成对于问题类型、工作流、界面、字段、优先级、问题的特性、问题属性等设置。</p>\n</li>\n<li><p><strong>管理应用</strong>：管理我们在JIRA应用商店中购买的应用的一些基本设置，例如我们用到了Advanced RoadMaps For Jira、WorkLogs、Test等的一些基本配置。</p>\n</li>\n<li><p><strong>系统</strong>：可以完成对于整个jira的一般配置、系统支持、安全、用户界面、导入导出、邮件配置等功能</p>\n</li>\n</ol>\n</blockquote>\n<p>上面几项中用用的比较多的就是问题相关设置。下面主要介绍下问题中我们需要关注的内容：</p>\n<h3 id=\"问题类型\"><a href=\"#问题类型\" class=\"headerlink\" title=\"问题类型\"></a>问题类型</h3><p>一般来说问题类型我们用到如下几种基本就够了：</p>\n<ol>\n<li><p><strong>Epic（史诗）</strong>:适用于大型用户故事的事务类型，需对其加以细分。</p>\n</li>\n<li><p><strong>Story（故事）</strong>:适用于一种用户故事的事务类型。</p>\n</li>\n<li><p><strong>Task（任务）</strong>:一个问题或一个任务。</p>\n</li>\n<li><p><strong>SubTask（子任务）</strong>:问题的子任务或者用户故事的子任务。</p>\n</li>\n<li><p><strong>Bug（故障）</strong>:开发中遇到的问题。</p>\n</li>\n</ol>\n<p>问题类型设置好后，需要为不同的项目创建问题类型方案：</p>\n<p><img src=\"https://img.carlwe.com/xs/issue_type_schema_add.png\" alt=\"\"></p>\n<blockquote>\n<p>新建问题类型方案，在编辑页面中设置默认问题类型、以及当前方案的名称和需要的问题类型。</p>\n</blockquote>\n<p>问题类型方案设置好后后续在创建项目后需要用到。</p>\n<p><img src=\"https://img.carlwe.com/xs/issue_type_scheme.png\" alt=\"\"></p>\n<blockquote>\n<p>在这里我们一般用到的都是故事，大家的任务都在故事下创建子任务，出现的bug使用故障的类型，Epic保留类型暂用不到。</p>\n</blockquote>\n<h3 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h3><p>工作流的主要目的是按照真实工作场景和流程来管理不同类型的问题在不同节点的状态转换。我们可以按照上述在墙上的流程来来配置工作流：</p>\n<blockquote>\n<p>待办-&gt;开发中-&gt;集成中-&gt;开发完成-&gt;测试中-&gt;上线</p>\n</blockquote>\n<p>在jira中工作流的配置也分成两部，第一步创建不同场景的工作流，例如我们在开发过程中涉及到两个工作流，一个是开发的，一个是出现bug解决问题的，那我们就先创建这两个：</p>\n<p><img src=\"https://img.carlwe.com/xs/dev_work_flow.png\" alt=\"\"></p>\n<blockquote>\n<p>可以看到我们创建了待办、开发中、集成中、开发完成、测试中、完成这几个状态，这些状态可以在左上角的添加状态中添加（这些状态都是在问题属性-&gt;状态中添加管理），并在面包中编辑状态流转，这些状态可以不断通过实际开发流程不断衍生而来，发现某个流程没有再去添加。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xs/bug_work_flow.png\" alt=\"\"></p>\n<blockquote>\n<p>同样的这个是bug的处理流程</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xs/dev_work_flow_text_edit.png\" alt=\"\"></p>\n<blockquote>\n<p>我们可以切换到文本的形式进行查看编辑以及增加删除转换，同时进入每一个状态进行更高级的编辑。</p>\n</blockquote>\n<p>工作流创建好了后我们需要把项目需要用到的工作流组合成一个工作流方案，应用到项目上：</p>\n<p><img src=\"https://img.carlwe.com/xs/work_flow_scheme.png\" alt=\"\"></p>\n<blockquote>\n<p>我们在右侧点击添加工作流，选择之前我们创建好的工作流，再选择对应的问题类型，就可以创建出如上图所示的工作流方案，只有故障类型的问题走故障的工作流，其他问题类型都走默认的开发工作流。</p>\n</blockquote>\n<p>到这里工作流就配置完了。</p>\n<h3 id=\"界面\"><a href=\"#界面\" class=\"headerlink\" title=\"界面\"></a>界面</h3><p>前面问题类型、工作流都配置好后，我们需要配置界面，怎么理解这个界面呢：</p>\n<blockquote>\n<p>jira中的界面顾名思义就是我们看到的页面内容，关于页面的展示主要是配置需要编辑和看到的字段以及顺序。</p>\n</blockquote>\n<p>同时jira支持对于不同操作（新建、编辑、查看）状态配置不同的界面，同时针对不同的问题类型也可以配置不同的界面。jira中分为：界面、界面方案、问题类型界面方案。</p>\n<ol>\n<li><p>界面，我们可以创建多个场景下的界面字段和顺序。</p>\n</li>\n<li><p>界面方案，我们可以创建一个问题在新建、编辑、查看时对应的不同界面当作一个界面方案。</p>\n</li>\n<li><p>问题类型界面方案，我们可以按照不同的问题类型，关联上不同的界面方案，当完成多个问题类型关联页面方案的组合后形成一个项目的界面方案。</p>\n</li>\n</ol>\n<p><img src=\"https://img.carlwe.com/xs/bug_issue_status_screen_scheme.png\" alt=\"\"></p>\n<blockquote>\n<p>这是故障页面在编辑问题和其他状态下配置的界面方案。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xs/issue_type_screen_scheme.png\" alt=\"\"></p>\n<blockquote>\n<p>这个是项目在默认类型，子任务类型、故障类型时所创建的不同页面。</p>\n</blockquote>\n<p>在创建界面时我们需要添加页面字段，同时按照实际需求调整页面字段的顺序：</p>\n<p><img src=\"https://img.carlwe.com/xs/sub_task_screen.png\" alt=\"\"></p>\n<p>下面我们就来看下字段：</p>\n<h3 id=\"字段\"><a href=\"#字段\" class=\"headerlink\" title=\"字段\"></a>字段</h3><p>在jira中字段问题四项配置：</p>\n<ol>\n<li><p>系统字段：jira为我们提供好了的字段，一般我们不需要改变。</p>\n</li>\n<li><p>自定义字段：我们可以按照实际的开发需要自定义一些字段，选择字段类型，并做相关的配置，例如可以自定义开始日、等待时间等。</p>\n</li>\n<li><p>字段配置：添加并配置一种字段状态，添加的这个配置里包含所有字段，并可以单独配置每一个字段的显示隐藏、是否必填，说明文案等信息。我们可以按照不同的问题类型来配置，例如子任务的预估时间是必须填写的，这样大家在创建子任务卡片后开发时间就会都填写好。</p>\n<p><img src=\"https://img.carlwe.com/xs/filed_config.png\" alt=\"\"></p>\n<blockquote>\n<p>这里感觉字段配置功能可配的并不多，而且页面比较繁琐。</p>\n</blockquote>\n</li>\n<li><p>字段配置方案，这个就是配置一个项目的字段配置方案，我们可以将几个不同类型的问题的字段配置按需组合成一个项目的字段配置方案：</p>\n</li>\n</ol>\n<p><img src=\"https://img.carlwe.com/xs/dev_filed_scheme.png\" alt=\"\"></p>\n<p>上面这些基本的功能完成后我们就可以着手开始创建项目了：</p>\n<h2 id=\"项目及面版创建\"><a href=\"#项目及面版创建\" class=\"headerlink\" title=\"项目及面版创建\"></a>项目及面版创建</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>按照引到创建好项目：</p>\n<p><img src=\"https://img.carlwe.com/xs/create_project.png\" alt=\"\"></p>\n<blockquote>\n<p>选择创建项目</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xs/create_project_scrum.png\" alt=\"\"></p>\n<blockquote>\n<p>我们创建软件开发Scrum开发方法的项目，上面也支持Business相关项目管理、流程管理项目的创建</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xs/scrum_dev_method.png\" alt=\"\"></p>\n<blockquote>\n<p>scrum开发方法的介绍</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xs/project_backlog.png\" alt=\"\"></p>\n<blockquote>\n<p>输入项目名称后完成项目的创建，如上图会来到项目的首页Backlog中。</p>\n</blockquote>\n<p>接下来我们来介绍项目的配置以及面板的配置。</p>\n<h3 id=\"项目设置\"><a href=\"#项目设置\" class=\"headerlink\" title=\"项目设置\"></a>项目设置</h3><p>进入左下角进入项目设置页面</p>\n<p><img src=\"https://img.carlwe.com/xs/app_test_project_setting.png\" alt=\"\"></p>\n<p>除了上述提到的系统设置相关的设置外，我们需要处理下优先级、版本、模块、用户和角色。</p>\n<blockquote>\n<p>优先级：这个可以按照默认的优先级策略从P0-P4。</p>\n<p>版本：建议所有前后端研发需求都按照版本来进行规划，我们可以按照实际的版本编号在其中创建版本。</p>\n<p>模块：模块是一个固定在这里编辑的字段，可以理解为业务中划分的模块，也可以将其当作不同端的划分，例如App、小程序、web前端等端的划分。</p>\n<p>用户和角色：可以按照产品、测试、开发、UI等角色，在项目中给每一个人赋于角色，这个角色其实就是每一个人在项目中的一个属性。在后续编写脚本判断中会用到。</p>\n</blockquote>\n<h3 id=\"面板创建\"><a href=\"#面板创建\" class=\"headerlink\" title=\"面板创建\"></a>面板创建</h3><p>完成上述项目配置后开始面板的配置，要实现本文开头说的效果，主要是在面板配置中进行配置，当然，我们需要提前创建好一个面板。</p>\n<p><img src=\"https://img.carlwe.com/xs/create_scrum_board.png\" alt=\"\"></p>\n<blockquote>\n<p>按照说明，这里我们选择Scrum看板，上图已经介绍的比较清晰，对于App开发这种功能节奏和版本规划较强的项目来说，比较适合于scrum。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xs/create_scrum_with_jql.png\" alt=\"\"></p>\n<blockquote>\n<p>接着会让我们选择是依赖于一个项目还是一个筛选器，这个一般我们选择一个筛选器。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xs/naming_borad_with_jql.png\" alt=\"\"></p>\n<blockquote>\n<p>这里我们选择一个已保存的筛选器来进行项目的创建。</p>\n</blockquote>\n<p>下面介绍下筛选器JQL：</p>\n<p><img src=\"https://img.carlwe.com/xs/jira_jql_edit.png\" alt=\"\"></p>\n<blockquote>\n<p>我们可以通过筛选问题类型、状态、经办人、模块等更多字段来组成一个筛选语句，点击高级可以查看语句内容：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; project = DEV AND issuetype in (任务, 故事, 子任务) AND component = App ORDER BY 等级 ASC</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>更高级的语法可以参考：<a href=\"https://confluence.atlassian.com/jirasoftwareserver0820/advanced-searching-1095249245.html\" target=\"_blank\" rel=\"noopener\">官方文档</a> 不得不说jira做的很好，每一个版本都有自己对应的文档说明，非常清晰，后面有机会再介绍JQL的一些高级功能。</p>\n<p>创建好面板之后，我们就可以创建一个冲刺，并在冲刺中创建故事和任务。</p>\n<h3 id=\"任务创建\"><a href=\"#任务创建\" class=\"headerlink\" title=\"任务创建\"></a>任务创建</h3><p>1.创建故事：</p>\n<p><img src=\"https://img.carlwe.com/xs/jira_create_story.png\" alt=\"\"></p>\n<blockquote>\n<p>首先创建故事，需要我们完成概要、冲刺、模块、版本、经办人的填写。然后创建故事。</p>\n</blockquote>\n<p>2.创建子任务：</p>\n<p><img src=\"https://img.carlwe.com/xs/jira_create_subtask.png\" alt=\"\"></p>\n<blockquote>\n<p>在故事创建好之后，在故事详情页中可以点击创建子任务，默认出现的问题类型就是子任务，我嗯需要完成对应的概要、预估时间填写。并创建子任务。</p>\n</blockquote>\n<p>这里所有的字段及字段的顺序都是之前配置好的。那么现在就有如下的问题了：</p>\n<blockquote>\n<ul>\n<li><p>如何解决经办人、开始日、到期日等这些没办法在系统设置中设置成必填，但是实际中又是必须填写的问题呢？</p>\n</li>\n<li><p>不管是故事还是子任务，其都是一个问题，都拥有所有的字段，如果确保子任务冲刺、模块、修复的版本，这些字段直接复用主任务的字段而不用再手动填写一遍呢？</p>\n</li>\n</ul>\n</blockquote>\n<p>上述的问题我们会在后面一篇文章中进行解答，敬请期待。</p>\n<p>3.当故事和子任务都创建好之后，我们就可以查看backlog：</p>\n<p><img src=\"https://img.carlwe.com/xs/backlog_story_subtask_show.png\" alt=\"\"></p>\n<blockquote>\n<p>一般冲刺的名称按照版本好来命名，会在所有的故事和子任务创建好后开始冲刺。我们会划分好每一个单独的用户故事，并在其下创建前后端开发、测试对应的子任务卡片，以及评估需要的时间。</p>\n</blockquote>\n<p>明显这只是backlog中的展示，并没有能够达到我们之前预估的在不同的泳道展示不同的卡片的样子，接下来我们就需要点击面板，对面板的展示进行配置：</p>\n<h3 id=\"面板配置\"><a href=\"#面板配置\" class=\"headerlink\" title=\"面板配置\"></a>面板配置</h3><p><img src=\"https://img.carlwe.com/xs/jira_board_config_main.png\" alt=\"\"></p>\n<p>点击面板配置进入配置页，可以看到我们可以对面板进行多种配置，这里主要说下如下几种配置：</p>\n<ol>\n<li><p>列配置</p>\n<p><img src=\"https://img.carlwe.com/xs/jira_%20board_config_column.png\" alt=\"\"></p>\n<blockquote>\n<p>我们根据项目初始配置中的状态按照顺序来创建不同的列，并把状态拖动到其中</p>\n</blockquote>\n</li>\n<li><p>泳道配置</p>\n<p><img src=\"https://img.carlwe.com/xs/jira_board_config_yongdao.png\" alt=\"\"></p>\n<blockquote>\n<p>因为我们希望按照用户故事的维度来展示每个用户故事下不同的卡片的状态，所以这里面板的泳道配置是基于故事的，同时我们也可以选择经办人或者特定的查询。</p>\n</blockquote>\n</li>\n<li><p>卡片布局配置</p>\n<p><img src=\"https://img.carlwe.com/xs/jira_board_card_layout_edit.png\" alt=\"\"></p>\n<blockquote>\n<p>我们希望在面板上每个卡片展示其标签和初始预估就够了，那我们就可以按照我们的需求来进行特定字段的配置。</p>\n</blockquote>\n</li>\n<li><p>预估可以按照原预估时间和剩余的预估时间来展示，这样能方便看到当前卡片的进展。我们使用工作日志登记来进行卡片预估时间的消耗。后面还会提到这个。</p>\n</li>\n<li><p>问题详情视图，配置的是在面板中，我们点击卡片右侧展示的详情中需要展示的字段。这个按照不同项目重要性来配置就好。</p>\n</li>\n</ol>\n<h3 id=\"面板查看\"><a href=\"#面板查看\" class=\"headerlink\" title=\"面板查看\"></a>面板查看</h3><p>完成上述配置后，我们回道项目主页中的活动的Sprint</p>\n<p><img src=\"https://img.carlwe.com/xs/jira_board_detail.png\" alt=\"\"></p>\n<p>可以看到我们已经完成类似于之前在墙上看版的样子，每一个用户故事下方对应的就是前后端开发的卡片内容，每个卡片都有自己与之前一致的对应状态，大家每天可以看着这个面板来拖动自己的任务更新自己的任务卡片。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到这里本篇文章的介绍就结束了，本文主要介绍了jira系统配置中核心的</p>\n<blockquote>\n<ol>\n<li><p>问题类型</p>\n</li>\n<li><p>工作流</p>\n</li>\n<li><p>界面</p>\n</li>\n<li><p>字段</p>\n</li>\n</ol>\n</blockquote>\n<p>同时以还原之前下线的墙上看版的目的介绍了：</p>\n<blockquote>\n<ol>\n<li><p>项目创建</p>\n</li>\n<li><p>项目设置</p>\n</li>\n<li><p>面板创建</p>\n</li>\n<li><p>任务创建</p>\n</li>\n<li><p>面板配置</p>\n</li>\n<li><p>面板查看</p>\n</li>\n</ol>\n</blockquote>\n<p>本文介绍的知识点较多，平时用到的一些基础内容基本都在里面了。接下来的文章会回答文章的问题，以及如何让这个看版更好用的一些方法。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/xs/jira-header.webp\" alt=\"\"></p>\n<p>上一篇文章中介绍到了我们现在的研发现状，为何要选择Jira以及对Jira基本功能进行了介绍，那我们就在这篇文章中正式开始介绍我们如何从现状迁移到jira。</p>","more":"<ul>\n<li>研发管理（一）从现状到Jira</li>\n<li><strong>研发管理（二）Jira实现基本功能</strong></li>\n<li>研发管理（三）从实际出发优化Jira使用</li>\n<li>研发管理（四）可用报表及项目管理</li>\n</ul>\n<p>回顾下之前的流程如下图：</p>\n<p><img src=\"https://img.carlwe.com/xs/minjie_kanban.jpg\" alt=\"\"></p>\n<p>这里列出我们需要在Jira实现的核心功能点：</p>\n<ul>\n<li>创建一个项目和对应的一个带版本的冲刺看板。</li>\n<li>创建能够承载每个故事的大卡片，同时需要能够在该故事下创建关联的子任务。</li>\n<li>故事卡片和对应的子任务可以能够录入上述纸条中的信息。</li>\n<li>创建上述流程中对应的泳道。并能够实现各个泳道之间的快捷拖动。</li>\n</ul>\n<p>再完成上述配置之前的准备工作。</p>\n<h2 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h2><p>在开始创建项目之前，对于整个jira系统我们需要有一些非常重要的基本配置需要完成，其中主要包含：</p>\n<blockquote>\n<ol>\n<li><p><strong>用户管理</strong>：添加用户，给用户添加组，以方便后续对于不同组的同学设置对应的权限。</p>\n</li>\n<li><p><strong>问题</strong>： 问题中主要是完成对于问题类型、工作流、界面、字段、优先级、问题的特性、问题属性等设置。</p>\n</li>\n<li><p><strong>管理应用</strong>：管理我们在JIRA应用商店中购买的应用的一些基本设置，例如我们用到了Advanced RoadMaps For Jira、WorkLogs、Test等的一些基本配置。</p>\n</li>\n<li><p><strong>系统</strong>：可以完成对于整个jira的一般配置、系统支持、安全、用户界面、导入导出、邮件配置等功能</p>\n</li>\n</ol>\n</blockquote>\n<p>上面几项中用用的比较多的就是问题相关设置。下面主要介绍下问题中我们需要关注的内容：</p>\n<h3 id=\"问题类型\"><a href=\"#问题类型\" class=\"headerlink\" title=\"问题类型\"></a>问题类型</h3><p>一般来说问题类型我们用到如下几种基本就够了：</p>\n<ol>\n<li><p><strong>Epic（史诗）</strong>:适用于大型用户故事的事务类型，需对其加以细分。</p>\n</li>\n<li><p><strong>Story（故事）</strong>:适用于一种用户故事的事务类型。</p>\n</li>\n<li><p><strong>Task（任务）</strong>:一个问题或一个任务。</p>\n</li>\n<li><p><strong>SubTask（子任务）</strong>:问题的子任务或者用户故事的子任务。</p>\n</li>\n<li><p><strong>Bug（故障）</strong>:开发中遇到的问题。</p>\n</li>\n</ol>\n<p>问题类型设置好后，需要为不同的项目创建问题类型方案：</p>\n<p><img src=\"https://img.carlwe.com/xs/issue_type_schema_add.png\" alt=\"\"></p>\n<blockquote>\n<p>新建问题类型方案，在编辑页面中设置默认问题类型、以及当前方案的名称和需要的问题类型。</p>\n</blockquote>\n<p>问题类型方案设置好后后续在创建项目后需要用到。</p>\n<p><img src=\"https://img.carlwe.com/xs/issue_type_scheme.png\" alt=\"\"></p>\n<blockquote>\n<p>在这里我们一般用到的都是故事，大家的任务都在故事下创建子任务，出现的bug使用故障的类型，Epic保留类型暂用不到。</p>\n</blockquote>\n<h3 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h3><p>工作流的主要目的是按照真实工作场景和流程来管理不同类型的问题在不同节点的状态转换。我们可以按照上述在墙上的流程来来配置工作流：</p>\n<blockquote>\n<p>待办-&gt;开发中-&gt;集成中-&gt;开发完成-&gt;测试中-&gt;上线</p>\n</blockquote>\n<p>在jira中工作流的配置也分成两部，第一步创建不同场景的工作流，例如我们在开发过程中涉及到两个工作流，一个是开发的，一个是出现bug解决问题的，那我们就先创建这两个：</p>\n<p><img src=\"https://img.carlwe.com/xs/dev_work_flow.png\" alt=\"\"></p>\n<blockquote>\n<p>可以看到我们创建了待办、开发中、集成中、开发完成、测试中、完成这几个状态，这些状态可以在左上角的添加状态中添加（这些状态都是在问题属性-&gt;状态中添加管理），并在面包中编辑状态流转，这些状态可以不断通过实际开发流程不断衍生而来，发现某个流程没有再去添加。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xs/bug_work_flow.png\" alt=\"\"></p>\n<blockquote>\n<p>同样的这个是bug的处理流程</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xs/dev_work_flow_text_edit.png\" alt=\"\"></p>\n<blockquote>\n<p>我们可以切换到文本的形式进行查看编辑以及增加删除转换，同时进入每一个状态进行更高级的编辑。</p>\n</blockquote>\n<p>工作流创建好了后我们需要把项目需要用到的工作流组合成一个工作流方案，应用到项目上：</p>\n<p><img src=\"https://img.carlwe.com/xs/work_flow_scheme.png\" alt=\"\"></p>\n<blockquote>\n<p>我们在右侧点击添加工作流，选择之前我们创建好的工作流，再选择对应的问题类型，就可以创建出如上图所示的工作流方案，只有故障类型的问题走故障的工作流，其他问题类型都走默认的开发工作流。</p>\n</blockquote>\n<p>到这里工作流就配置完了。</p>\n<h3 id=\"界面\"><a href=\"#界面\" class=\"headerlink\" title=\"界面\"></a>界面</h3><p>前面问题类型、工作流都配置好后，我们需要配置界面，怎么理解这个界面呢：</p>\n<blockquote>\n<p>jira中的界面顾名思义就是我们看到的页面内容，关于页面的展示主要是配置需要编辑和看到的字段以及顺序。</p>\n</blockquote>\n<p>同时jira支持对于不同操作（新建、编辑、查看）状态配置不同的界面，同时针对不同的问题类型也可以配置不同的界面。jira中分为：界面、界面方案、问题类型界面方案。</p>\n<ol>\n<li><p>界面，我们可以创建多个场景下的界面字段和顺序。</p>\n</li>\n<li><p>界面方案，我们可以创建一个问题在新建、编辑、查看时对应的不同界面当作一个界面方案。</p>\n</li>\n<li><p>问题类型界面方案，我们可以按照不同的问题类型，关联上不同的界面方案，当完成多个问题类型关联页面方案的组合后形成一个项目的界面方案。</p>\n</li>\n</ol>\n<p><img src=\"https://img.carlwe.com/xs/bug_issue_status_screen_scheme.png\" alt=\"\"></p>\n<blockquote>\n<p>这是故障页面在编辑问题和其他状态下配置的界面方案。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xs/issue_type_screen_scheme.png\" alt=\"\"></p>\n<blockquote>\n<p>这个是项目在默认类型，子任务类型、故障类型时所创建的不同页面。</p>\n</blockquote>\n<p>在创建界面时我们需要添加页面字段，同时按照实际需求调整页面字段的顺序：</p>\n<p><img src=\"https://img.carlwe.com/xs/sub_task_screen.png\" alt=\"\"></p>\n<p>下面我们就来看下字段：</p>\n<h3 id=\"字段\"><a href=\"#字段\" class=\"headerlink\" title=\"字段\"></a>字段</h3><p>在jira中字段问题四项配置：</p>\n<ol>\n<li><p>系统字段：jira为我们提供好了的字段，一般我们不需要改变。</p>\n</li>\n<li><p>自定义字段：我们可以按照实际的开发需要自定义一些字段，选择字段类型，并做相关的配置，例如可以自定义开始日、等待时间等。</p>\n</li>\n<li><p>字段配置：添加并配置一种字段状态，添加的这个配置里包含所有字段，并可以单独配置每一个字段的显示隐藏、是否必填，说明文案等信息。我们可以按照不同的问题类型来配置，例如子任务的预估时间是必须填写的，这样大家在创建子任务卡片后开发时间就会都填写好。</p>\n<p><img src=\"https://img.carlwe.com/xs/filed_config.png\" alt=\"\"></p>\n<blockquote>\n<p>这里感觉字段配置功能可配的并不多，而且页面比较繁琐。</p>\n</blockquote>\n</li>\n<li><p>字段配置方案，这个就是配置一个项目的字段配置方案，我们可以将几个不同类型的问题的字段配置按需组合成一个项目的字段配置方案：</p>\n</li>\n</ol>\n<p><img src=\"https://img.carlwe.com/xs/dev_filed_scheme.png\" alt=\"\"></p>\n<p>上面这些基本的功能完成后我们就可以着手开始创建项目了：</p>\n<h2 id=\"项目及面版创建\"><a href=\"#项目及面版创建\" class=\"headerlink\" title=\"项目及面版创建\"></a>项目及面版创建</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>按照引到创建好项目：</p>\n<p><img src=\"https://img.carlwe.com/xs/create_project.png\" alt=\"\"></p>\n<blockquote>\n<p>选择创建项目</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xs/create_project_scrum.png\" alt=\"\"></p>\n<blockquote>\n<p>我们创建软件开发Scrum开发方法的项目，上面也支持Business相关项目管理、流程管理项目的创建</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xs/scrum_dev_method.png\" alt=\"\"></p>\n<blockquote>\n<p>scrum开发方法的介绍</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xs/project_backlog.png\" alt=\"\"></p>\n<blockquote>\n<p>输入项目名称后完成项目的创建，如上图会来到项目的首页Backlog中。</p>\n</blockquote>\n<p>接下来我们来介绍项目的配置以及面板的配置。</p>\n<h3 id=\"项目设置\"><a href=\"#项目设置\" class=\"headerlink\" title=\"项目设置\"></a>项目设置</h3><p>进入左下角进入项目设置页面</p>\n<p><img src=\"https://img.carlwe.com/xs/app_test_project_setting.png\" alt=\"\"></p>\n<p>除了上述提到的系统设置相关的设置外，我们需要处理下优先级、版本、模块、用户和角色。</p>\n<blockquote>\n<p>优先级：这个可以按照默认的优先级策略从P0-P4。</p>\n<p>版本：建议所有前后端研发需求都按照版本来进行规划，我们可以按照实际的版本编号在其中创建版本。</p>\n<p>模块：模块是一个固定在这里编辑的字段，可以理解为业务中划分的模块，也可以将其当作不同端的划分，例如App、小程序、web前端等端的划分。</p>\n<p>用户和角色：可以按照产品、测试、开发、UI等角色，在项目中给每一个人赋于角色，这个角色其实就是每一个人在项目中的一个属性。在后续编写脚本判断中会用到。</p>\n</blockquote>\n<h3 id=\"面板创建\"><a href=\"#面板创建\" class=\"headerlink\" title=\"面板创建\"></a>面板创建</h3><p>完成上述项目配置后开始面板的配置，要实现本文开头说的效果，主要是在面板配置中进行配置，当然，我们需要提前创建好一个面板。</p>\n<p><img src=\"https://img.carlwe.com/xs/create_scrum_board.png\" alt=\"\"></p>\n<blockquote>\n<p>按照说明，这里我们选择Scrum看板，上图已经介绍的比较清晰，对于App开发这种功能节奏和版本规划较强的项目来说，比较适合于scrum。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xs/create_scrum_with_jql.png\" alt=\"\"></p>\n<blockquote>\n<p>接着会让我们选择是依赖于一个项目还是一个筛选器，这个一般我们选择一个筛选器。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xs/naming_borad_with_jql.png\" alt=\"\"></p>\n<blockquote>\n<p>这里我们选择一个已保存的筛选器来进行项目的创建。</p>\n</blockquote>\n<p>下面介绍下筛选器JQL：</p>\n<p><img src=\"https://img.carlwe.com/xs/jira_jql_edit.png\" alt=\"\"></p>\n<blockquote>\n<p>我们可以通过筛选问题类型、状态、经办人、模块等更多字段来组成一个筛选语句，点击高级可以查看语句内容：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; project = DEV AND issuetype in (任务, 故事, 子任务) AND component = App ORDER BY 等级 ASC</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>更高级的语法可以参考：<a href=\"https://confluence.atlassian.com/jirasoftwareserver0820/advanced-searching-1095249245.html\" target=\"_blank\" rel=\"noopener\">官方文档</a> 不得不说jira做的很好，每一个版本都有自己对应的文档说明，非常清晰，后面有机会再介绍JQL的一些高级功能。</p>\n<p>创建好面板之后，我们就可以创建一个冲刺，并在冲刺中创建故事和任务。</p>\n<h3 id=\"任务创建\"><a href=\"#任务创建\" class=\"headerlink\" title=\"任务创建\"></a>任务创建</h3><p>1.创建故事：</p>\n<p><img src=\"https://img.carlwe.com/xs/jira_create_story.png\" alt=\"\"></p>\n<blockquote>\n<p>首先创建故事，需要我们完成概要、冲刺、模块、版本、经办人的填写。然后创建故事。</p>\n</blockquote>\n<p>2.创建子任务：</p>\n<p><img src=\"https://img.carlwe.com/xs/jira_create_subtask.png\" alt=\"\"></p>\n<blockquote>\n<p>在故事创建好之后，在故事详情页中可以点击创建子任务，默认出现的问题类型就是子任务，我嗯需要完成对应的概要、预估时间填写。并创建子任务。</p>\n</blockquote>\n<p>这里所有的字段及字段的顺序都是之前配置好的。那么现在就有如下的问题了：</p>\n<blockquote>\n<ul>\n<li><p>如何解决经办人、开始日、到期日等这些没办法在系统设置中设置成必填，但是实际中又是必须填写的问题呢？</p>\n</li>\n<li><p>不管是故事还是子任务，其都是一个问题，都拥有所有的字段，如果确保子任务冲刺、模块、修复的版本，这些字段直接复用主任务的字段而不用再手动填写一遍呢？</p>\n</li>\n</ul>\n</blockquote>\n<p>上述的问题我们会在后面一篇文章中进行解答，敬请期待。</p>\n<p>3.当故事和子任务都创建好之后，我们就可以查看backlog：</p>\n<p><img src=\"https://img.carlwe.com/xs/backlog_story_subtask_show.png\" alt=\"\"></p>\n<blockquote>\n<p>一般冲刺的名称按照版本好来命名，会在所有的故事和子任务创建好后开始冲刺。我们会划分好每一个单独的用户故事，并在其下创建前后端开发、测试对应的子任务卡片，以及评估需要的时间。</p>\n</blockquote>\n<p>明显这只是backlog中的展示，并没有能够达到我们之前预估的在不同的泳道展示不同的卡片的样子，接下来我们就需要点击面板，对面板的展示进行配置：</p>\n<h3 id=\"面板配置\"><a href=\"#面板配置\" class=\"headerlink\" title=\"面板配置\"></a>面板配置</h3><p><img src=\"https://img.carlwe.com/xs/jira_board_config_main.png\" alt=\"\"></p>\n<p>点击面板配置进入配置页，可以看到我们可以对面板进行多种配置，这里主要说下如下几种配置：</p>\n<ol>\n<li><p>列配置</p>\n<p><img src=\"https://img.carlwe.com/xs/jira_%20board_config_column.png\" alt=\"\"></p>\n<blockquote>\n<p>我们根据项目初始配置中的状态按照顺序来创建不同的列，并把状态拖动到其中</p>\n</blockquote>\n</li>\n<li><p>泳道配置</p>\n<p><img src=\"https://img.carlwe.com/xs/jira_board_config_yongdao.png\" alt=\"\"></p>\n<blockquote>\n<p>因为我们希望按照用户故事的维度来展示每个用户故事下不同的卡片的状态，所以这里面板的泳道配置是基于故事的，同时我们也可以选择经办人或者特定的查询。</p>\n</blockquote>\n</li>\n<li><p>卡片布局配置</p>\n<p><img src=\"https://img.carlwe.com/xs/jira_board_card_layout_edit.png\" alt=\"\"></p>\n<blockquote>\n<p>我们希望在面板上每个卡片展示其标签和初始预估就够了，那我们就可以按照我们的需求来进行特定字段的配置。</p>\n</blockquote>\n</li>\n<li><p>预估可以按照原预估时间和剩余的预估时间来展示，这样能方便看到当前卡片的进展。我们使用工作日志登记来进行卡片预估时间的消耗。后面还会提到这个。</p>\n</li>\n<li><p>问题详情视图，配置的是在面板中，我们点击卡片右侧展示的详情中需要展示的字段。这个按照不同项目重要性来配置就好。</p>\n</li>\n</ol>\n<h3 id=\"面板查看\"><a href=\"#面板查看\" class=\"headerlink\" title=\"面板查看\"></a>面板查看</h3><p>完成上述配置后，我们回道项目主页中的活动的Sprint</p>\n<p><img src=\"https://img.carlwe.com/xs/jira_board_detail.png\" alt=\"\"></p>\n<p>可以看到我们已经完成类似于之前在墙上看版的样子，每一个用户故事下方对应的就是前后端开发的卡片内容，每个卡片都有自己与之前一致的对应状态，大家每天可以看着这个面板来拖动自己的任务更新自己的任务卡片。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到这里本篇文章的介绍就结束了，本文主要介绍了jira系统配置中核心的</p>\n<blockquote>\n<ol>\n<li><p>问题类型</p>\n</li>\n<li><p>工作流</p>\n</li>\n<li><p>界面</p>\n</li>\n<li><p>字段</p>\n</li>\n</ol>\n</blockquote>\n<p>同时以还原之前下线的墙上看版的目的介绍了：</p>\n<blockquote>\n<ol>\n<li><p>项目创建</p>\n</li>\n<li><p>项目设置</p>\n</li>\n<li><p>面板创建</p>\n</li>\n<li><p>任务创建</p>\n</li>\n<li><p>面板配置</p>\n</li>\n<li><p>面板查看</p>\n</li>\n</ol>\n</blockquote>\n<p>本文介绍的知识点较多，平时用到的一些基础内容基本都在里面了。接下来的文章会回答文章的问题，以及如何让这个看版更好用的一些方法。</p>"},{"title":"浅谈Android内存优化","date":"2019-01-11T08:39:04.000Z","_content":"\n![](https://img.carlwe.com/android_memory_logo.png-h)\n\n今天我们来聊一聊Android 内存优化，这篇文章本来很早就应该写了，但因为小游戏开发太吸引人了，所以这个就拖到了现在才开始，不过我觉得也不晚😁\n<!--more-->\n\n>这篇文章主要通过如下三个方面对Android内存优化进行介绍：\n>\n>1. Android内存分配与回收机制\n>2. Android常用的内存优化方法\n>3. Android内存分析与监控\n\n文章不会涉及到native内存的优化，因为普通App开发中涉及的较少，如果想了解可以参考[极客时间](https://time.geekbang.org/column/article/71277)张绍文老师的Android开发高手课。\n\n## 一、Android内存分配与回收机制\n\n想要优化Android内存，一些必备的基础知识是不能少的。所以在第一部分，我们先从Application Framework、Dalvik/Art、Linux内核三个部分由浅入深来讲解关于Androd内存相关的知识。\n\n### Application Framework\n\n首先来看下进程的优先级：\n\n![](https://img.carlwe.com/process_priority.jpg)\n\n`前台进程`：用户当前操作所必需的进程。\n\n`可见进程`：没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。\n\n`服务进程`：正在运行已使用 startService() 方法启动的服务。（后台播放音乐，网络下载数据）\n\n`后台进程`：对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）\n\n`空进程`：不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间\n\n`进程生命周期`：Android 系统将尽量长时间地保持应用进程，但为了新建进程或运行更重要的进程，最终需要移除旧进程来回收内存。 为了确定保留或终止哪些进程，系统会根据进程中正在运行的组件以及这些组件的状态，将每个进程放入“重要性层次结构”中。 必要时，系统会首先消除重要性最低的进程，然后是重要性略高的进程，来回收系统资源。（一般情况下前台进程就是与用户交互的进程了,如果连前台进程都需要回收那么此时系统几乎不可用了）。由此也衍生了很多进程保活的方法（提高优先级，互相唤醒，native保活等等），出现各种杀不死的进程的APP。\n\n`最后我们需要知道`：Android中由ActivityManagerService 类集中管理所有进程的内存资源分配，我们可以查看其源码来具体分析实现过程。\n\n### Dalvik/Art 虚拟机\n\n#### Android Dalvik Heap\n\n![](https://img.carlwe.com/dalvik_art_gc.jpeg)\n\n`简介`：Android Dalvik Heap与原生Java一样，将堆的内存空间分为三个区域，Young Generation新生代，Old Generation年老代， Permanent Generation持久代。\n\n`对象分配过程`：最近分配的对象会存放在新生代区域，新生代区域分为eden区（伊甸园，圣经中指上帝为亚当夏娃创造的生活乐园）、so区和s1区，s1和s0区也被称为from区和to区（合称Survivor区），他们是两块大小相等并且可以互换角色的空间，绝大多数情况下,对象首先分配在eden区，在一次新生代回收后，如果对象还存活会进入s0或者s1区，之后每一次gc，存活的对象年龄都会相应增加，当达到一定年龄则会进入老年代，最后累积一定时间再移动到持久代区域。系统会根据内存中不同的内存数据类型分别执行不同的gc操作。\n\n`问题`：GC发生的时候，所有的线程都是会被暂停的。执行GC所占用的时间和它发生在哪一个Generation也有关系，新生代中的每次GC操作时间是最短的，年老代其次，持久代最长。GC时会导致线程暂停、界面卡顿的问题在Android Art中得到了优化。\n\n#### Dalvik虚拟机执行模式\n\n![](https://img.carlwe.com/dalvik_gc.jpg)\n\n`Dalvik垃圾回收过程`：GC会去标记和查找所有可访问到的活动对象，这个时候整个程序的线程就会挂起，并且虚拟机内部的所有线程也会同时挂起(左下图) 。之所以要挂起所有线程是确保：所有程序没有进行任何变更，与此同时GC会隐藏所有处理过的对象，最终确保标记了所有需要回收的对象后，GC才会恢复所有线程，并释放空间。\n\n`大内存对象分配`：当发现需要给一个较大的对象(蓝色方块)分配空间时，发现可用空间还是够的，但没有这么大的连续空间供新对象使用，这个时候就不得不进行一次GC回收（红色方块，右下图），为大对象腾出较大并且连续的空间。这就是我们在分配一个较大对象的时候非常容易引起丢帧和卡顿的原因之一，所以Android5.0以前大家都认为Android卡顿是因为Darvik虚拟机的效率低下导致的。\n\n`总结`：Dalvik虚拟机的三个问题\n\n1. GC时挂起所有线程 \n2. 大而连续的空间紧张 \n3. 内存碎片化严重\n\n#### ART虚拟机的优化\n\n![](https://img.carlwe.com/art_gc.jpg)\n\n`GC过程`：在ART中GC会要求程序在分配空间的时候标记自身的堆栈，这个过程非常短，不需要挂起所有程序的线程.这样就节约了很大一部分时间去查找活动对象。\n\n`大内存对象分配`：ART里会有一个独立的LOS供Bitmap使用，从而提高了GC的管理效率和整体性能.\n\n`内存碎片化`在ART里还会有一个moving collector来压缩活动对象(绿色方块)，使得内存空间更加紧凑。\n\n`总结` ：Google在ART里对GC做了非常大的优化(更高效的回收算法),使ART内存分配的效率提高了10倍，GC的效率提高了2-3倍（可见原来效率有多低），不过主要还是优化中断和阻塞的时间，频繁的GC还是会导致卡顿。\n\n### Linux内核\n\n![](https://img.carlwe.com/linux_kernel.jpg)\n\n`Lowmemorykiller`：ActivityManagerService中trimApplications() 函数中会执行一个叫做 updateOomAdjLocked() 的函数，updateOomAdjLocked 将针对每一个进程更新一个名为 adj 的变量，（用来表示发生内存不足时杀死进程的优先级顺序）并将其告知 Linux 内核，内核同样维护一个包含 adj 的数据结构（即进程表），并通过 lowmemorykiller 检查系统内存的使用情况，在内存不足时，遍历所有进程，选出低优先级的进程杀死，最终由内核去完成真正的内存回收。\n\n`Oom_killer` ：如果上述各种方法都无法释放出足够的内存空间，那么当为新的进程分配内存时将发生 Out of Memory 异常，OOM_killer 将尽最后的努力杀掉一些进程来释放空间。Android 中的oom_killer同样会遍历进程，并计算所有进程的 badness 值，选择 badness 最大的那个进程将其杀掉。\n\n`Oom的条件`：只要allocated + 新分配的内存 >= dalvik heap(堆内存) 最大值的时候就会发生OOM（Art运行环境的统计规则还是和dalvik保持一致）\n\n### 内存不优化会导致哪些问题？\n\n![](https://img.carlwe.com/memory_problem.jpg)\n\n上面介绍了Android内存分配从应用层到Linux层的一些知识，所以我总结出上图内存会导致的一些问题，但是上图只是列出了一些常见情况，前后并没有绝对的因果关系，最后来说下内存抖动。\n\n`内存抖动`：Memory Churn，内存抖动是因为在短时间内大量的对象被创建又马上被释放。瞬间产生大量的对象会严重占用内存区域，当达到阀值，剩余空间不够的时候，会触发GC从而导致刚产生的对象又很快被回收。即使每次分配的对象占用了很少的内存，但是他们叠加在一起会增加Heap的压力，从而触发更多其他类型的GC。这个操作有可能会影响到帧率，并使得用户感知到性能问题。\n\n## 二、Android常用的内存优化方法\n\n在Android中内存优化的方式实在是太多了，往细了说，到你写的每一行代码其实都和内存优化相关。在这里我从三个方面来说下Android内存优化的方法：\n\n>1. 降低运行时内存\n>2. 代码优化\n>3. 内存泄漏优化\n\n在实际开发中我们可以先考虑降低应用的运行时内存，然后针对代码写的不好的地方着重优化，最后通过规避一些可能导致内存泄漏的编码方式，去提前避免内存泄漏的问题。\n\n### 降低运行时内存\n\n![](https://img.carlwe.com/reduce_running_memory.jpg)\n\n降低运行时内存可以分为减小APK的体积和Bitmap优化两部分：\n\n* 减小APK体积\n\n>1. 去除无用的资源和代码，通过合理使用git，一些由于业务变更而基本不会用到的代码，该删除的绝不能手软。即使以后要用到，通过git也能找回。同时一些图片资源未用到的也应该删除，因为即使gradle配了sharkresource选项，发布的时候这些没有用到的图片依然会被打包到你的apk。\n>2. 尽量复用资源，其实这是一种比较好的编码习惯。\n>3. 对应用的启动图引导页图片进行压缩，往往这些图片占据了大部分空间，压缩后可以起到很好的效果。平时开发中对于分辨率大雨100*100的图片基本上都会进行压缩，很多好的压缩算法经常可以减少一半的大小，而感官上基本看不出有任何改变。\n\n* Bitmap优化\n\n>1. 统一的bitmap加载器，选择Glide、Fresco、Picasso中的一个作为图片加载框架。实际开发中加载到view的图片的大小不应该超过view的大小，图片加载框架默认会对图片进行缓存，按view实际大小加载。在开发中为了减少apk的大小，一般只放一套3X图片，但是这些图片在小分辨率的手机上直接加载就会出现内存浪费。统一的bitmap加载器就可以很好的解决该问题。\n>2. 图片存在像素浪费，对于.9图，美工可能在出图时在拉伸与非拉伸区域都有大量的像素重复。而这些图片是可以缩小，但并不影响显示效果。\n>3. inSampleSize:缩放比例，在把图片载入内存之前，我们需要计算一个合适的缩放比例，避免不必要的大图载入。\n>4. 选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异。\n>5. inBitmap：这个参数用来实现Bitmap内存的复用，但复用存在一些限制，具体体现在：在Android 4.4之前只能重用相同大小的Bitmap的内存，而Android 4.4及以后版本则只要后来的Bitmap比之前的小即可。使用inBitmap参数前，每创建一个Bitmap对象都会分配一块内存供其使用，而使用了inBitmap参数后，多个Bitmap可以复用一块内存，这样可以提高性能。\n\n参考：\n\nAndroid 官网文档[Managing Bitmap Memory](https://developer.android.com/topic/performance/graphics/manage-memory?hl=zh-cn)、[Handling bitmaps](https://developer.android.com/topic/performance/graphics/?hl=zh-cn)\n\n### 代码优化\n\n这里介绍一些好的编码习惯：\n\n![](https://img.carlwe.com/code_optimize.jpg)\n\n1. 考虑使用ArrayMap/SpareseArray而不是传统的HashMap等数据结构，Android系统为移动系统设计的容器ArrayMap更加高效，占用内存更少，因为HashMap需要一个额外的实例对象来记录Mapping的操作。而SparesArray高效的避免了key和value的自动装箱，而且避免了装箱后的解箱。详细参考[Android性能优化典范](http://hukai.me/android-performance-patterns-season-3/)\n\n2. 在onDraw这种频繁调用的方法要避免对象的创建操作，因为他会迅速增加内存的使用，引起频繁的gc，甚至内存抖动。\n\n3. SoftReference(软引用)、WeakReference(弱引用)、PhantomReference(虚引用)\n\n   > `SoftReference`：如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。\n   >\n   > `WeakReference`：与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。 \n   >\n   > `PhantomReference`：虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。    \n\n4. 谨慎使用large heap，android设备由于软硬件的差异，heap阀值不同，特殊情况下可以在manifest中使用`largeheap=true`声明一个更大的heap空间，使用getLargeMemoryClass()来获取到这个更大的空间。但是要谨慎使用，因为额外的空间会影响到系统整体的用户体验，切换任务时性能大打折扣，对于oom异常是治标不治本的一种做法。\n\n5. 谨慎使用多进程，使用多进程可以把应用中的部分组件运行在单独的进程当中，这样可以扩大应用的内存占用范围，但是这个技术必须谨慎使用，绝大多数应用都不应该贸然使用多进程，一方面是因为使用多进程会使得代码逻辑更加复杂，另外如果使用不当，它可能反而会导致显著增加内存。当你的应用需要运行一个常驻后台的任务，而且这个任务并不轻量，可以考虑使用这个技术，一个典型的例子是创建一个可以长时间后台播放的Music Player。如果整个应用都运行在一个进程中，当后台播放的时候，前台的那些UI资源也没有办法得到释放。类似这样的应用可以切分成2个进程：一个用来操作UI，另外一个给后台的Service。\n\n6. 考虑第三方库的大小，如果会和现有的代码或其他库的代码重复，考虑不要真个引入而是把库的代码精简之后再引入。\n\n### 内存泄漏优化\n\n内存泄漏的原因有很多，下面介绍一些常见的，我们需要在开发中多注意：\n\n![](https://img.carlwe.com/memory_leak_optimize.jpg)\n\n1. Activity调用了finish，但是引用Activity的对象未被释放(生命周期没有结束)，Activity Context被传递到其他实例中，可能导致自身被引用而发生泄露，建议使用weakReferce。\n\n2. 除必须使用Activity Context的情况(Dialog的context必须是Activity),我们可以使用Application Context来避免Activity泄露。\n\n3. 大多数情况下，我们对Bitmap对象增加缓存机制，但是有时候部分bitmap需要及时回收。比如我们临时创建的摸个相对大的bitmap对象，变换得到新的bitmap对象后，尽快回收原始的bitmap，及时释放原来的空间。\n\n4. webview引起的内存泄漏主要是因为org.chromium.android_webview.AwContents 类中注册了component callbacks，但是未正常反注册而导致的。让onDetachedFromWindow先走，在主动调用destroy()之前，把webview从它的parent上面移除掉(Basewebfragment onDestroy())\n\n5. 虽然单例模式简单实用，提供了很多便利性，但是因为单例的生命周期和应用保持一致，使用不合理很容易出现持有对象的泄漏。\n\n6. 我们在对数据库进行操作时，使用完cursor没有及时关闭，cursor的泄露，会对内存管理带来负面影响。\n\n7. 谨慎使用static对象，因为static的生命周期过长，和应用的进程保持一致，使用不当很可能导致对象泄漏。\n\n`总结`：在实际的线上环境中发现，大部分内存泄漏是因为被调用的对象生命周期不同步导致，生命周期不同步不仅仅会导致内存泄漏，更会出现异常，崩溃等更严重的问题。\n\n### 做好上面说的1、2、3就够了吗？\n\n![](https://img.carlwe.com/memory_is_enough.jpg)\n\n前面我们已经从系统级别了解了Android Framework、Darlvik/Art虚拟机、Linux在内存分配上的原理，接着又在代码级别分别从减少内存占用、避免内存泄漏和代码优化三个方面介绍了如何避免内存问题，再加上当前科技发展是如此迅速，4GB内存已经是很常见的手机配置。LPDDR4X的高速闪存也越来越被广泛的使用。对于内存优化我们是不是就已经可以高枕无忧了，有上面这些就够了吗？\n\n我想即使我们再了解内存，写的代码再好，用户的手机再先进，总还是有出错的时候，那么事后的内存分析和监控是必不可少的了！\n\n## 三、Android内存分析与监控\n\nAndroid内存分析和监控主要介绍如下四种方式：\n\n>1. 查看GC日志\n>2. 查看内存使用情况\n>3. 通过LeakCanary监控内存 泄漏\n>4. 线上监控\n\n### 查看GC日志\n\n#### GC的类型：\n\n![](https://img.carlwe.com/gc_type.jpg)\n\n`Concurrent`： 不会暂停应用线程的并发垃圾回收。此垃圾回收在后台线程中运行，而且不会阻止分配。\n\n`Alloc`： 您的应用在堆已满时尝试分配内存引起的垃圾回收。在这种情况下分配线程中发生了垃圾回收。\n\n`Explicit`：由应用明确请求的垃圾回收，例如，通过调用system.gc()。与 Dalvik 相同，在 ART 中，最佳做法是您应信任垃圾回收并避免请求显式垃圾回收（如果可能）。不建议使用显式垃圾回收，因为它们会阻止分配线程并不必要地浪费 CPU 周期。如果显式垃圾回收导致其他线程被抢占，那么它们也可能会导致卡顿（应用中出现间断、抖动或暂停）\n\n`NativeAlloc`：原生分配（如位图或 RenderScript 分配对象）导致出现原生内存压力，进而引起的回收。\n\n#### 查看垃圾回收日志\n\n![](https://img.carlwe.com/gc_log.jpg)\n\n在AndroidStudio Logcat过滤GC，然后操作App一段时间后会出现上图的GC内容：\n\n> `垃圾回收原因+垃圾回收的名称+释放对象+释放对象大小+释放大型对象的大小+堆统计数据+暂停时间`\n>\n> `LOS objects`是前面所说到的Art虚拟机新增的\n>\n> 着重关注最后面的暂停时间，超过16ms会影响界面，一般大于700ms会影响体验，Android Vitals 将连续丢帧超过 700 毫秒定义为冻帧，也就是42帧\n\n### 查看内存使用情况\n\n通过查看内存使用情况来分析App的内存占用是非常必要的，下面分别介绍如下两种方式：\n\n>1. adb shell\n>2. Profiler\n\n#### 查看内存使用情况\n\n![](https://img.carlwe.com/adb_dumpsys.jpg)\n\n详细的使用请参考AndroidDeveloper[调查RAM使用情况]( https://developer.android.com/studio/profile/investigate-ram?hl=zh-cn)\n\n#### 使用Profiler分析内存\n\nAndroidStudio的Profiler功能越来越强大，不仅集成了内存分析，还有电量、CPU、网络等数据的分析。\n\n![](https://img.carlwe.com/use_profiler.jpg)\n\n如何通过Profiler进行内存的分析，如何找到内存泄漏请查看\n\n[使用 Memory Profiler 查看 Java 堆和内存分配](https://developer.android.com/studio/profile/memory-profiler)\n\n这里要说下，Android官网的很多文章都被翻译成了中文，这对国内的开发者来说越来越有好了，但要注意中文翻译的文章会比较滞后，最新版一般都是英文。\n\n### 使用LeakCanary监控内存泄漏\n\n![](https://img.carlwe.com/leakcanary_logo.png)\n\n`LeakCanary名字的由来`：Canary是煤矿中金丝雀表达的参考，暗示了矿工将随身携带进入矿井隧道的笼养金丝雀（鸟类）。如果在矿井中收集到一氧化碳等危险气体，这些气体会在杀死矿工之前杀死金丝雀，从而提供警告立即离开隧道。\n\n`原理`：LeakCanary通过ApplicationContext统一注册监听的方式，通过application.registerActivityLifecycleCallbacks来绑定Activity生命周期的监听，从而监控所有Activity; 在Activity执行onDestroy时，开始检测当前页面是否存在内存泄漏，并分析结果。KeyedWeakReference与ReferenceQueue联合使用，在弱引用关联的对象被回收后，会将引用添加到ReferenceQueue；清空后，可以根据是否继续含有该引用来判定是否被回收；判定回收， 手动GC, 再次判定回收，采用双重判定来确保当前引用是否被回收的状态正确性；如果两次都未回收，则确定为泄漏对象。\n\n`LeakCanary的问题 `：LeakCanary也有一定的不确定性，一般同一个地方反复泄漏5次，算是一个泄漏，同时不建议用在线上环境。\n\n详细查看 [Github](https://github.com/square/leakcanary)\n\n### 线上监控\n\n线上的内存监控一般都是一些大公司在做，例如美团的[Probe](https://static001.geekbang.org/con/19/pdf/593bc30c21689.pdf)还有微信最近开源的[Matrix](https://mp.weixin.qq.com/s/muX_RgK3cXiMd4j2B0L_lA)，个人觉得这个可以去了解下，大公司用户数多时会用到，小公司App接入必要性不是很大，一般来说把上面的介绍的部分做好了就足够了。","source":"_posts/浅谈Android内存优化.md","raw":"---\ntitle: 浅谈Android内存优化\ndate: 2019-01-11 16:39:04\ntags: 技术\n---\n\n![](https://img.carlwe.com/android_memory_logo.png-h)\n\n今天我们来聊一聊Android 内存优化，这篇文章本来很早就应该写了，但因为小游戏开发太吸引人了，所以这个就拖到了现在才开始，不过我觉得也不晚😁\n<!--more-->\n\n>这篇文章主要通过如下三个方面对Android内存优化进行介绍：\n>\n>1. Android内存分配与回收机制\n>2. Android常用的内存优化方法\n>3. Android内存分析与监控\n\n文章不会涉及到native内存的优化，因为普通App开发中涉及的较少，如果想了解可以参考[极客时间](https://time.geekbang.org/column/article/71277)张绍文老师的Android开发高手课。\n\n## 一、Android内存分配与回收机制\n\n想要优化Android内存，一些必备的基础知识是不能少的。所以在第一部分，我们先从Application Framework、Dalvik/Art、Linux内核三个部分由浅入深来讲解关于Androd内存相关的知识。\n\n### Application Framework\n\n首先来看下进程的优先级：\n\n![](https://img.carlwe.com/process_priority.jpg)\n\n`前台进程`：用户当前操作所必需的进程。\n\n`可见进程`：没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。\n\n`服务进程`：正在运行已使用 startService() 方法启动的服务。（后台播放音乐，网络下载数据）\n\n`后台进程`：对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）\n\n`空进程`：不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间\n\n`进程生命周期`：Android 系统将尽量长时间地保持应用进程，但为了新建进程或运行更重要的进程，最终需要移除旧进程来回收内存。 为了确定保留或终止哪些进程，系统会根据进程中正在运行的组件以及这些组件的状态，将每个进程放入“重要性层次结构”中。 必要时，系统会首先消除重要性最低的进程，然后是重要性略高的进程，来回收系统资源。（一般情况下前台进程就是与用户交互的进程了,如果连前台进程都需要回收那么此时系统几乎不可用了）。由此也衍生了很多进程保活的方法（提高优先级，互相唤醒，native保活等等），出现各种杀不死的进程的APP。\n\n`最后我们需要知道`：Android中由ActivityManagerService 类集中管理所有进程的内存资源分配，我们可以查看其源码来具体分析实现过程。\n\n### Dalvik/Art 虚拟机\n\n#### Android Dalvik Heap\n\n![](https://img.carlwe.com/dalvik_art_gc.jpeg)\n\n`简介`：Android Dalvik Heap与原生Java一样，将堆的内存空间分为三个区域，Young Generation新生代，Old Generation年老代， Permanent Generation持久代。\n\n`对象分配过程`：最近分配的对象会存放在新生代区域，新生代区域分为eden区（伊甸园，圣经中指上帝为亚当夏娃创造的生活乐园）、so区和s1区，s1和s0区也被称为from区和to区（合称Survivor区），他们是两块大小相等并且可以互换角色的空间，绝大多数情况下,对象首先分配在eden区，在一次新生代回收后，如果对象还存活会进入s0或者s1区，之后每一次gc，存活的对象年龄都会相应增加，当达到一定年龄则会进入老年代，最后累积一定时间再移动到持久代区域。系统会根据内存中不同的内存数据类型分别执行不同的gc操作。\n\n`问题`：GC发生的时候，所有的线程都是会被暂停的。执行GC所占用的时间和它发生在哪一个Generation也有关系，新生代中的每次GC操作时间是最短的，年老代其次，持久代最长。GC时会导致线程暂停、界面卡顿的问题在Android Art中得到了优化。\n\n#### Dalvik虚拟机执行模式\n\n![](https://img.carlwe.com/dalvik_gc.jpg)\n\n`Dalvik垃圾回收过程`：GC会去标记和查找所有可访问到的活动对象，这个时候整个程序的线程就会挂起，并且虚拟机内部的所有线程也会同时挂起(左下图) 。之所以要挂起所有线程是确保：所有程序没有进行任何变更，与此同时GC会隐藏所有处理过的对象，最终确保标记了所有需要回收的对象后，GC才会恢复所有线程，并释放空间。\n\n`大内存对象分配`：当发现需要给一个较大的对象(蓝色方块)分配空间时，发现可用空间还是够的，但没有这么大的连续空间供新对象使用，这个时候就不得不进行一次GC回收（红色方块，右下图），为大对象腾出较大并且连续的空间。这就是我们在分配一个较大对象的时候非常容易引起丢帧和卡顿的原因之一，所以Android5.0以前大家都认为Android卡顿是因为Darvik虚拟机的效率低下导致的。\n\n`总结`：Dalvik虚拟机的三个问题\n\n1. GC时挂起所有线程 \n2. 大而连续的空间紧张 \n3. 内存碎片化严重\n\n#### ART虚拟机的优化\n\n![](https://img.carlwe.com/art_gc.jpg)\n\n`GC过程`：在ART中GC会要求程序在分配空间的时候标记自身的堆栈，这个过程非常短，不需要挂起所有程序的线程.这样就节约了很大一部分时间去查找活动对象。\n\n`大内存对象分配`：ART里会有一个独立的LOS供Bitmap使用，从而提高了GC的管理效率和整体性能.\n\n`内存碎片化`在ART里还会有一个moving collector来压缩活动对象(绿色方块)，使得内存空间更加紧凑。\n\n`总结` ：Google在ART里对GC做了非常大的优化(更高效的回收算法),使ART内存分配的效率提高了10倍，GC的效率提高了2-3倍（可见原来效率有多低），不过主要还是优化中断和阻塞的时间，频繁的GC还是会导致卡顿。\n\n### Linux内核\n\n![](https://img.carlwe.com/linux_kernel.jpg)\n\n`Lowmemorykiller`：ActivityManagerService中trimApplications() 函数中会执行一个叫做 updateOomAdjLocked() 的函数，updateOomAdjLocked 将针对每一个进程更新一个名为 adj 的变量，（用来表示发生内存不足时杀死进程的优先级顺序）并将其告知 Linux 内核，内核同样维护一个包含 adj 的数据结构（即进程表），并通过 lowmemorykiller 检查系统内存的使用情况，在内存不足时，遍历所有进程，选出低优先级的进程杀死，最终由内核去完成真正的内存回收。\n\n`Oom_killer` ：如果上述各种方法都无法释放出足够的内存空间，那么当为新的进程分配内存时将发生 Out of Memory 异常，OOM_killer 将尽最后的努力杀掉一些进程来释放空间。Android 中的oom_killer同样会遍历进程，并计算所有进程的 badness 值，选择 badness 最大的那个进程将其杀掉。\n\n`Oom的条件`：只要allocated + 新分配的内存 >= dalvik heap(堆内存) 最大值的时候就会发生OOM（Art运行环境的统计规则还是和dalvik保持一致）\n\n### 内存不优化会导致哪些问题？\n\n![](https://img.carlwe.com/memory_problem.jpg)\n\n上面介绍了Android内存分配从应用层到Linux层的一些知识，所以我总结出上图内存会导致的一些问题，但是上图只是列出了一些常见情况，前后并没有绝对的因果关系，最后来说下内存抖动。\n\n`内存抖动`：Memory Churn，内存抖动是因为在短时间内大量的对象被创建又马上被释放。瞬间产生大量的对象会严重占用内存区域，当达到阀值，剩余空间不够的时候，会触发GC从而导致刚产生的对象又很快被回收。即使每次分配的对象占用了很少的内存，但是他们叠加在一起会增加Heap的压力，从而触发更多其他类型的GC。这个操作有可能会影响到帧率，并使得用户感知到性能问题。\n\n## 二、Android常用的内存优化方法\n\n在Android中内存优化的方式实在是太多了，往细了说，到你写的每一行代码其实都和内存优化相关。在这里我从三个方面来说下Android内存优化的方法：\n\n>1. 降低运行时内存\n>2. 代码优化\n>3. 内存泄漏优化\n\n在实际开发中我们可以先考虑降低应用的运行时内存，然后针对代码写的不好的地方着重优化，最后通过规避一些可能导致内存泄漏的编码方式，去提前避免内存泄漏的问题。\n\n### 降低运行时内存\n\n![](https://img.carlwe.com/reduce_running_memory.jpg)\n\n降低运行时内存可以分为减小APK的体积和Bitmap优化两部分：\n\n* 减小APK体积\n\n>1. 去除无用的资源和代码，通过合理使用git，一些由于业务变更而基本不会用到的代码，该删除的绝不能手软。即使以后要用到，通过git也能找回。同时一些图片资源未用到的也应该删除，因为即使gradle配了sharkresource选项，发布的时候这些没有用到的图片依然会被打包到你的apk。\n>2. 尽量复用资源，其实这是一种比较好的编码习惯。\n>3. 对应用的启动图引导页图片进行压缩，往往这些图片占据了大部分空间，压缩后可以起到很好的效果。平时开发中对于分辨率大雨100*100的图片基本上都会进行压缩，很多好的压缩算法经常可以减少一半的大小，而感官上基本看不出有任何改变。\n\n* Bitmap优化\n\n>1. 统一的bitmap加载器，选择Glide、Fresco、Picasso中的一个作为图片加载框架。实际开发中加载到view的图片的大小不应该超过view的大小，图片加载框架默认会对图片进行缓存，按view实际大小加载。在开发中为了减少apk的大小，一般只放一套3X图片，但是这些图片在小分辨率的手机上直接加载就会出现内存浪费。统一的bitmap加载器就可以很好的解决该问题。\n>2. 图片存在像素浪费，对于.9图，美工可能在出图时在拉伸与非拉伸区域都有大量的像素重复。而这些图片是可以缩小，但并不影响显示效果。\n>3. inSampleSize:缩放比例，在把图片载入内存之前，我们需要计算一个合适的缩放比例，避免不必要的大图载入。\n>4. 选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异。\n>5. inBitmap：这个参数用来实现Bitmap内存的复用，但复用存在一些限制，具体体现在：在Android 4.4之前只能重用相同大小的Bitmap的内存，而Android 4.4及以后版本则只要后来的Bitmap比之前的小即可。使用inBitmap参数前，每创建一个Bitmap对象都会分配一块内存供其使用，而使用了inBitmap参数后，多个Bitmap可以复用一块内存，这样可以提高性能。\n\n参考：\n\nAndroid 官网文档[Managing Bitmap Memory](https://developer.android.com/topic/performance/graphics/manage-memory?hl=zh-cn)、[Handling bitmaps](https://developer.android.com/topic/performance/graphics/?hl=zh-cn)\n\n### 代码优化\n\n这里介绍一些好的编码习惯：\n\n![](https://img.carlwe.com/code_optimize.jpg)\n\n1. 考虑使用ArrayMap/SpareseArray而不是传统的HashMap等数据结构，Android系统为移动系统设计的容器ArrayMap更加高效，占用内存更少，因为HashMap需要一个额外的实例对象来记录Mapping的操作。而SparesArray高效的避免了key和value的自动装箱，而且避免了装箱后的解箱。详细参考[Android性能优化典范](http://hukai.me/android-performance-patterns-season-3/)\n\n2. 在onDraw这种频繁调用的方法要避免对象的创建操作，因为他会迅速增加内存的使用，引起频繁的gc，甚至内存抖动。\n\n3. SoftReference(软引用)、WeakReference(弱引用)、PhantomReference(虚引用)\n\n   > `SoftReference`：如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。\n   >\n   > `WeakReference`：与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。 \n   >\n   > `PhantomReference`：虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。    \n\n4. 谨慎使用large heap，android设备由于软硬件的差异，heap阀值不同，特殊情况下可以在manifest中使用`largeheap=true`声明一个更大的heap空间，使用getLargeMemoryClass()来获取到这个更大的空间。但是要谨慎使用，因为额外的空间会影响到系统整体的用户体验，切换任务时性能大打折扣，对于oom异常是治标不治本的一种做法。\n\n5. 谨慎使用多进程，使用多进程可以把应用中的部分组件运行在单独的进程当中，这样可以扩大应用的内存占用范围，但是这个技术必须谨慎使用，绝大多数应用都不应该贸然使用多进程，一方面是因为使用多进程会使得代码逻辑更加复杂，另外如果使用不当，它可能反而会导致显著增加内存。当你的应用需要运行一个常驻后台的任务，而且这个任务并不轻量，可以考虑使用这个技术，一个典型的例子是创建一个可以长时间后台播放的Music Player。如果整个应用都运行在一个进程中，当后台播放的时候，前台的那些UI资源也没有办法得到释放。类似这样的应用可以切分成2个进程：一个用来操作UI，另外一个给后台的Service。\n\n6. 考虑第三方库的大小，如果会和现有的代码或其他库的代码重复，考虑不要真个引入而是把库的代码精简之后再引入。\n\n### 内存泄漏优化\n\n内存泄漏的原因有很多，下面介绍一些常见的，我们需要在开发中多注意：\n\n![](https://img.carlwe.com/memory_leak_optimize.jpg)\n\n1. Activity调用了finish，但是引用Activity的对象未被释放(生命周期没有结束)，Activity Context被传递到其他实例中，可能导致自身被引用而发生泄露，建议使用weakReferce。\n\n2. 除必须使用Activity Context的情况(Dialog的context必须是Activity),我们可以使用Application Context来避免Activity泄露。\n\n3. 大多数情况下，我们对Bitmap对象增加缓存机制，但是有时候部分bitmap需要及时回收。比如我们临时创建的摸个相对大的bitmap对象，变换得到新的bitmap对象后，尽快回收原始的bitmap，及时释放原来的空间。\n\n4. webview引起的内存泄漏主要是因为org.chromium.android_webview.AwContents 类中注册了component callbacks，但是未正常反注册而导致的。让onDetachedFromWindow先走，在主动调用destroy()之前，把webview从它的parent上面移除掉(Basewebfragment onDestroy())\n\n5. 虽然单例模式简单实用，提供了很多便利性，但是因为单例的生命周期和应用保持一致，使用不合理很容易出现持有对象的泄漏。\n\n6. 我们在对数据库进行操作时，使用完cursor没有及时关闭，cursor的泄露，会对内存管理带来负面影响。\n\n7. 谨慎使用static对象，因为static的生命周期过长，和应用的进程保持一致，使用不当很可能导致对象泄漏。\n\n`总结`：在实际的线上环境中发现，大部分内存泄漏是因为被调用的对象生命周期不同步导致，生命周期不同步不仅仅会导致内存泄漏，更会出现异常，崩溃等更严重的问题。\n\n### 做好上面说的1、2、3就够了吗？\n\n![](https://img.carlwe.com/memory_is_enough.jpg)\n\n前面我们已经从系统级别了解了Android Framework、Darlvik/Art虚拟机、Linux在内存分配上的原理，接着又在代码级别分别从减少内存占用、避免内存泄漏和代码优化三个方面介绍了如何避免内存问题，再加上当前科技发展是如此迅速，4GB内存已经是很常见的手机配置。LPDDR4X的高速闪存也越来越被广泛的使用。对于内存优化我们是不是就已经可以高枕无忧了，有上面这些就够了吗？\n\n我想即使我们再了解内存，写的代码再好，用户的手机再先进，总还是有出错的时候，那么事后的内存分析和监控是必不可少的了！\n\n## 三、Android内存分析与监控\n\nAndroid内存分析和监控主要介绍如下四种方式：\n\n>1. 查看GC日志\n>2. 查看内存使用情况\n>3. 通过LeakCanary监控内存 泄漏\n>4. 线上监控\n\n### 查看GC日志\n\n#### GC的类型：\n\n![](https://img.carlwe.com/gc_type.jpg)\n\n`Concurrent`： 不会暂停应用线程的并发垃圾回收。此垃圾回收在后台线程中运行，而且不会阻止分配。\n\n`Alloc`： 您的应用在堆已满时尝试分配内存引起的垃圾回收。在这种情况下分配线程中发生了垃圾回收。\n\n`Explicit`：由应用明确请求的垃圾回收，例如，通过调用system.gc()。与 Dalvik 相同，在 ART 中，最佳做法是您应信任垃圾回收并避免请求显式垃圾回收（如果可能）。不建议使用显式垃圾回收，因为它们会阻止分配线程并不必要地浪费 CPU 周期。如果显式垃圾回收导致其他线程被抢占，那么它们也可能会导致卡顿（应用中出现间断、抖动或暂停）\n\n`NativeAlloc`：原生分配（如位图或 RenderScript 分配对象）导致出现原生内存压力，进而引起的回收。\n\n#### 查看垃圾回收日志\n\n![](https://img.carlwe.com/gc_log.jpg)\n\n在AndroidStudio Logcat过滤GC，然后操作App一段时间后会出现上图的GC内容：\n\n> `垃圾回收原因+垃圾回收的名称+释放对象+释放对象大小+释放大型对象的大小+堆统计数据+暂停时间`\n>\n> `LOS objects`是前面所说到的Art虚拟机新增的\n>\n> 着重关注最后面的暂停时间，超过16ms会影响界面，一般大于700ms会影响体验，Android Vitals 将连续丢帧超过 700 毫秒定义为冻帧，也就是42帧\n\n### 查看内存使用情况\n\n通过查看内存使用情况来分析App的内存占用是非常必要的，下面分别介绍如下两种方式：\n\n>1. adb shell\n>2. Profiler\n\n#### 查看内存使用情况\n\n![](https://img.carlwe.com/adb_dumpsys.jpg)\n\n详细的使用请参考AndroidDeveloper[调查RAM使用情况]( https://developer.android.com/studio/profile/investigate-ram?hl=zh-cn)\n\n#### 使用Profiler分析内存\n\nAndroidStudio的Profiler功能越来越强大，不仅集成了内存分析，还有电量、CPU、网络等数据的分析。\n\n![](https://img.carlwe.com/use_profiler.jpg)\n\n如何通过Profiler进行内存的分析，如何找到内存泄漏请查看\n\n[使用 Memory Profiler 查看 Java 堆和内存分配](https://developer.android.com/studio/profile/memory-profiler)\n\n这里要说下，Android官网的很多文章都被翻译成了中文，这对国内的开发者来说越来越有好了，但要注意中文翻译的文章会比较滞后，最新版一般都是英文。\n\n### 使用LeakCanary监控内存泄漏\n\n![](https://img.carlwe.com/leakcanary_logo.png)\n\n`LeakCanary名字的由来`：Canary是煤矿中金丝雀表达的参考，暗示了矿工将随身携带进入矿井隧道的笼养金丝雀（鸟类）。如果在矿井中收集到一氧化碳等危险气体，这些气体会在杀死矿工之前杀死金丝雀，从而提供警告立即离开隧道。\n\n`原理`：LeakCanary通过ApplicationContext统一注册监听的方式，通过application.registerActivityLifecycleCallbacks来绑定Activity生命周期的监听，从而监控所有Activity; 在Activity执行onDestroy时，开始检测当前页面是否存在内存泄漏，并分析结果。KeyedWeakReference与ReferenceQueue联合使用，在弱引用关联的对象被回收后，会将引用添加到ReferenceQueue；清空后，可以根据是否继续含有该引用来判定是否被回收；判定回收， 手动GC, 再次判定回收，采用双重判定来确保当前引用是否被回收的状态正确性；如果两次都未回收，则确定为泄漏对象。\n\n`LeakCanary的问题 `：LeakCanary也有一定的不确定性，一般同一个地方反复泄漏5次，算是一个泄漏，同时不建议用在线上环境。\n\n详细查看 [Github](https://github.com/square/leakcanary)\n\n### 线上监控\n\n线上的内存监控一般都是一些大公司在做，例如美团的[Probe](https://static001.geekbang.org/con/19/pdf/593bc30c21689.pdf)还有微信最近开源的[Matrix](https://mp.weixin.qq.com/s/muX_RgK3cXiMd4j2B0L_lA)，个人觉得这个可以去了解下，大公司用户数多时会用到，小公司App接入必要性不是很大，一般来说把上面的介绍的部分做好了就足够了。","slug":"浅谈Android内存优化","published":1,"updated":"2020-08-18T02:25:58.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnpe0016t57sjqgnurko","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/android_memory_logo.png-h\" alt=\"\"></p>\n<p>今天我们来聊一聊Android 内存优化，这篇文章本来很早就应该写了，但因为小游戏开发太吸引人了，所以这个就拖到了现在才开始，不过我觉得也不晚😁<br><a id=\"more\"></a></p>\n<blockquote>\n<p>这篇文章主要通过如下三个方面对Android内存优化进行介绍：</p>\n<ol>\n<li>Android内存分配与回收机制</li>\n<li>Android常用的内存优化方法</li>\n<li>Android内存分析与监控</li>\n</ol>\n</blockquote>\n<p>文章不会涉及到native内存的优化，因为普通App开发中涉及的较少，如果想了解可以参考<a href=\"https://time.geekbang.org/column/article/71277\" target=\"_blank\" rel=\"noopener\">极客时间</a>张绍文老师的Android开发高手课。</p>\n<h2 id=\"一、Android内存分配与回收机制\"><a href=\"#一、Android内存分配与回收机制\" class=\"headerlink\" title=\"一、Android内存分配与回收机制\"></a>一、Android内存分配与回收机制</h2><p>想要优化Android内存，一些必备的基础知识是不能少的。所以在第一部分，我们先从Application Framework、Dalvik/Art、Linux内核三个部分由浅入深来讲解关于Androd内存相关的知识。</p>\n<h3 id=\"Application-Framework\"><a href=\"#Application-Framework\" class=\"headerlink\" title=\"Application Framework\"></a>Application Framework</h3><p>首先来看下进程的优先级：</p>\n<p><img src=\"https://img.carlwe.com/process_priority.jpg\" alt=\"\"></p>\n<p><code>前台进程</code>：用户当前操作所必需的进程。</p>\n<p><code>可见进程</code>：没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。</p>\n<p><code>服务进程</code>：正在运行已使用 startService() 方法启动的服务。（后台播放音乐，网络下载数据）</p>\n<p><code>后台进程</code>：对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）</p>\n<p><code>空进程</code>：不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间</p>\n<p><code>进程生命周期</code>：Android 系统将尽量长时间地保持应用进程，但为了新建进程或运行更重要的进程，最终需要移除旧进程来回收内存。 为了确定保留或终止哪些进程，系统会根据进程中正在运行的组件以及这些组件的状态，将每个进程放入“重要性层次结构”中。 必要时，系统会首先消除重要性最低的进程，然后是重要性略高的进程，来回收系统资源。（一般情况下前台进程就是与用户交互的进程了,如果连前台进程都需要回收那么此时系统几乎不可用了）。由此也衍生了很多进程保活的方法（提高优先级，互相唤醒，native保活等等），出现各种杀不死的进程的APP。</p>\n<p><code>最后我们需要知道</code>：Android中由ActivityManagerService 类集中管理所有进程的内存资源分配，我们可以查看其源码来具体分析实现过程。</p>\n<h3 id=\"Dalvik-Art-虚拟机\"><a href=\"#Dalvik-Art-虚拟机\" class=\"headerlink\" title=\"Dalvik/Art 虚拟机\"></a>Dalvik/Art 虚拟机</h3><h4 id=\"Android-Dalvik-Heap\"><a href=\"#Android-Dalvik-Heap\" class=\"headerlink\" title=\"Android Dalvik Heap\"></a>Android Dalvik Heap</h4><p><img src=\"https://img.carlwe.com/dalvik_art_gc.jpeg\" alt=\"\"></p>\n<p><code>简介</code>：Android Dalvik Heap与原生Java一样，将堆的内存空间分为三个区域，Young Generation新生代，Old Generation年老代， Permanent Generation持久代。</p>\n<p><code>对象分配过程</code>：最近分配的对象会存放在新生代区域，新生代区域分为eden区（伊甸园，圣经中指上帝为亚当夏娃创造的生活乐园）、so区和s1区，s1和s0区也被称为from区和to区（合称Survivor区），他们是两块大小相等并且可以互换角色的空间，绝大多数情况下,对象首先分配在eden区，在一次新生代回收后，如果对象还存活会进入s0或者s1区，之后每一次gc，存活的对象年龄都会相应增加，当达到一定年龄则会进入老年代，最后累积一定时间再移动到持久代区域。系统会根据内存中不同的内存数据类型分别执行不同的gc操作。</p>\n<p><code>问题</code>：GC发生的时候，所有的线程都是会被暂停的。执行GC所占用的时间和它发生在哪一个Generation也有关系，新生代中的每次GC操作时间是最短的，年老代其次，持久代最长。GC时会导致线程暂停、界面卡顿的问题在Android Art中得到了优化。</p>\n<h4 id=\"Dalvik虚拟机执行模式\"><a href=\"#Dalvik虚拟机执行模式\" class=\"headerlink\" title=\"Dalvik虚拟机执行模式\"></a>Dalvik虚拟机执行模式</h4><p><img src=\"https://img.carlwe.com/dalvik_gc.jpg\" alt=\"\"></p>\n<p><code>Dalvik垃圾回收过程</code>：GC会去标记和查找所有可访问到的活动对象，这个时候整个程序的线程就会挂起，并且虚拟机内部的所有线程也会同时挂起(左下图) 。之所以要挂起所有线程是确保：所有程序没有进行任何变更，与此同时GC会隐藏所有处理过的对象，最终确保标记了所有需要回收的对象后，GC才会恢复所有线程，并释放空间。</p>\n<p><code>大内存对象分配</code>：当发现需要给一个较大的对象(蓝色方块)分配空间时，发现可用空间还是够的，但没有这么大的连续空间供新对象使用，这个时候就不得不进行一次GC回收（红色方块，右下图），为大对象腾出较大并且连续的空间。这就是我们在分配一个较大对象的时候非常容易引起丢帧和卡顿的原因之一，所以Android5.0以前大家都认为Android卡顿是因为Darvik虚拟机的效率低下导致的。</p>\n<p><code>总结</code>：Dalvik虚拟机的三个问题</p>\n<ol>\n<li>GC时挂起所有线程 </li>\n<li>大而连续的空间紧张 </li>\n<li>内存碎片化严重</li>\n</ol>\n<h4 id=\"ART虚拟机的优化\"><a href=\"#ART虚拟机的优化\" class=\"headerlink\" title=\"ART虚拟机的优化\"></a>ART虚拟机的优化</h4><p><img src=\"https://img.carlwe.com/art_gc.jpg\" alt=\"\"></p>\n<p><code>GC过程</code>：在ART中GC会要求程序在分配空间的时候标记自身的堆栈，这个过程非常短，不需要挂起所有程序的线程.这样就节约了很大一部分时间去查找活动对象。</p>\n<p><code>大内存对象分配</code>：ART里会有一个独立的LOS供Bitmap使用，从而提高了GC的管理效率和整体性能.</p>\n<p><code>内存碎片化</code>在ART里还会有一个moving collector来压缩活动对象(绿色方块)，使得内存空间更加紧凑。</p>\n<p><code>总结</code> ：Google在ART里对GC做了非常大的优化(更高效的回收算法),使ART内存分配的效率提高了10倍，GC的效率提高了2-3倍（可见原来效率有多低），不过主要还是优化中断和阻塞的时间，频繁的GC还是会导致卡顿。</p>\n<h3 id=\"Linux内核\"><a href=\"#Linux内核\" class=\"headerlink\" title=\"Linux内核\"></a>Linux内核</h3><p><img src=\"https://img.carlwe.com/linux_kernel.jpg\" alt=\"\"></p>\n<p><code>Lowmemorykiller</code>：ActivityManagerService中trimApplications() 函数中会执行一个叫做 updateOomAdjLocked() 的函数，updateOomAdjLocked 将针对每一个进程更新一个名为 adj 的变量，（用来表示发生内存不足时杀死进程的优先级顺序）并将其告知 Linux 内核，内核同样维护一个包含 adj 的数据结构（即进程表），并通过 lowmemorykiller 检查系统内存的使用情况，在内存不足时，遍历所有进程，选出低优先级的进程杀死，最终由内核去完成真正的内存回收。</p>\n<p><code>Oom_killer</code> ：如果上述各种方法都无法释放出足够的内存空间，那么当为新的进程分配内存时将发生 Out of Memory 异常，OOM_killer 将尽最后的努力杀掉一些进程来释放空间。Android 中的oom_killer同样会遍历进程，并计算所有进程的 badness 值，选择 badness 最大的那个进程将其杀掉。</p>\n<p><code>Oom的条件</code>：只要allocated + 新分配的内存 &gt;= dalvik heap(堆内存) 最大值的时候就会发生OOM（Art运行环境的统计规则还是和dalvik保持一致）</p>\n<h3 id=\"内存不优化会导致哪些问题？\"><a href=\"#内存不优化会导致哪些问题？\" class=\"headerlink\" title=\"内存不优化会导致哪些问题？\"></a>内存不优化会导致哪些问题？</h3><p><img src=\"https://img.carlwe.com/memory_problem.jpg\" alt=\"\"></p>\n<p>上面介绍了Android内存分配从应用层到Linux层的一些知识，所以我总结出上图内存会导致的一些问题，但是上图只是列出了一些常见情况，前后并没有绝对的因果关系，最后来说下内存抖动。</p>\n<p><code>内存抖动</code>：Memory Churn，内存抖动是因为在短时间内大量的对象被创建又马上被释放。瞬间产生大量的对象会严重占用内存区域，当达到阀值，剩余空间不够的时候，会触发GC从而导致刚产生的对象又很快被回收。即使每次分配的对象占用了很少的内存，但是他们叠加在一起会增加Heap的压力，从而触发更多其他类型的GC。这个操作有可能会影响到帧率，并使得用户感知到性能问题。</p>\n<h2 id=\"二、Android常用的内存优化方法\"><a href=\"#二、Android常用的内存优化方法\" class=\"headerlink\" title=\"二、Android常用的内存优化方法\"></a>二、Android常用的内存优化方法</h2><p>在Android中内存优化的方式实在是太多了，往细了说，到你写的每一行代码其实都和内存优化相关。在这里我从三个方面来说下Android内存优化的方法：</p>\n<blockquote>\n<ol>\n<li>降低运行时内存</li>\n<li>代码优化</li>\n<li>内存泄漏优化</li>\n</ol>\n</blockquote>\n<p>在实际开发中我们可以先考虑降低应用的运行时内存，然后针对代码写的不好的地方着重优化，最后通过规避一些可能导致内存泄漏的编码方式，去提前避免内存泄漏的问题。</p>\n<h3 id=\"降低运行时内存\"><a href=\"#降低运行时内存\" class=\"headerlink\" title=\"降低运行时内存\"></a>降低运行时内存</h3><p><img src=\"https://img.carlwe.com/reduce_running_memory.jpg\" alt=\"\"></p>\n<p>降低运行时内存可以分为减小APK的体积和Bitmap优化两部分：</p>\n<ul>\n<li>减小APK体积</li>\n</ul>\n<blockquote>\n<ol>\n<li>去除无用的资源和代码，通过合理使用git，一些由于业务变更而基本不会用到的代码，该删除的绝不能手软。即使以后要用到，通过git也能找回。同时一些图片资源未用到的也应该删除，因为即使gradle配了sharkresource选项，发布的时候这些没有用到的图片依然会被打包到你的apk。</li>\n<li>尽量复用资源，其实这是一种比较好的编码习惯。</li>\n<li>对应用的启动图引导页图片进行压缩，往往这些图片占据了大部分空间，压缩后可以起到很好的效果。平时开发中对于分辨率大雨100*100的图片基本上都会进行压缩，很多好的压缩算法经常可以减少一半的大小，而感官上基本看不出有任何改变。</li>\n</ol>\n</blockquote>\n<ul>\n<li>Bitmap优化</li>\n</ul>\n<blockquote>\n<ol>\n<li>统一的bitmap加载器，选择Glide、Fresco、Picasso中的一个作为图片加载框架。实际开发中加载到view的图片的大小不应该超过view的大小，图片加载框架默认会对图片进行缓存，按view实际大小加载。在开发中为了减少apk的大小，一般只放一套3X图片，但是这些图片在小分辨率的手机上直接加载就会出现内存浪费。统一的bitmap加载器就可以很好的解决该问题。</li>\n<li>图片存在像素浪费，对于.9图，美工可能在出图时在拉伸与非拉伸区域都有大量的像素重复。而这些图片是可以缩小，但并不影响显示效果。</li>\n<li>inSampleSize:缩放比例，在把图片载入内存之前，我们需要计算一个合适的缩放比例，避免不必要的大图载入。</li>\n<li>选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异。</li>\n<li>inBitmap：这个参数用来实现Bitmap内存的复用，但复用存在一些限制，具体体现在：在Android 4.4之前只能重用相同大小的Bitmap的内存，而Android 4.4及以后版本则只要后来的Bitmap比之前的小即可。使用inBitmap参数前，每创建一个Bitmap对象都会分配一块内存供其使用，而使用了inBitmap参数后，多个Bitmap可以复用一块内存，这样可以提高性能。</li>\n</ol>\n</blockquote>\n<p>参考：</p>\n<p>Android 官网文档<a href=\"https://developer.android.com/topic/performance/graphics/manage-memory?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Managing Bitmap Memory</a>、<a href=\"https://developer.android.com/topic/performance/graphics/?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Handling bitmaps</a></p>\n<h3 id=\"代码优化\"><a href=\"#代码优化\" class=\"headerlink\" title=\"代码优化\"></a>代码优化</h3><p>这里介绍一些好的编码习惯：</p>\n<p><img src=\"https://img.carlwe.com/code_optimize.jpg\" alt=\"\"></p>\n<ol>\n<li><p>考虑使用ArrayMap/SpareseArray而不是传统的HashMap等数据结构，Android系统为移动系统设计的容器ArrayMap更加高效，占用内存更少，因为HashMap需要一个额外的实例对象来记录Mapping的操作。而SparesArray高效的避免了key和value的自动装箱，而且避免了装箱后的解箱。详细参考<a href=\"http://hukai.me/android-performance-patterns-season-3/\" target=\"_blank\" rel=\"noopener\">Android性能优化典范</a></p>\n</li>\n<li><p>在onDraw这种频繁调用的方法要避免对象的创建操作，因为他会迅速增加内存的使用，引起频繁的gc，甚至内存抖动。</p>\n</li>\n<li><p>SoftReference(软引用)、WeakReference(弱引用)、PhantomReference(虚引用)</p>\n<blockquote>\n<p><code>SoftReference</code>：如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。</p>\n<p><code>WeakReference</code>：与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。 </p>\n<p><code>PhantomReference</code>：虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。    </p>\n</blockquote>\n</li>\n<li><p>谨慎使用large heap，android设备由于软硬件的差异，heap阀值不同，特殊情况下可以在manifest中使用<code>largeheap=true</code>声明一个更大的heap空间，使用getLargeMemoryClass()来获取到这个更大的空间。但是要谨慎使用，因为额外的空间会影响到系统整体的用户体验，切换任务时性能大打折扣，对于oom异常是治标不治本的一种做法。</p>\n</li>\n<li><p>谨慎使用多进程，使用多进程可以把应用中的部分组件运行在单独的进程当中，这样可以扩大应用的内存占用范围，但是这个技术必须谨慎使用，绝大多数应用都不应该贸然使用多进程，一方面是因为使用多进程会使得代码逻辑更加复杂，另外如果使用不当，它可能反而会导致显著增加内存。当你的应用需要运行一个常驻后台的任务，而且这个任务并不轻量，可以考虑使用这个技术，一个典型的例子是创建一个可以长时间后台播放的Music Player。如果整个应用都运行在一个进程中，当后台播放的时候，前台的那些UI资源也没有办法得到释放。类似这样的应用可以切分成2个进程：一个用来操作UI，另外一个给后台的Service。</p>\n</li>\n<li><p>考虑第三方库的大小，如果会和现有的代码或其他库的代码重复，考虑不要真个引入而是把库的代码精简之后再引入。</p>\n</li>\n</ol>\n<h3 id=\"内存泄漏优化\"><a href=\"#内存泄漏优化\" class=\"headerlink\" title=\"内存泄漏优化\"></a>内存泄漏优化</h3><p>内存泄漏的原因有很多，下面介绍一些常见的，我们需要在开发中多注意：</p>\n<p><img src=\"https://img.carlwe.com/memory_leak_optimize.jpg\" alt=\"\"></p>\n<ol>\n<li><p>Activity调用了finish，但是引用Activity的对象未被释放(生命周期没有结束)，Activity Context被传递到其他实例中，可能导致自身被引用而发生泄露，建议使用weakReferce。</p>\n</li>\n<li><p>除必须使用Activity Context的情况(Dialog的context必须是Activity),我们可以使用Application Context来避免Activity泄露。</p>\n</li>\n<li><p>大多数情况下，我们对Bitmap对象增加缓存机制，但是有时候部分bitmap需要及时回收。比如我们临时创建的摸个相对大的bitmap对象，变换得到新的bitmap对象后，尽快回收原始的bitmap，及时释放原来的空间。</p>\n</li>\n<li><p>webview引起的内存泄漏主要是因为org.chromium.android_webview.AwContents 类中注册了component callbacks，但是未正常反注册而导致的。让onDetachedFromWindow先走，在主动调用destroy()之前，把webview从它的parent上面移除掉(Basewebfragment onDestroy())</p>\n</li>\n<li><p>虽然单例模式简单实用，提供了很多便利性，但是因为单例的生命周期和应用保持一致，使用不合理很容易出现持有对象的泄漏。</p>\n</li>\n<li><p>我们在对数据库进行操作时，使用完cursor没有及时关闭，cursor的泄露，会对内存管理带来负面影响。</p>\n</li>\n<li><p>谨慎使用static对象，因为static的生命周期过长，和应用的进程保持一致，使用不当很可能导致对象泄漏。</p>\n</li>\n</ol>\n<p><code>总结</code>：在实际的线上环境中发现，大部分内存泄漏是因为被调用的对象生命周期不同步导致，生命周期不同步不仅仅会导致内存泄漏，更会出现异常，崩溃等更严重的问题。</p>\n<h3 id=\"做好上面说的1、2、3就够了吗？\"><a href=\"#做好上面说的1、2、3就够了吗？\" class=\"headerlink\" title=\"做好上面说的1、2、3就够了吗？\"></a>做好上面说的1、2、3就够了吗？</h3><p><img src=\"https://img.carlwe.com/memory_is_enough.jpg\" alt=\"\"></p>\n<p>前面我们已经从系统级别了解了Android Framework、Darlvik/Art虚拟机、Linux在内存分配上的原理，接着又在代码级别分别从减少内存占用、避免内存泄漏和代码优化三个方面介绍了如何避免内存问题，再加上当前科技发展是如此迅速，4GB内存已经是很常见的手机配置。LPDDR4X的高速闪存也越来越被广泛的使用。对于内存优化我们是不是就已经可以高枕无忧了，有上面这些就够了吗？</p>\n<p>我想即使我们再了解内存，写的代码再好，用户的手机再先进，总还是有出错的时候，那么事后的内存分析和监控是必不可少的了！</p>\n<h2 id=\"三、Android内存分析与监控\"><a href=\"#三、Android内存分析与监控\" class=\"headerlink\" title=\"三、Android内存分析与监控\"></a>三、Android内存分析与监控</h2><p>Android内存分析和监控主要介绍如下四种方式：</p>\n<blockquote>\n<ol>\n<li>查看GC日志</li>\n<li>查看内存使用情况</li>\n<li>通过LeakCanary监控内存 泄漏</li>\n<li>线上监控</li>\n</ol>\n</blockquote>\n<h3 id=\"查看GC日志\"><a href=\"#查看GC日志\" class=\"headerlink\" title=\"查看GC日志\"></a>查看GC日志</h3><h4 id=\"GC的类型：\"><a href=\"#GC的类型：\" class=\"headerlink\" title=\"GC的类型：\"></a>GC的类型：</h4><p><img src=\"https://img.carlwe.com/gc_type.jpg\" alt=\"\"></p>\n<p><code>Concurrent</code>： 不会暂停应用线程的并发垃圾回收。此垃圾回收在后台线程中运行，而且不会阻止分配。</p>\n<p><code>Alloc</code>： 您的应用在堆已满时尝试分配内存引起的垃圾回收。在这种情况下分配线程中发生了垃圾回收。</p>\n<p><code>Explicit</code>：由应用明确请求的垃圾回收，例如，通过调用system.gc()。与 Dalvik 相同，在 ART 中，最佳做法是您应信任垃圾回收并避免请求显式垃圾回收（如果可能）。不建议使用显式垃圾回收，因为它们会阻止分配线程并不必要地浪费 CPU 周期。如果显式垃圾回收导致其他线程被抢占，那么它们也可能会导致卡顿（应用中出现间断、抖动或暂停）</p>\n<p><code>NativeAlloc</code>：原生分配（如位图或 RenderScript 分配对象）导致出现原生内存压力，进而引起的回收。</p>\n<h4 id=\"查看垃圾回收日志\"><a href=\"#查看垃圾回收日志\" class=\"headerlink\" title=\"查看垃圾回收日志\"></a>查看垃圾回收日志</h4><p><img src=\"https://img.carlwe.com/gc_log.jpg\" alt=\"\"></p>\n<p>在AndroidStudio Logcat过滤GC，然后操作App一段时间后会出现上图的GC内容：</p>\n<blockquote>\n<p><code>垃圾回收原因+垃圾回收的名称+释放对象+释放对象大小+释放大型对象的大小+堆统计数据+暂停时间</code></p>\n<p><code>LOS objects</code>是前面所说到的Art虚拟机新增的</p>\n<p>着重关注最后面的暂停时间，超过16ms会影响界面，一般大于700ms会影响体验，Android Vitals 将连续丢帧超过 700 毫秒定义为冻帧，也就是42帧</p>\n</blockquote>\n<h3 id=\"查看内存使用情况\"><a href=\"#查看内存使用情况\" class=\"headerlink\" title=\"查看内存使用情况\"></a>查看内存使用情况</h3><p>通过查看内存使用情况来分析App的内存占用是非常必要的，下面分别介绍如下两种方式：</p>\n<blockquote>\n<ol>\n<li>adb shell</li>\n<li>Profiler</li>\n</ol>\n</blockquote>\n<h4 id=\"查看内存使用情况-1\"><a href=\"#查看内存使用情况-1\" class=\"headerlink\" title=\"查看内存使用情况\"></a>查看内存使用情况</h4><p><img src=\"https://img.carlwe.com/adb_dumpsys.jpg\" alt=\"\"></p>\n<p>详细的使用请参考AndroidDeveloper<a href=\"https://developer.android.com/studio/profile/investigate-ram?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">调查RAM使用情况</a></p>\n<h4 id=\"使用Profiler分析内存\"><a href=\"#使用Profiler分析内存\" class=\"headerlink\" title=\"使用Profiler分析内存\"></a>使用Profiler分析内存</h4><p>AndroidStudio的Profiler功能越来越强大，不仅集成了内存分析，还有电量、CPU、网络等数据的分析。</p>\n<p><img src=\"https://img.carlwe.com/use_profiler.jpg\" alt=\"\"></p>\n<p>如何通过Profiler进行内存的分析，如何找到内存泄漏请查看</p>\n<p><a href=\"https://developer.android.com/studio/profile/memory-profiler\" target=\"_blank\" rel=\"noopener\">使用 Memory Profiler 查看 Java 堆和内存分配</a></p>\n<p>这里要说下，Android官网的很多文章都被翻译成了中文，这对国内的开发者来说越来越有好了，但要注意中文翻译的文章会比较滞后，最新版一般都是英文。</p>\n<h3 id=\"使用LeakCanary监控内存泄漏\"><a href=\"#使用LeakCanary监控内存泄漏\" class=\"headerlink\" title=\"使用LeakCanary监控内存泄漏\"></a>使用LeakCanary监控内存泄漏</h3><p><img src=\"https://img.carlwe.com/leakcanary_logo.png\" alt=\"\"></p>\n<p><code>LeakCanary名字的由来</code>：Canary是煤矿中金丝雀表达的参考，暗示了矿工将随身携带进入矿井隧道的笼养金丝雀（鸟类）。如果在矿井中收集到一氧化碳等危险气体，这些气体会在杀死矿工之前杀死金丝雀，从而提供警告立即离开隧道。</p>\n<p><code>原理</code>：LeakCanary通过ApplicationContext统一注册监听的方式，通过application.registerActivityLifecycleCallbacks来绑定Activity生命周期的监听，从而监控所有Activity; 在Activity执行onDestroy时，开始检测当前页面是否存在内存泄漏，并分析结果。KeyedWeakReference与ReferenceQueue联合使用，在弱引用关联的对象被回收后，会将引用添加到ReferenceQueue；清空后，可以根据是否继续含有该引用来判定是否被回收；判定回收， 手动GC, 再次判定回收，采用双重判定来确保当前引用是否被回收的状态正确性；如果两次都未回收，则确定为泄漏对象。</p>\n<p><code>LeakCanary的问题</code>：LeakCanary也有一定的不确定性，一般同一个地方反复泄漏5次，算是一个泄漏，同时不建议用在线上环境。</p>\n<p>详细查看 <a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<h3 id=\"线上监控\"><a href=\"#线上监控\" class=\"headerlink\" title=\"线上监控\"></a>线上监控</h3><p>线上的内存监控一般都是一些大公司在做，例如美团的<a href=\"https://static001.geekbang.org/con/19/pdf/593bc30c21689.pdf\" target=\"_blank\" rel=\"noopener\">Probe</a>还有微信最近开源的<a href=\"https://mp.weixin.qq.com/s/muX_RgK3cXiMd4j2B0L_lA\" target=\"_blank\" rel=\"noopener\">Matrix</a>，个人觉得这个可以去了解下，大公司用户数多时会用到，小公司App接入必要性不是很大，一般来说把上面的介绍的部分做好了就足够了。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/android_memory_logo.png-h\" alt=\"\"></p>\n<p>今天我们来聊一聊Android 内存优化，这篇文章本来很早就应该写了，但因为小游戏开发太吸引人了，所以这个就拖到了现在才开始，不过我觉得也不晚😁<br>","more":"</p>\n<blockquote>\n<p>这篇文章主要通过如下三个方面对Android内存优化进行介绍：</p>\n<ol>\n<li>Android内存分配与回收机制</li>\n<li>Android常用的内存优化方法</li>\n<li>Android内存分析与监控</li>\n</ol>\n</blockquote>\n<p>文章不会涉及到native内存的优化，因为普通App开发中涉及的较少，如果想了解可以参考<a href=\"https://time.geekbang.org/column/article/71277\" target=\"_blank\" rel=\"noopener\">极客时间</a>张绍文老师的Android开发高手课。</p>\n<h2 id=\"一、Android内存分配与回收机制\"><a href=\"#一、Android内存分配与回收机制\" class=\"headerlink\" title=\"一、Android内存分配与回收机制\"></a>一、Android内存分配与回收机制</h2><p>想要优化Android内存，一些必备的基础知识是不能少的。所以在第一部分，我们先从Application Framework、Dalvik/Art、Linux内核三个部分由浅入深来讲解关于Androd内存相关的知识。</p>\n<h3 id=\"Application-Framework\"><a href=\"#Application-Framework\" class=\"headerlink\" title=\"Application Framework\"></a>Application Framework</h3><p>首先来看下进程的优先级：</p>\n<p><img src=\"https://img.carlwe.com/process_priority.jpg\" alt=\"\"></p>\n<p><code>前台进程</code>：用户当前操作所必需的进程。</p>\n<p><code>可见进程</code>：没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。</p>\n<p><code>服务进程</code>：正在运行已使用 startService() 方法启动的服务。（后台播放音乐，网络下载数据）</p>\n<p><code>后台进程</code>：对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）</p>\n<p><code>空进程</code>：不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间</p>\n<p><code>进程生命周期</code>：Android 系统将尽量长时间地保持应用进程，但为了新建进程或运行更重要的进程，最终需要移除旧进程来回收内存。 为了确定保留或终止哪些进程，系统会根据进程中正在运行的组件以及这些组件的状态，将每个进程放入“重要性层次结构”中。 必要时，系统会首先消除重要性最低的进程，然后是重要性略高的进程，来回收系统资源。（一般情况下前台进程就是与用户交互的进程了,如果连前台进程都需要回收那么此时系统几乎不可用了）。由此也衍生了很多进程保活的方法（提高优先级，互相唤醒，native保活等等），出现各种杀不死的进程的APP。</p>\n<p><code>最后我们需要知道</code>：Android中由ActivityManagerService 类集中管理所有进程的内存资源分配，我们可以查看其源码来具体分析实现过程。</p>\n<h3 id=\"Dalvik-Art-虚拟机\"><a href=\"#Dalvik-Art-虚拟机\" class=\"headerlink\" title=\"Dalvik/Art 虚拟机\"></a>Dalvik/Art 虚拟机</h3><h4 id=\"Android-Dalvik-Heap\"><a href=\"#Android-Dalvik-Heap\" class=\"headerlink\" title=\"Android Dalvik Heap\"></a>Android Dalvik Heap</h4><p><img src=\"https://img.carlwe.com/dalvik_art_gc.jpeg\" alt=\"\"></p>\n<p><code>简介</code>：Android Dalvik Heap与原生Java一样，将堆的内存空间分为三个区域，Young Generation新生代，Old Generation年老代， Permanent Generation持久代。</p>\n<p><code>对象分配过程</code>：最近分配的对象会存放在新生代区域，新生代区域分为eden区（伊甸园，圣经中指上帝为亚当夏娃创造的生活乐园）、so区和s1区，s1和s0区也被称为from区和to区（合称Survivor区），他们是两块大小相等并且可以互换角色的空间，绝大多数情况下,对象首先分配在eden区，在一次新生代回收后，如果对象还存活会进入s0或者s1区，之后每一次gc，存活的对象年龄都会相应增加，当达到一定年龄则会进入老年代，最后累积一定时间再移动到持久代区域。系统会根据内存中不同的内存数据类型分别执行不同的gc操作。</p>\n<p><code>问题</code>：GC发生的时候，所有的线程都是会被暂停的。执行GC所占用的时间和它发生在哪一个Generation也有关系，新生代中的每次GC操作时间是最短的，年老代其次，持久代最长。GC时会导致线程暂停、界面卡顿的问题在Android Art中得到了优化。</p>\n<h4 id=\"Dalvik虚拟机执行模式\"><a href=\"#Dalvik虚拟机执行模式\" class=\"headerlink\" title=\"Dalvik虚拟机执行模式\"></a>Dalvik虚拟机执行模式</h4><p><img src=\"https://img.carlwe.com/dalvik_gc.jpg\" alt=\"\"></p>\n<p><code>Dalvik垃圾回收过程</code>：GC会去标记和查找所有可访问到的活动对象，这个时候整个程序的线程就会挂起，并且虚拟机内部的所有线程也会同时挂起(左下图) 。之所以要挂起所有线程是确保：所有程序没有进行任何变更，与此同时GC会隐藏所有处理过的对象，最终确保标记了所有需要回收的对象后，GC才会恢复所有线程，并释放空间。</p>\n<p><code>大内存对象分配</code>：当发现需要给一个较大的对象(蓝色方块)分配空间时，发现可用空间还是够的，但没有这么大的连续空间供新对象使用，这个时候就不得不进行一次GC回收（红色方块，右下图），为大对象腾出较大并且连续的空间。这就是我们在分配一个较大对象的时候非常容易引起丢帧和卡顿的原因之一，所以Android5.0以前大家都认为Android卡顿是因为Darvik虚拟机的效率低下导致的。</p>\n<p><code>总结</code>：Dalvik虚拟机的三个问题</p>\n<ol>\n<li>GC时挂起所有线程 </li>\n<li>大而连续的空间紧张 </li>\n<li>内存碎片化严重</li>\n</ol>\n<h4 id=\"ART虚拟机的优化\"><a href=\"#ART虚拟机的优化\" class=\"headerlink\" title=\"ART虚拟机的优化\"></a>ART虚拟机的优化</h4><p><img src=\"https://img.carlwe.com/art_gc.jpg\" alt=\"\"></p>\n<p><code>GC过程</code>：在ART中GC会要求程序在分配空间的时候标记自身的堆栈，这个过程非常短，不需要挂起所有程序的线程.这样就节约了很大一部分时间去查找活动对象。</p>\n<p><code>大内存对象分配</code>：ART里会有一个独立的LOS供Bitmap使用，从而提高了GC的管理效率和整体性能.</p>\n<p><code>内存碎片化</code>在ART里还会有一个moving collector来压缩活动对象(绿色方块)，使得内存空间更加紧凑。</p>\n<p><code>总结</code> ：Google在ART里对GC做了非常大的优化(更高效的回收算法),使ART内存分配的效率提高了10倍，GC的效率提高了2-3倍（可见原来效率有多低），不过主要还是优化中断和阻塞的时间，频繁的GC还是会导致卡顿。</p>\n<h3 id=\"Linux内核\"><a href=\"#Linux内核\" class=\"headerlink\" title=\"Linux内核\"></a>Linux内核</h3><p><img src=\"https://img.carlwe.com/linux_kernel.jpg\" alt=\"\"></p>\n<p><code>Lowmemorykiller</code>：ActivityManagerService中trimApplications() 函数中会执行一个叫做 updateOomAdjLocked() 的函数，updateOomAdjLocked 将针对每一个进程更新一个名为 adj 的变量，（用来表示发生内存不足时杀死进程的优先级顺序）并将其告知 Linux 内核，内核同样维护一个包含 adj 的数据结构（即进程表），并通过 lowmemorykiller 检查系统内存的使用情况，在内存不足时，遍历所有进程，选出低优先级的进程杀死，最终由内核去完成真正的内存回收。</p>\n<p><code>Oom_killer</code> ：如果上述各种方法都无法释放出足够的内存空间，那么当为新的进程分配内存时将发生 Out of Memory 异常，OOM_killer 将尽最后的努力杀掉一些进程来释放空间。Android 中的oom_killer同样会遍历进程，并计算所有进程的 badness 值，选择 badness 最大的那个进程将其杀掉。</p>\n<p><code>Oom的条件</code>：只要allocated + 新分配的内存 &gt;= dalvik heap(堆内存) 最大值的时候就会发生OOM（Art运行环境的统计规则还是和dalvik保持一致）</p>\n<h3 id=\"内存不优化会导致哪些问题？\"><a href=\"#内存不优化会导致哪些问题？\" class=\"headerlink\" title=\"内存不优化会导致哪些问题？\"></a>内存不优化会导致哪些问题？</h3><p><img src=\"https://img.carlwe.com/memory_problem.jpg\" alt=\"\"></p>\n<p>上面介绍了Android内存分配从应用层到Linux层的一些知识，所以我总结出上图内存会导致的一些问题，但是上图只是列出了一些常见情况，前后并没有绝对的因果关系，最后来说下内存抖动。</p>\n<p><code>内存抖动</code>：Memory Churn，内存抖动是因为在短时间内大量的对象被创建又马上被释放。瞬间产生大量的对象会严重占用内存区域，当达到阀值，剩余空间不够的时候，会触发GC从而导致刚产生的对象又很快被回收。即使每次分配的对象占用了很少的内存，但是他们叠加在一起会增加Heap的压力，从而触发更多其他类型的GC。这个操作有可能会影响到帧率，并使得用户感知到性能问题。</p>\n<h2 id=\"二、Android常用的内存优化方法\"><a href=\"#二、Android常用的内存优化方法\" class=\"headerlink\" title=\"二、Android常用的内存优化方法\"></a>二、Android常用的内存优化方法</h2><p>在Android中内存优化的方式实在是太多了，往细了说，到你写的每一行代码其实都和内存优化相关。在这里我从三个方面来说下Android内存优化的方法：</p>\n<blockquote>\n<ol>\n<li>降低运行时内存</li>\n<li>代码优化</li>\n<li>内存泄漏优化</li>\n</ol>\n</blockquote>\n<p>在实际开发中我们可以先考虑降低应用的运行时内存，然后针对代码写的不好的地方着重优化，最后通过规避一些可能导致内存泄漏的编码方式，去提前避免内存泄漏的问题。</p>\n<h3 id=\"降低运行时内存\"><a href=\"#降低运行时内存\" class=\"headerlink\" title=\"降低运行时内存\"></a>降低运行时内存</h3><p><img src=\"https://img.carlwe.com/reduce_running_memory.jpg\" alt=\"\"></p>\n<p>降低运行时内存可以分为减小APK的体积和Bitmap优化两部分：</p>\n<ul>\n<li>减小APK体积</li>\n</ul>\n<blockquote>\n<ol>\n<li>去除无用的资源和代码，通过合理使用git，一些由于业务变更而基本不会用到的代码，该删除的绝不能手软。即使以后要用到，通过git也能找回。同时一些图片资源未用到的也应该删除，因为即使gradle配了sharkresource选项，发布的时候这些没有用到的图片依然会被打包到你的apk。</li>\n<li>尽量复用资源，其实这是一种比较好的编码习惯。</li>\n<li>对应用的启动图引导页图片进行压缩，往往这些图片占据了大部分空间，压缩后可以起到很好的效果。平时开发中对于分辨率大雨100*100的图片基本上都会进行压缩，很多好的压缩算法经常可以减少一半的大小，而感官上基本看不出有任何改变。</li>\n</ol>\n</blockquote>\n<ul>\n<li>Bitmap优化</li>\n</ul>\n<blockquote>\n<ol>\n<li>统一的bitmap加载器，选择Glide、Fresco、Picasso中的一个作为图片加载框架。实际开发中加载到view的图片的大小不应该超过view的大小，图片加载框架默认会对图片进行缓存，按view实际大小加载。在开发中为了减少apk的大小，一般只放一套3X图片，但是这些图片在小分辨率的手机上直接加载就会出现内存浪费。统一的bitmap加载器就可以很好的解决该问题。</li>\n<li>图片存在像素浪费，对于.9图，美工可能在出图时在拉伸与非拉伸区域都有大量的像素重复。而这些图片是可以缩小，但并不影响显示效果。</li>\n<li>inSampleSize:缩放比例，在把图片载入内存之前，我们需要计算一个合适的缩放比例，避免不必要的大图载入。</li>\n<li>选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异。</li>\n<li>inBitmap：这个参数用来实现Bitmap内存的复用，但复用存在一些限制，具体体现在：在Android 4.4之前只能重用相同大小的Bitmap的内存，而Android 4.4及以后版本则只要后来的Bitmap比之前的小即可。使用inBitmap参数前，每创建一个Bitmap对象都会分配一块内存供其使用，而使用了inBitmap参数后，多个Bitmap可以复用一块内存，这样可以提高性能。</li>\n</ol>\n</blockquote>\n<p>参考：</p>\n<p>Android 官网文档<a href=\"https://developer.android.com/topic/performance/graphics/manage-memory?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Managing Bitmap Memory</a>、<a href=\"https://developer.android.com/topic/performance/graphics/?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Handling bitmaps</a></p>\n<h3 id=\"代码优化\"><a href=\"#代码优化\" class=\"headerlink\" title=\"代码优化\"></a>代码优化</h3><p>这里介绍一些好的编码习惯：</p>\n<p><img src=\"https://img.carlwe.com/code_optimize.jpg\" alt=\"\"></p>\n<ol>\n<li><p>考虑使用ArrayMap/SpareseArray而不是传统的HashMap等数据结构，Android系统为移动系统设计的容器ArrayMap更加高效，占用内存更少，因为HashMap需要一个额外的实例对象来记录Mapping的操作。而SparesArray高效的避免了key和value的自动装箱，而且避免了装箱后的解箱。详细参考<a href=\"http://hukai.me/android-performance-patterns-season-3/\" target=\"_blank\" rel=\"noopener\">Android性能优化典范</a></p>\n</li>\n<li><p>在onDraw这种频繁调用的方法要避免对象的创建操作，因为他会迅速增加内存的使用，引起频繁的gc，甚至内存抖动。</p>\n</li>\n<li><p>SoftReference(软引用)、WeakReference(弱引用)、PhantomReference(虚引用)</p>\n<blockquote>\n<p><code>SoftReference</code>：如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。</p>\n<p><code>WeakReference</code>：与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。 </p>\n<p><code>PhantomReference</code>：虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。    </p>\n</blockquote>\n</li>\n<li><p>谨慎使用large heap，android设备由于软硬件的差异，heap阀值不同，特殊情况下可以在manifest中使用<code>largeheap=true</code>声明一个更大的heap空间，使用getLargeMemoryClass()来获取到这个更大的空间。但是要谨慎使用，因为额外的空间会影响到系统整体的用户体验，切换任务时性能大打折扣，对于oom异常是治标不治本的一种做法。</p>\n</li>\n<li><p>谨慎使用多进程，使用多进程可以把应用中的部分组件运行在单独的进程当中，这样可以扩大应用的内存占用范围，但是这个技术必须谨慎使用，绝大多数应用都不应该贸然使用多进程，一方面是因为使用多进程会使得代码逻辑更加复杂，另外如果使用不当，它可能反而会导致显著增加内存。当你的应用需要运行一个常驻后台的任务，而且这个任务并不轻量，可以考虑使用这个技术，一个典型的例子是创建一个可以长时间后台播放的Music Player。如果整个应用都运行在一个进程中，当后台播放的时候，前台的那些UI资源也没有办法得到释放。类似这样的应用可以切分成2个进程：一个用来操作UI，另外一个给后台的Service。</p>\n</li>\n<li><p>考虑第三方库的大小，如果会和现有的代码或其他库的代码重复，考虑不要真个引入而是把库的代码精简之后再引入。</p>\n</li>\n</ol>\n<h3 id=\"内存泄漏优化\"><a href=\"#内存泄漏优化\" class=\"headerlink\" title=\"内存泄漏优化\"></a>内存泄漏优化</h3><p>内存泄漏的原因有很多，下面介绍一些常见的，我们需要在开发中多注意：</p>\n<p><img src=\"https://img.carlwe.com/memory_leak_optimize.jpg\" alt=\"\"></p>\n<ol>\n<li><p>Activity调用了finish，但是引用Activity的对象未被释放(生命周期没有结束)，Activity Context被传递到其他实例中，可能导致自身被引用而发生泄露，建议使用weakReferce。</p>\n</li>\n<li><p>除必须使用Activity Context的情况(Dialog的context必须是Activity),我们可以使用Application Context来避免Activity泄露。</p>\n</li>\n<li><p>大多数情况下，我们对Bitmap对象增加缓存机制，但是有时候部分bitmap需要及时回收。比如我们临时创建的摸个相对大的bitmap对象，变换得到新的bitmap对象后，尽快回收原始的bitmap，及时释放原来的空间。</p>\n</li>\n<li><p>webview引起的内存泄漏主要是因为org.chromium.android_webview.AwContents 类中注册了component callbacks，但是未正常反注册而导致的。让onDetachedFromWindow先走，在主动调用destroy()之前，把webview从它的parent上面移除掉(Basewebfragment onDestroy())</p>\n</li>\n<li><p>虽然单例模式简单实用，提供了很多便利性，但是因为单例的生命周期和应用保持一致，使用不合理很容易出现持有对象的泄漏。</p>\n</li>\n<li><p>我们在对数据库进行操作时，使用完cursor没有及时关闭，cursor的泄露，会对内存管理带来负面影响。</p>\n</li>\n<li><p>谨慎使用static对象，因为static的生命周期过长，和应用的进程保持一致，使用不当很可能导致对象泄漏。</p>\n</li>\n</ol>\n<p><code>总结</code>：在实际的线上环境中发现，大部分内存泄漏是因为被调用的对象生命周期不同步导致，生命周期不同步不仅仅会导致内存泄漏，更会出现异常，崩溃等更严重的问题。</p>\n<h3 id=\"做好上面说的1、2、3就够了吗？\"><a href=\"#做好上面说的1、2、3就够了吗？\" class=\"headerlink\" title=\"做好上面说的1、2、3就够了吗？\"></a>做好上面说的1、2、3就够了吗？</h3><p><img src=\"https://img.carlwe.com/memory_is_enough.jpg\" alt=\"\"></p>\n<p>前面我们已经从系统级别了解了Android Framework、Darlvik/Art虚拟机、Linux在内存分配上的原理，接着又在代码级别分别从减少内存占用、避免内存泄漏和代码优化三个方面介绍了如何避免内存问题，再加上当前科技发展是如此迅速，4GB内存已经是很常见的手机配置。LPDDR4X的高速闪存也越来越被广泛的使用。对于内存优化我们是不是就已经可以高枕无忧了，有上面这些就够了吗？</p>\n<p>我想即使我们再了解内存，写的代码再好，用户的手机再先进，总还是有出错的时候，那么事后的内存分析和监控是必不可少的了！</p>\n<h2 id=\"三、Android内存分析与监控\"><a href=\"#三、Android内存分析与监控\" class=\"headerlink\" title=\"三、Android内存分析与监控\"></a>三、Android内存分析与监控</h2><p>Android内存分析和监控主要介绍如下四种方式：</p>\n<blockquote>\n<ol>\n<li>查看GC日志</li>\n<li>查看内存使用情况</li>\n<li>通过LeakCanary监控内存 泄漏</li>\n<li>线上监控</li>\n</ol>\n</blockquote>\n<h3 id=\"查看GC日志\"><a href=\"#查看GC日志\" class=\"headerlink\" title=\"查看GC日志\"></a>查看GC日志</h3><h4 id=\"GC的类型：\"><a href=\"#GC的类型：\" class=\"headerlink\" title=\"GC的类型：\"></a>GC的类型：</h4><p><img src=\"https://img.carlwe.com/gc_type.jpg\" alt=\"\"></p>\n<p><code>Concurrent</code>： 不会暂停应用线程的并发垃圾回收。此垃圾回收在后台线程中运行，而且不会阻止分配。</p>\n<p><code>Alloc</code>： 您的应用在堆已满时尝试分配内存引起的垃圾回收。在这种情况下分配线程中发生了垃圾回收。</p>\n<p><code>Explicit</code>：由应用明确请求的垃圾回收，例如，通过调用system.gc()。与 Dalvik 相同，在 ART 中，最佳做法是您应信任垃圾回收并避免请求显式垃圾回收（如果可能）。不建议使用显式垃圾回收，因为它们会阻止分配线程并不必要地浪费 CPU 周期。如果显式垃圾回收导致其他线程被抢占，那么它们也可能会导致卡顿（应用中出现间断、抖动或暂停）</p>\n<p><code>NativeAlloc</code>：原生分配（如位图或 RenderScript 分配对象）导致出现原生内存压力，进而引起的回收。</p>\n<h4 id=\"查看垃圾回收日志\"><a href=\"#查看垃圾回收日志\" class=\"headerlink\" title=\"查看垃圾回收日志\"></a>查看垃圾回收日志</h4><p><img src=\"https://img.carlwe.com/gc_log.jpg\" alt=\"\"></p>\n<p>在AndroidStudio Logcat过滤GC，然后操作App一段时间后会出现上图的GC内容：</p>\n<blockquote>\n<p><code>垃圾回收原因+垃圾回收的名称+释放对象+释放对象大小+释放大型对象的大小+堆统计数据+暂停时间</code></p>\n<p><code>LOS objects</code>是前面所说到的Art虚拟机新增的</p>\n<p>着重关注最后面的暂停时间，超过16ms会影响界面，一般大于700ms会影响体验，Android Vitals 将连续丢帧超过 700 毫秒定义为冻帧，也就是42帧</p>\n</blockquote>\n<h3 id=\"查看内存使用情况\"><a href=\"#查看内存使用情况\" class=\"headerlink\" title=\"查看内存使用情况\"></a>查看内存使用情况</h3><p>通过查看内存使用情况来分析App的内存占用是非常必要的，下面分别介绍如下两种方式：</p>\n<blockquote>\n<ol>\n<li>adb shell</li>\n<li>Profiler</li>\n</ol>\n</blockquote>\n<h4 id=\"查看内存使用情况-1\"><a href=\"#查看内存使用情况-1\" class=\"headerlink\" title=\"查看内存使用情况\"></a>查看内存使用情况</h4><p><img src=\"https://img.carlwe.com/adb_dumpsys.jpg\" alt=\"\"></p>\n<p>详细的使用请参考AndroidDeveloper<a href=\"https://developer.android.com/studio/profile/investigate-ram?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">调查RAM使用情况</a></p>\n<h4 id=\"使用Profiler分析内存\"><a href=\"#使用Profiler分析内存\" class=\"headerlink\" title=\"使用Profiler分析内存\"></a>使用Profiler分析内存</h4><p>AndroidStudio的Profiler功能越来越强大，不仅集成了内存分析，还有电量、CPU、网络等数据的分析。</p>\n<p><img src=\"https://img.carlwe.com/use_profiler.jpg\" alt=\"\"></p>\n<p>如何通过Profiler进行内存的分析，如何找到内存泄漏请查看</p>\n<p><a href=\"https://developer.android.com/studio/profile/memory-profiler\" target=\"_blank\" rel=\"noopener\">使用 Memory Profiler 查看 Java 堆和内存分配</a></p>\n<p>这里要说下，Android官网的很多文章都被翻译成了中文，这对国内的开发者来说越来越有好了，但要注意中文翻译的文章会比较滞后，最新版一般都是英文。</p>\n<h3 id=\"使用LeakCanary监控内存泄漏\"><a href=\"#使用LeakCanary监控内存泄漏\" class=\"headerlink\" title=\"使用LeakCanary监控内存泄漏\"></a>使用LeakCanary监控内存泄漏</h3><p><img src=\"https://img.carlwe.com/leakcanary_logo.png\" alt=\"\"></p>\n<p><code>LeakCanary名字的由来</code>：Canary是煤矿中金丝雀表达的参考，暗示了矿工将随身携带进入矿井隧道的笼养金丝雀（鸟类）。如果在矿井中收集到一氧化碳等危险气体，这些气体会在杀死矿工之前杀死金丝雀，从而提供警告立即离开隧道。</p>\n<p><code>原理</code>：LeakCanary通过ApplicationContext统一注册监听的方式，通过application.registerActivityLifecycleCallbacks来绑定Activity生命周期的监听，从而监控所有Activity; 在Activity执行onDestroy时，开始检测当前页面是否存在内存泄漏，并分析结果。KeyedWeakReference与ReferenceQueue联合使用，在弱引用关联的对象被回收后，会将引用添加到ReferenceQueue；清空后，可以根据是否继续含有该引用来判定是否被回收；判定回收， 手动GC, 再次判定回收，采用双重判定来确保当前引用是否被回收的状态正确性；如果两次都未回收，则确定为泄漏对象。</p>\n<p><code>LeakCanary的问题</code>：LeakCanary也有一定的不确定性，一般同一个地方反复泄漏5次，算是一个泄漏，同时不建议用在线上环境。</p>\n<p>详细查看 <a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<h3 id=\"线上监控\"><a href=\"#线上监控\" class=\"headerlink\" title=\"线上监控\"></a>线上监控</h3><p>线上的内存监控一般都是一些大公司在做，例如美团的<a href=\"https://static001.geekbang.org/con/19/pdf/593bc30c21689.pdf\" target=\"_blank\" rel=\"noopener\">Probe</a>还有微信最近开源的<a href=\"https://mp.weixin.qq.com/s/muX_RgK3cXiMd4j2B0L_lA\" target=\"_blank\" rel=\"noopener\">Matrix</a>，个人觉得这个可以去了解下，大公司用户数多时会用到，小公司App接入必要性不是很大，一般来说把上面的介绍的部分做好了就足够了。</p>"},{"title":"神奇的黄金分割比","date":"2019-07-24T00:29:16.000Z","mathjax":true,"_content":"\n![](https://img.carlwe.com/goden_ratio_logo.jpg-h)\n\n<!--more-->\n\n说到黄金分割比大家可能都知道是0.618\n\n## 黄金分割的由来\n\n### 毕达哥拉斯与铁匠\n\n说到黄金分割，不得不提的一个人就是毕达哥拉斯，在古希腊时期（大约公元前6世纪）数学家毕达哥拉斯（他发现了勾股定理）有一天他走在大街上，经过一家铁匠铺前，被铁匠打铁的声音所吸引，他驻足仔细观察后发现。铁匠打铁很有规律，一重一轻来来回回，后来他回家后就把发现用数学的方式表达出来了。当两次打铁的间隔当接近一个比例的时候是最协调和省力的。因为缺乏详细的推导和证明，真正意义的记载是在大约300年之后。\n\n### 欧几里得的《几何原本》\n\n时间来到了300年之后，公元前3世纪，古希腊数学家的欧几里得在吸收了前人欧多克索斯的研究成果（比例理论）后，进一步系统的论述了黄金分割。使得其成为了最早记载黄金分割的论著。\n\n### 计算0.618\n\n上面介绍了历史上黄金分割的一些故事，那黄金分割0.618到底是如何计算出来的呢？下面我们首先来看下面这个操作，将斐波拉切数列（当前数等于前两个数之和）的相邻两项求比例。\n\n| 序号 | 斐波拉切 | 比例（当前数/后面数） |\n| :--: | :------: | :-------------------: |\n|  1   |    1     |           1           |\n|  2   |    1     |          0.5          |\n|  3   |    2     |         0.666         |\n|  4   |    3     |          0.6          |\n|  5   |    5     |         0.625         |\n|  6   |    8     |        0.6153         |\n|  7   |    13    |        0.6190         |\n|  8   |    21    |        0.6176         |\n|  9   |    34    |        0.61818        |\n|  10  |    55    |       0.617897        |\n|  11  |    89    |       0.618055        |\n\n 我们可以看到越往后这个比例会越来越接近一个数，这个数是一个无限不循环小数，它其实就是黄金分割数，为了方便大家取0.618代表黄金分割。\n\n**黄金分割数是如何定义的呢？**\n\n简单的斐波拉切数列竟然和黄金分割有着如此强烈的联系，不经让人感叹数学之美，上面计算黄金分割的例子着实巧妙，那到底黄金分割是如何定义的呢？下面我们就来看看。\n\n顾名思义黄金分割就是将一个东西进行最完美的分割，使得分割之后看起来最协调，进行分割的这个点在整体上看起来也最协调。那么就认为分割的这个点是黄金分割点，分割之后的两段称之比就是黄金分割数，这里从数学上简单的推导下：\n\n定义一条线段a，在线段上找一个点X，将线段分为长短不同的两部分，分别为b、c，如果较短的一段和较长的那段的长度比，等于较长的和整体的长度的比，那么这个点就是我们想要的黄金分割点。\n\n![](https://img.carlwe.com/caculate_golden_ratio.png-s)\n\n通过上面的关系描述我们可以得到如下比例：\n\n $\\frac bc = \\frac ca$  我们把a的长度设置为1，c的长度设为x，则b的长度为1-x。\n\n带入后有：$ \\frac{1-x}x =\\frac{x}1  $，求出c的长度x即求出了黄金分割比。求解后 x = $\\frac{\\sqrt 5 -1}2$ $\\approx$ 0.618\n\n这样我们就简单的从定义上得到了黄金分割比。\n\n**黄金分割矩形应运而生！**\n\n上面讲到了黄金分割是如何定义和计算的，我们了解到了线段上有个点是看上去很和谐的，那么一个矩形长什么样看起来最和谐呢？我们首先来看看下面三个矩形：\n\n![](https://img.carlwe.com/golden_rect.png)\n\n如果让你选一个看起来最好看的矩形（长方形），你会选哪个？\n\n首先第一个看起来和正方形比较相近，需要认真看一下才知道这是一个稍微偏向于长方形的形状，然后再来看看第三个，一眼就能看出是一个长方形，但是因为太长了，长比宽大很多，显得太细长，美观上就差了好多，所以如果我们选一个一眼就能看出是一个矩形，并且看起来又很协调的，那么这个矩形的样子（长宽比）应该是一个比较固定的形状，这个美观的矩形的长宽比如果正好是黄金分割数的时候其实看起来是最协调的。下面这个例子可以得到一个黄金分割矩形：\n\n![](https://img.carlwe.com/my_golden_rect.png)\n\n> 1.取正方形ABCD底边AB中点E,连接EC。\n>\n> 2.以E为圆心EC为半径顺时针画弧，交AB延长线于F点。\n>\n> 3.补全矩形AFGD，则矩形AFGD为黄金分割矩形， $ \\frac{ GF}{AF}$ =  $\\frac{\\sqrt 5 -1}2$\n\n通过上述一顿简单的操作黄金分割矩形出现了！\n\n**黄金螺旋又是怎么回事？**\n\n顾名思义螺旋就是一条曲线不断的往里旋转形成螺旋状。上面我们已经了解了黄金矩形是如何形成的，那么我们通过黄金矩形来看看黄金螺旋是如何产生的。\n\n![](https://img.carlwe.com/golden_screw_fix.png)\n\n我们依旧使用上面的黄金矩形，操作步骤如下：\n\n> 1.截取黄金矩形左边或者上面的部分使其是一个正方形。\n>\n> 2.以正方形边长为半径，正方形顶点为圆心画圆。\n>\n> 3.将分割之后剩下的矩形进行分割，生成新的正方形，重复上述步骤，让连续的两段圆弧相连。\n\n即可得到上述的一段螺旋弧线，这样的螺旋弧线称之为黄金螺旋。\n\n黄金分割点、黄金矩形、黄金螺旋在实际生活中都有着广泛的应用。\n\n## 寻找黄金分割\n\n这部分我们来寻找在生活中存在的黄金分割比，时间从远古到到现代依次展现。\n\n### 自然界中的黄金分割\n\n![](https://img.carlwe.com/yingwuluo.jpg)\n\n> 上面讲到了黄金螺旋，自然界中最接近黄金螺旋的生物莫过于鹦鹉螺，可以和上面的黄金螺旋图进行对比，是不是发现很像呢！\n\n![](https://img.carlwe.com/xiangrikui.jpg)\n\n> 我们熟知的向日葵有89个花辫，55个朝一方，34个朝向另一方。这三个数有没有很熟悉，可以向上👆再看看斐波拉切数列～\n\n其实自然界中的黄金分割还有很多，例如植物中的黄金角度，各种植物叶子的生长规律中自然隐藏着黄金数，像枫叶、喷嚏麦、松果、银河系的星系螺旋、飓风、动物的身体等等都蕴含着很多黄金分割。所以人们逐渐把自然界中的黄金分割运用到了实际的生产生活中，下面看看历史中的黄金分割。\n\n### 历史上的黄金分割\n\n![](https://img.carlwe.com/jinzita.jpg)\n\n> 金字塔建造于公元前25世纪，比我们上面说到的毕达哥拉斯和欧几里得早了2000多年，但是这里面竟然也存在着极其精确的黄金分割数。金字塔的底边长为230.37米，侧面三角形的高为186.5米，底边长/（侧面三角形的高*2）=0.618。也许先人在那个时候就真的有高度的数学文明呢！\n\n![](https://img.carlwe.com/weinasi_mengnalisha.jpg)\n\n>在欧洲文艺复兴时期很多艺术作品中也蕴含着丰富的黄金分割。左图中的断臂维纳斯，从肚脐一下的部分占整个身高的比例就是0.618。如果大家也是这个比例说明身材的很匀称～\n>\n>右侧是达芬奇很著名的画作《蒙娜丽莎的微笑》，图中蒙娜丽莎的脸型是黄金矩形，头宽和肩宽的比例是黄金分割比，同时上图也可以看出黄金螺旋的运用。\n\n###黄金分割在当下\n\n上面介绍了自然界和历史中的黄金分割，让我们来看看现代设计中的黄金分割：\n\n![](https://img.carlwe.com/moden_building.jpg)\n\n>左图中埃菲尔铁塔的第二层平台位置刚好设计在了黄金分割点上，看起来很协调。\n>\n>右图中的东方明珠为了建筑的协调性，在黄金分割点上增加了一个圆球使得整个建筑看起来更美观。\n\n![](https://img.carlwe.com/apple_logo.png)\n\n> 我们所熟知的苹果的logo的设计也运用了黄金螺旋，如果仔细观察，很多其他品牌的logo也或多或少的运用了黄金分割。\n\n![](https://img.carlwe.com/twitter_ipad.jpg)\n\n> 在App的页面设计中也会有很多黄金分割的运用。上图是Twitter的iPad版本。\n\n其实现实生活中还有很多黄金分割的体现：\n\n> * 例如显示器（macbook pro 2560*1600）手机（魅族MX2、三星Note 的1280**800，但后来手机变得越来越长...）的屏幕比例为16:10接近黄金矩形。\n> * 黄金螺旋形状的旋转楼梯。\n> * 巴托克音乐的高潮恰好在黄金分割点上。\n> * 武器装备上，美远征军阿尔文·约克改良后枪身和枪把的比例恰恰符合0.618的比例；成吉思汗手下的蒙古骑兵中：人盔马甲的重骑兵和快捷灵动轻骑兵的比例为2:3；在现代战争中，第一梯队的兵力约占总兵力的2/3。\n\n## 黄金分割的应用\n\n那么最后再来讲讲我们生活中可以运用黄金分割的其他例子吧！\n\n### 摄影构图\n\n在摄影构图中有一个比较重要的理论就是三分法构图：让画面中想要突出的主体放在画面三分之一的位置。在风景拍摄中，让地景和天空的分割线在三分之一的位置会显得比较协调。这种构图方式也叫黄金分割构图法。来看看我之前拍的两张照片：\n\n![](https://img.carlwe.com/IMG_20180319_073536_HDR.jpg)\n\n> 画面中池塘，苍山和天空，大概分别占三分之一的位置。看上去会显得比较匀称。\n\n![](https://img.carlwe.com/golden_ratio_in_composition.jpg)\n\n> 这张照片拍摄于惠州大甲岛，将海上的小岛置于画面的左下三分之一的位置，不会影响这个画面的感官，同时又会显得比较协调，并且海面和天空也在分割线上。\n\n### 股票分析\n\n![](https://img.carlwe.com/bodun_theory.jpg)\n\n> 美国证券分析家拉尔夫·.纳尔逊·.艾略特（R.N.Elliott）利用道琼斯工业平均指数作为研究工具，发现不断变化的股价结构性形态反映了自然和谐之美，发现市场走势不断重复一种模式，每一周期由5个上升浪和3个下跌浪组成。\n>\n> \"艾略特波浪理论\"是股票技术分析中的一个重要流派，其中的波浪三原则其一就是黄金分割原则。\n>\n> 在这里，我们将通过它的指导买卖股票。画黄金分割线的第一步是记住若干个特殊的数字：0.382、0.618、1.382、1.618最为重要，股价极为容易在由这四个数产生的黄金分割线处产生支撑和压力。\n\n我找到了小米的股票K线图，让我们来看看小米在历史上股票的高点和低点之间的比例：\n\n![](https://img.carlwe.com/xiaomi_in_bodun.png)\n\n> 在18年12月份左右达到来15.16的高位，然后下跌，到19年1月份来到了9.44的低位，通过计算这次下跌了37.7% 和波浪理论中的0.382很接近。\n\n但是这个理论只是揭示大部分时候的可能性，个人觉得这个理论只能做一个参考。\n\n## 总结\n\n好了，本文先从黄金分割的由来，讲到了自然界和生活中的黄金分割例子，最后从摄影构图和股票分析两个方面介绍了黄金分割的实际运用。后面如果发现更有意思的黄金分割应用还会继续补充，有任何问题欢迎留言。","source":"_posts/神奇的黄金分割比.md","raw":"---\ntitle: 神奇的黄金分割比\ndate: 2019-07-24 08:29:16\ntags: 科技\nmathjax: true\n---\n\n![](https://img.carlwe.com/goden_ratio_logo.jpg-h)\n\n<!--more-->\n\n说到黄金分割比大家可能都知道是0.618\n\n## 黄金分割的由来\n\n### 毕达哥拉斯与铁匠\n\n说到黄金分割，不得不提的一个人就是毕达哥拉斯，在古希腊时期（大约公元前6世纪）数学家毕达哥拉斯（他发现了勾股定理）有一天他走在大街上，经过一家铁匠铺前，被铁匠打铁的声音所吸引，他驻足仔细观察后发现。铁匠打铁很有规律，一重一轻来来回回，后来他回家后就把发现用数学的方式表达出来了。当两次打铁的间隔当接近一个比例的时候是最协调和省力的。因为缺乏详细的推导和证明，真正意义的记载是在大约300年之后。\n\n### 欧几里得的《几何原本》\n\n时间来到了300年之后，公元前3世纪，古希腊数学家的欧几里得在吸收了前人欧多克索斯的研究成果（比例理论）后，进一步系统的论述了黄金分割。使得其成为了最早记载黄金分割的论著。\n\n### 计算0.618\n\n上面介绍了历史上黄金分割的一些故事，那黄金分割0.618到底是如何计算出来的呢？下面我们首先来看下面这个操作，将斐波拉切数列（当前数等于前两个数之和）的相邻两项求比例。\n\n| 序号 | 斐波拉切 | 比例（当前数/后面数） |\n| :--: | :------: | :-------------------: |\n|  1   |    1     |           1           |\n|  2   |    1     |          0.5          |\n|  3   |    2     |         0.666         |\n|  4   |    3     |          0.6          |\n|  5   |    5     |         0.625         |\n|  6   |    8     |        0.6153         |\n|  7   |    13    |        0.6190         |\n|  8   |    21    |        0.6176         |\n|  9   |    34    |        0.61818        |\n|  10  |    55    |       0.617897        |\n|  11  |    89    |       0.618055        |\n\n 我们可以看到越往后这个比例会越来越接近一个数，这个数是一个无限不循环小数，它其实就是黄金分割数，为了方便大家取0.618代表黄金分割。\n\n**黄金分割数是如何定义的呢？**\n\n简单的斐波拉切数列竟然和黄金分割有着如此强烈的联系，不经让人感叹数学之美，上面计算黄金分割的例子着实巧妙，那到底黄金分割是如何定义的呢？下面我们就来看看。\n\n顾名思义黄金分割就是将一个东西进行最完美的分割，使得分割之后看起来最协调，进行分割的这个点在整体上看起来也最协调。那么就认为分割的这个点是黄金分割点，分割之后的两段称之比就是黄金分割数，这里从数学上简单的推导下：\n\n定义一条线段a，在线段上找一个点X，将线段分为长短不同的两部分，分别为b、c，如果较短的一段和较长的那段的长度比，等于较长的和整体的长度的比，那么这个点就是我们想要的黄金分割点。\n\n![](https://img.carlwe.com/caculate_golden_ratio.png-s)\n\n通过上面的关系描述我们可以得到如下比例：\n\n $\\frac bc = \\frac ca$  我们把a的长度设置为1，c的长度设为x，则b的长度为1-x。\n\n带入后有：$ \\frac{1-x}x =\\frac{x}1  $，求出c的长度x即求出了黄金分割比。求解后 x = $\\frac{\\sqrt 5 -1}2$ $\\approx$ 0.618\n\n这样我们就简单的从定义上得到了黄金分割比。\n\n**黄金分割矩形应运而生！**\n\n上面讲到了黄金分割是如何定义和计算的，我们了解到了线段上有个点是看上去很和谐的，那么一个矩形长什么样看起来最和谐呢？我们首先来看看下面三个矩形：\n\n![](https://img.carlwe.com/golden_rect.png)\n\n如果让你选一个看起来最好看的矩形（长方形），你会选哪个？\n\n首先第一个看起来和正方形比较相近，需要认真看一下才知道这是一个稍微偏向于长方形的形状，然后再来看看第三个，一眼就能看出是一个长方形，但是因为太长了，长比宽大很多，显得太细长，美观上就差了好多，所以如果我们选一个一眼就能看出是一个矩形，并且看起来又很协调的，那么这个矩形的样子（长宽比）应该是一个比较固定的形状，这个美观的矩形的长宽比如果正好是黄金分割数的时候其实看起来是最协调的。下面这个例子可以得到一个黄金分割矩形：\n\n![](https://img.carlwe.com/my_golden_rect.png)\n\n> 1.取正方形ABCD底边AB中点E,连接EC。\n>\n> 2.以E为圆心EC为半径顺时针画弧，交AB延长线于F点。\n>\n> 3.补全矩形AFGD，则矩形AFGD为黄金分割矩形， $ \\frac{ GF}{AF}$ =  $\\frac{\\sqrt 5 -1}2$\n\n通过上述一顿简单的操作黄金分割矩形出现了！\n\n**黄金螺旋又是怎么回事？**\n\n顾名思义螺旋就是一条曲线不断的往里旋转形成螺旋状。上面我们已经了解了黄金矩形是如何形成的，那么我们通过黄金矩形来看看黄金螺旋是如何产生的。\n\n![](https://img.carlwe.com/golden_screw_fix.png)\n\n我们依旧使用上面的黄金矩形，操作步骤如下：\n\n> 1.截取黄金矩形左边或者上面的部分使其是一个正方形。\n>\n> 2.以正方形边长为半径，正方形顶点为圆心画圆。\n>\n> 3.将分割之后剩下的矩形进行分割，生成新的正方形，重复上述步骤，让连续的两段圆弧相连。\n\n即可得到上述的一段螺旋弧线，这样的螺旋弧线称之为黄金螺旋。\n\n黄金分割点、黄金矩形、黄金螺旋在实际生活中都有着广泛的应用。\n\n## 寻找黄金分割\n\n这部分我们来寻找在生活中存在的黄金分割比，时间从远古到到现代依次展现。\n\n### 自然界中的黄金分割\n\n![](https://img.carlwe.com/yingwuluo.jpg)\n\n> 上面讲到了黄金螺旋，自然界中最接近黄金螺旋的生物莫过于鹦鹉螺，可以和上面的黄金螺旋图进行对比，是不是发现很像呢！\n\n![](https://img.carlwe.com/xiangrikui.jpg)\n\n> 我们熟知的向日葵有89个花辫，55个朝一方，34个朝向另一方。这三个数有没有很熟悉，可以向上👆再看看斐波拉切数列～\n\n其实自然界中的黄金分割还有很多，例如植物中的黄金角度，各种植物叶子的生长规律中自然隐藏着黄金数，像枫叶、喷嚏麦、松果、银河系的星系螺旋、飓风、动物的身体等等都蕴含着很多黄金分割。所以人们逐渐把自然界中的黄金分割运用到了实际的生产生活中，下面看看历史中的黄金分割。\n\n### 历史上的黄金分割\n\n![](https://img.carlwe.com/jinzita.jpg)\n\n> 金字塔建造于公元前25世纪，比我们上面说到的毕达哥拉斯和欧几里得早了2000多年，但是这里面竟然也存在着极其精确的黄金分割数。金字塔的底边长为230.37米，侧面三角形的高为186.5米，底边长/（侧面三角形的高*2）=0.618。也许先人在那个时候就真的有高度的数学文明呢！\n\n![](https://img.carlwe.com/weinasi_mengnalisha.jpg)\n\n>在欧洲文艺复兴时期很多艺术作品中也蕴含着丰富的黄金分割。左图中的断臂维纳斯，从肚脐一下的部分占整个身高的比例就是0.618。如果大家也是这个比例说明身材的很匀称～\n>\n>右侧是达芬奇很著名的画作《蒙娜丽莎的微笑》，图中蒙娜丽莎的脸型是黄金矩形，头宽和肩宽的比例是黄金分割比，同时上图也可以看出黄金螺旋的运用。\n\n###黄金分割在当下\n\n上面介绍了自然界和历史中的黄金分割，让我们来看看现代设计中的黄金分割：\n\n![](https://img.carlwe.com/moden_building.jpg)\n\n>左图中埃菲尔铁塔的第二层平台位置刚好设计在了黄金分割点上，看起来很协调。\n>\n>右图中的东方明珠为了建筑的协调性，在黄金分割点上增加了一个圆球使得整个建筑看起来更美观。\n\n![](https://img.carlwe.com/apple_logo.png)\n\n> 我们所熟知的苹果的logo的设计也运用了黄金螺旋，如果仔细观察，很多其他品牌的logo也或多或少的运用了黄金分割。\n\n![](https://img.carlwe.com/twitter_ipad.jpg)\n\n> 在App的页面设计中也会有很多黄金分割的运用。上图是Twitter的iPad版本。\n\n其实现实生活中还有很多黄金分割的体现：\n\n> * 例如显示器（macbook pro 2560*1600）手机（魅族MX2、三星Note 的1280**800，但后来手机变得越来越长...）的屏幕比例为16:10接近黄金矩形。\n> * 黄金螺旋形状的旋转楼梯。\n> * 巴托克音乐的高潮恰好在黄金分割点上。\n> * 武器装备上，美远征军阿尔文·约克改良后枪身和枪把的比例恰恰符合0.618的比例；成吉思汗手下的蒙古骑兵中：人盔马甲的重骑兵和快捷灵动轻骑兵的比例为2:3；在现代战争中，第一梯队的兵力约占总兵力的2/3。\n\n## 黄金分割的应用\n\n那么最后再来讲讲我们生活中可以运用黄金分割的其他例子吧！\n\n### 摄影构图\n\n在摄影构图中有一个比较重要的理论就是三分法构图：让画面中想要突出的主体放在画面三分之一的位置。在风景拍摄中，让地景和天空的分割线在三分之一的位置会显得比较协调。这种构图方式也叫黄金分割构图法。来看看我之前拍的两张照片：\n\n![](https://img.carlwe.com/IMG_20180319_073536_HDR.jpg)\n\n> 画面中池塘，苍山和天空，大概分别占三分之一的位置。看上去会显得比较匀称。\n\n![](https://img.carlwe.com/golden_ratio_in_composition.jpg)\n\n> 这张照片拍摄于惠州大甲岛，将海上的小岛置于画面的左下三分之一的位置，不会影响这个画面的感官，同时又会显得比较协调，并且海面和天空也在分割线上。\n\n### 股票分析\n\n![](https://img.carlwe.com/bodun_theory.jpg)\n\n> 美国证券分析家拉尔夫·.纳尔逊·.艾略特（R.N.Elliott）利用道琼斯工业平均指数作为研究工具，发现不断变化的股价结构性形态反映了自然和谐之美，发现市场走势不断重复一种模式，每一周期由5个上升浪和3个下跌浪组成。\n>\n> \"艾略特波浪理论\"是股票技术分析中的一个重要流派，其中的波浪三原则其一就是黄金分割原则。\n>\n> 在这里，我们将通过它的指导买卖股票。画黄金分割线的第一步是记住若干个特殊的数字：0.382、0.618、1.382、1.618最为重要，股价极为容易在由这四个数产生的黄金分割线处产生支撑和压力。\n\n我找到了小米的股票K线图，让我们来看看小米在历史上股票的高点和低点之间的比例：\n\n![](https://img.carlwe.com/xiaomi_in_bodun.png)\n\n> 在18年12月份左右达到来15.16的高位，然后下跌，到19年1月份来到了9.44的低位，通过计算这次下跌了37.7% 和波浪理论中的0.382很接近。\n\n但是这个理论只是揭示大部分时候的可能性，个人觉得这个理论只能做一个参考。\n\n## 总结\n\n好了，本文先从黄金分割的由来，讲到了自然界和生活中的黄金分割例子，最后从摄影构图和股票分析两个方面介绍了黄金分割的实际运用。后面如果发现更有意思的黄金分割应用还会继续补充，有任何问题欢迎留言。","slug":"神奇的黄金分割比","published":1,"updated":"2020-08-18T02:25:58.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnpg0018t57sy030c26u","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/goden_ratio_logo.jpg-h\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>说到黄金分割比大家可能都知道是0.618</p>\n<h2 id=\"黄金分割的由来\"><a href=\"#黄金分割的由来\" class=\"headerlink\" title=\"黄金分割的由来\"></a>黄金分割的由来</h2><h3 id=\"毕达哥拉斯与铁匠\"><a href=\"#毕达哥拉斯与铁匠\" class=\"headerlink\" title=\"毕达哥拉斯与铁匠\"></a>毕达哥拉斯与铁匠</h3><p>说到黄金分割，不得不提的一个人就是毕达哥拉斯，在古希腊时期（大约公元前6世纪）数学家毕达哥拉斯（他发现了勾股定理）有一天他走在大街上，经过一家铁匠铺前，被铁匠打铁的声音所吸引，他驻足仔细观察后发现。铁匠打铁很有规律，一重一轻来来回回，后来他回家后就把发现用数学的方式表达出来了。当两次打铁的间隔当接近一个比例的时候是最协调和省力的。因为缺乏详细的推导和证明，真正意义的记载是在大约300年之后。</p>\n<h3 id=\"欧几里得的《几何原本》\"><a href=\"#欧几里得的《几何原本》\" class=\"headerlink\" title=\"欧几里得的《几何原本》\"></a>欧几里得的《几何原本》</h3><p>时间来到了300年之后，公元前3世纪，古希腊数学家的欧几里得在吸收了前人欧多克索斯的研究成果（比例理论）后，进一步系统的论述了黄金分割。使得其成为了最早记载黄金分割的论著。</p>\n<h3 id=\"计算0-618\"><a href=\"#计算0-618\" class=\"headerlink\" title=\"计算0.618\"></a>计算0.618</h3><p>上面介绍了历史上黄金分割的一些故事，那黄金分割0.618到底是如何计算出来的呢？下面我们首先来看下面这个操作，将斐波拉切数列（当前数等于前两个数之和）的相邻两项求比例。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">斐波拉切</th>\n<th style=\"text-align:center\">比例（当前数/后面数）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0.5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0.666</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">0.6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">0.625</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">0.6153</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\">0.6190</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">21</td>\n<td style=\"text-align:center\">0.6176</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">34</td>\n<td style=\"text-align:center\">0.61818</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">55</td>\n<td style=\"text-align:center\">0.617897</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\">89</td>\n<td style=\"text-align:center\">0.618055</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p> 我们可以看到越往后这个比例会越来越接近一个数，这个数是一个无限不循环小数，它其实就是黄金分割数，为了方便大家取0.618代表黄金分割。</p>\n<p><strong>黄金分割数是如何定义的呢？</strong></p>\n<p>简单的斐波拉切数列竟然和黄金分割有着如此强烈的联系，不经让人感叹数学之美，上面计算黄金分割的例子着实巧妙，那到底黄金分割是如何定义的呢？下面我们就来看看。</p>\n<p>顾名思义黄金分割就是将一个东西进行最完美的分割，使得分割之后看起来最协调，进行分割的这个点在整体上看起来也最协调。那么就认为分割的这个点是黄金分割点，分割之后的两段称之比就是黄金分割数，这里从数学上简单的推导下：</p>\n<p>定义一条线段a，在线段上找一个点X，将线段分为长短不同的两部分，分别为b、c，如果较短的一段和较长的那段的长度比，等于较长的和整体的长度的比，那么这个点就是我们想要的黄金分割点。</p>\n<p><img src=\"https://img.carlwe.com/caculate_golden_ratio.png-s\" alt=\"\"></p>\n<p>通过上面的关系描述我们可以得到如下比例：</p>\n<p> $\\frac bc = \\frac ca$  我们把a的长度设置为1，c的长度设为x，则b的长度为1-x。</p>\n<p>带入后有：$ \\frac{1-x}x =\\frac{x}1  $，求出c的长度x即求出了黄金分割比。求解后 x = $\\frac{\\sqrt 5 -1}2$ $\\approx$ 0.618</p>\n<p>这样我们就简单的从定义上得到了黄金分割比。</p>\n<p><strong>黄金分割矩形应运而生！</strong></p>\n<p>上面讲到了黄金分割是如何定义和计算的，我们了解到了线段上有个点是看上去很和谐的，那么一个矩形长什么样看起来最和谐呢？我们首先来看看下面三个矩形：</p>\n<p><img src=\"https://img.carlwe.com/golden_rect.png\" alt=\"\"></p>\n<p>如果让你选一个看起来最好看的矩形（长方形），你会选哪个？</p>\n<p>首先第一个看起来和正方形比较相近，需要认真看一下才知道这是一个稍微偏向于长方形的形状，然后再来看看第三个，一眼就能看出是一个长方形，但是因为太长了，长比宽大很多，显得太细长，美观上就差了好多，所以如果我们选一个一眼就能看出是一个矩形，并且看起来又很协调的，那么这个矩形的样子（长宽比）应该是一个比较固定的形状，这个美观的矩形的长宽比如果正好是黄金分割数的时候其实看起来是最协调的。下面这个例子可以得到一个黄金分割矩形：</p>\n<p><img src=\"https://img.carlwe.com/my_golden_rect.png\" alt=\"\"></p>\n<blockquote>\n<p>1.取正方形ABCD底边AB中点E,连接EC。</p>\n<p>2.以E为圆心EC为半径顺时针画弧，交AB延长线于F点。</p>\n<p>3.补全矩形AFGD，则矩形AFGD为黄金分割矩形， $ \\frac{ GF}{AF}$ =  $\\frac{\\sqrt 5 -1}2$</p>\n</blockquote>\n<p>通过上述一顿简单的操作黄金分割矩形出现了！</p>\n<p><strong>黄金螺旋又是怎么回事？</strong></p>\n<p>顾名思义螺旋就是一条曲线不断的往里旋转形成螺旋状。上面我们已经了解了黄金矩形是如何形成的，那么我们通过黄金矩形来看看黄金螺旋是如何产生的。</p>\n<p><img src=\"https://img.carlwe.com/golden_screw_fix.png\" alt=\"\"></p>\n<p>我们依旧使用上面的黄金矩形，操作步骤如下：</p>\n<blockquote>\n<p>1.截取黄金矩形左边或者上面的部分使其是一个正方形。</p>\n<p>2.以正方形边长为半径，正方形顶点为圆心画圆。</p>\n<p>3.将分割之后剩下的矩形进行分割，生成新的正方形，重复上述步骤，让连续的两段圆弧相连。</p>\n</blockquote>\n<p>即可得到上述的一段螺旋弧线，这样的螺旋弧线称之为黄金螺旋。</p>\n<p>黄金分割点、黄金矩形、黄金螺旋在实际生活中都有着广泛的应用。</p>\n<h2 id=\"寻找黄金分割\"><a href=\"#寻找黄金分割\" class=\"headerlink\" title=\"寻找黄金分割\"></a>寻找黄金分割</h2><p>这部分我们来寻找在生活中存在的黄金分割比，时间从远古到到现代依次展现。</p>\n<h3 id=\"自然界中的黄金分割\"><a href=\"#自然界中的黄金分割\" class=\"headerlink\" title=\"自然界中的黄金分割\"></a>自然界中的黄金分割</h3><p><img src=\"https://img.carlwe.com/yingwuluo.jpg\" alt=\"\"></p>\n<blockquote>\n<p>上面讲到了黄金螺旋，自然界中最接近黄金螺旋的生物莫过于鹦鹉螺，可以和上面的黄金螺旋图进行对比，是不是发现很像呢！</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xiangrikui.jpg\" alt=\"\"></p>\n<blockquote>\n<p>我们熟知的向日葵有89个花辫，55个朝一方，34个朝向另一方。这三个数有没有很熟悉，可以向上👆再看看斐波拉切数列～</p>\n</blockquote>\n<p>其实自然界中的黄金分割还有很多，例如植物中的黄金角度，各种植物叶子的生长规律中自然隐藏着黄金数，像枫叶、喷嚏麦、松果、银河系的星系螺旋、飓风、动物的身体等等都蕴含着很多黄金分割。所以人们逐渐把自然界中的黄金分割运用到了实际的生产生活中，下面看看历史中的黄金分割。</p>\n<h3 id=\"历史上的黄金分割\"><a href=\"#历史上的黄金分割\" class=\"headerlink\" title=\"历史上的黄金分割\"></a>历史上的黄金分割</h3><p><img src=\"https://img.carlwe.com/jinzita.jpg\" alt=\"\"></p>\n<blockquote>\n<p>金字塔建造于公元前25世纪，比我们上面说到的毕达哥拉斯和欧几里得早了2000多年，但是这里面竟然也存在着极其精确的黄金分割数。金字塔的底边长为230.37米，侧面三角形的高为186.5米，底边长/（侧面三角形的高*2）=0.618。也许先人在那个时候就真的有高度的数学文明呢！</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/weinasi_mengnalisha.jpg\" alt=\"\"></p>\n<blockquote>\n<p>在欧洲文艺复兴时期很多艺术作品中也蕴含着丰富的黄金分割。左图中的断臂维纳斯，从肚脐一下的部分占整个身高的比例就是0.618。如果大家也是这个比例说明身材的很匀称～</p>\n<p>右侧是达芬奇很著名的画作《蒙娜丽莎的微笑》，图中蒙娜丽莎的脸型是黄金矩形，头宽和肩宽的比例是黄金分割比，同时上图也可以看出黄金螺旋的运用。</p>\n</blockquote>\n<h3 id=\"黄金分割在当下\"><a href=\"#黄金分割在当下\" class=\"headerlink\" title=\"黄金分割在当下\"></a>黄金分割在当下</h3><p>上面介绍了自然界和历史中的黄金分割，让我们来看看现代设计中的黄金分割：</p>\n<p><img src=\"https://img.carlwe.com/moden_building.jpg\" alt=\"\"></p>\n<blockquote>\n<p>左图中埃菲尔铁塔的第二层平台位置刚好设计在了黄金分割点上，看起来很协调。</p>\n<p>右图中的东方明珠为了建筑的协调性，在黄金分割点上增加了一个圆球使得整个建筑看起来更美观。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/apple_logo.png\" alt=\"\"></p>\n<blockquote>\n<p>我们所熟知的苹果的logo的设计也运用了黄金螺旋，如果仔细观察，很多其他品牌的logo也或多或少的运用了黄金分割。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/twitter_ipad.jpg\" alt=\"\"></p>\n<blockquote>\n<p>在App的页面设计中也会有很多黄金分割的运用。上图是Twitter的iPad版本。</p>\n</blockquote>\n<p>其实现实生活中还有很多黄金分割的体现：</p>\n<blockquote>\n<ul>\n<li>例如显示器（macbook pro 2560<em>1600）手机（魅族MX2、三星Note 的1280*</em>800，但后来手机变得越来越长…）的屏幕比例为16:10接近黄金矩形。</li>\n<li>黄金螺旋形状的旋转楼梯。</li>\n<li>巴托克音乐的高潮恰好在黄金分割点上。</li>\n<li>武器装备上，美远征军阿尔文·约克改良后枪身和枪把的比例恰恰符合0.618的比例；成吉思汗手下的蒙古骑兵中：人盔马甲的重骑兵和快捷灵动轻骑兵的比例为2:3；在现代战争中，第一梯队的兵力约占总兵力的2/3。</li>\n</ul>\n</blockquote>\n<h2 id=\"黄金分割的应用\"><a href=\"#黄金分割的应用\" class=\"headerlink\" title=\"黄金分割的应用\"></a>黄金分割的应用</h2><p>那么最后再来讲讲我们生活中可以运用黄金分割的其他例子吧！</p>\n<h3 id=\"摄影构图\"><a href=\"#摄影构图\" class=\"headerlink\" title=\"摄影构图\"></a>摄影构图</h3><p>在摄影构图中有一个比较重要的理论就是三分法构图：让画面中想要突出的主体放在画面三分之一的位置。在风景拍摄中，让地景和天空的分割线在三分之一的位置会显得比较协调。这种构图方式也叫黄金分割构图法。来看看我之前拍的两张照片：</p>\n<p><img src=\"https://img.carlwe.com/IMG_20180319_073536_HDR.jpg\" alt=\"\"></p>\n<blockquote>\n<p>画面中池塘，苍山和天空，大概分别占三分之一的位置。看上去会显得比较匀称。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/golden_ratio_in_composition.jpg\" alt=\"\"></p>\n<blockquote>\n<p>这张照片拍摄于惠州大甲岛，将海上的小岛置于画面的左下三分之一的位置，不会影响这个画面的感官，同时又会显得比较协调，并且海面和天空也在分割线上。</p>\n</blockquote>\n<h3 id=\"股票分析\"><a href=\"#股票分析\" class=\"headerlink\" title=\"股票分析\"></a>股票分析</h3><p><img src=\"https://img.carlwe.com/bodun_theory.jpg\" alt=\"\"></p>\n<blockquote>\n<p>美国证券分析家拉尔夫·.纳尔逊·.艾略特（R.N.Elliott）利用道琼斯工业平均指数作为研究工具，发现不断变化的股价结构性形态反映了自然和谐之美，发现市场走势不断重复一种模式，每一周期由5个上升浪和3个下跌浪组成。</p>\n<p>“艾略特波浪理论”是股票技术分析中的一个重要流派，其中的波浪三原则其一就是黄金分割原则。</p>\n<p>在这里，我们将通过它的指导买卖股票。画黄金分割线的第一步是记住若干个特殊的数字：0.382、0.618、1.382、1.618最为重要，股价极为容易在由这四个数产生的黄金分割线处产生支撑和压力。</p>\n</blockquote>\n<p>我找到了小米的股票K线图，让我们来看看小米在历史上股票的高点和低点之间的比例：</p>\n<p><img src=\"https://img.carlwe.com/xiaomi_in_bodun.png\" alt=\"\"></p>\n<blockquote>\n<p>在18年12月份左右达到来15.16的高位，然后下跌，到19年1月份来到了9.44的低位，通过计算这次下跌了37.7% 和波浪理论中的0.382很接近。</p>\n</blockquote>\n<p>但是这个理论只是揭示大部分时候的可能性，个人觉得这个理论只能做一个参考。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好了，本文先从黄金分割的由来，讲到了自然界和生活中的黄金分割例子，最后从摄影构图和股票分析两个方面介绍了黄金分割的实际运用。后面如果发现更有意思的黄金分割应用还会继续补充，有任何问题欢迎留言。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/goden_ratio_logo.jpg-h\" alt=\"\"></p>","more":"<p>说到黄金分割比大家可能都知道是0.618</p>\n<h2 id=\"黄金分割的由来\"><a href=\"#黄金分割的由来\" class=\"headerlink\" title=\"黄金分割的由来\"></a>黄金分割的由来</h2><h3 id=\"毕达哥拉斯与铁匠\"><a href=\"#毕达哥拉斯与铁匠\" class=\"headerlink\" title=\"毕达哥拉斯与铁匠\"></a>毕达哥拉斯与铁匠</h3><p>说到黄金分割，不得不提的一个人就是毕达哥拉斯，在古希腊时期（大约公元前6世纪）数学家毕达哥拉斯（他发现了勾股定理）有一天他走在大街上，经过一家铁匠铺前，被铁匠打铁的声音所吸引，他驻足仔细观察后发现。铁匠打铁很有规律，一重一轻来来回回，后来他回家后就把发现用数学的方式表达出来了。当两次打铁的间隔当接近一个比例的时候是最协调和省力的。因为缺乏详细的推导和证明，真正意义的记载是在大约300年之后。</p>\n<h3 id=\"欧几里得的《几何原本》\"><a href=\"#欧几里得的《几何原本》\" class=\"headerlink\" title=\"欧几里得的《几何原本》\"></a>欧几里得的《几何原本》</h3><p>时间来到了300年之后，公元前3世纪，古希腊数学家的欧几里得在吸收了前人欧多克索斯的研究成果（比例理论）后，进一步系统的论述了黄金分割。使得其成为了最早记载黄金分割的论著。</p>\n<h3 id=\"计算0-618\"><a href=\"#计算0-618\" class=\"headerlink\" title=\"计算0.618\"></a>计算0.618</h3><p>上面介绍了历史上黄金分割的一些故事，那黄金分割0.618到底是如何计算出来的呢？下面我们首先来看下面这个操作，将斐波拉切数列（当前数等于前两个数之和）的相邻两项求比例。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">斐波拉切</th>\n<th style=\"text-align:center\">比例（当前数/后面数）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0.5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0.666</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">0.6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">0.625</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">0.6153</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\">0.6190</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">21</td>\n<td style=\"text-align:center\">0.6176</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">34</td>\n<td style=\"text-align:center\">0.61818</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">55</td>\n<td style=\"text-align:center\">0.617897</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\">89</td>\n<td style=\"text-align:center\">0.618055</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p> 我们可以看到越往后这个比例会越来越接近一个数，这个数是一个无限不循环小数，它其实就是黄金分割数，为了方便大家取0.618代表黄金分割。</p>\n<p><strong>黄金分割数是如何定义的呢？</strong></p>\n<p>简单的斐波拉切数列竟然和黄金分割有着如此强烈的联系，不经让人感叹数学之美，上面计算黄金分割的例子着实巧妙，那到底黄金分割是如何定义的呢？下面我们就来看看。</p>\n<p>顾名思义黄金分割就是将一个东西进行最完美的分割，使得分割之后看起来最协调，进行分割的这个点在整体上看起来也最协调。那么就认为分割的这个点是黄金分割点，分割之后的两段称之比就是黄金分割数，这里从数学上简单的推导下：</p>\n<p>定义一条线段a，在线段上找一个点X，将线段分为长短不同的两部分，分别为b、c，如果较短的一段和较长的那段的长度比，等于较长的和整体的长度的比，那么这个点就是我们想要的黄金分割点。</p>\n<p><img src=\"https://img.carlwe.com/caculate_golden_ratio.png-s\" alt=\"\"></p>\n<p>通过上面的关系描述我们可以得到如下比例：</p>\n<p> $\\frac bc = \\frac ca$  我们把a的长度设置为1，c的长度设为x，则b的长度为1-x。</p>\n<p>带入后有：$ \\frac{1-x}x =\\frac{x}1  $，求出c的长度x即求出了黄金分割比。求解后 x = $\\frac{\\sqrt 5 -1}2$ $\\approx$ 0.618</p>\n<p>这样我们就简单的从定义上得到了黄金分割比。</p>\n<p><strong>黄金分割矩形应运而生！</strong></p>\n<p>上面讲到了黄金分割是如何定义和计算的，我们了解到了线段上有个点是看上去很和谐的，那么一个矩形长什么样看起来最和谐呢？我们首先来看看下面三个矩形：</p>\n<p><img src=\"https://img.carlwe.com/golden_rect.png\" alt=\"\"></p>\n<p>如果让你选一个看起来最好看的矩形（长方形），你会选哪个？</p>\n<p>首先第一个看起来和正方形比较相近，需要认真看一下才知道这是一个稍微偏向于长方形的形状，然后再来看看第三个，一眼就能看出是一个长方形，但是因为太长了，长比宽大很多，显得太细长，美观上就差了好多，所以如果我们选一个一眼就能看出是一个矩形，并且看起来又很协调的，那么这个矩形的样子（长宽比）应该是一个比较固定的形状，这个美观的矩形的长宽比如果正好是黄金分割数的时候其实看起来是最协调的。下面这个例子可以得到一个黄金分割矩形：</p>\n<p><img src=\"https://img.carlwe.com/my_golden_rect.png\" alt=\"\"></p>\n<blockquote>\n<p>1.取正方形ABCD底边AB中点E,连接EC。</p>\n<p>2.以E为圆心EC为半径顺时针画弧，交AB延长线于F点。</p>\n<p>3.补全矩形AFGD，则矩形AFGD为黄金分割矩形， $ \\frac{ GF}{AF}$ =  $\\frac{\\sqrt 5 -1}2$</p>\n</blockquote>\n<p>通过上述一顿简单的操作黄金分割矩形出现了！</p>\n<p><strong>黄金螺旋又是怎么回事？</strong></p>\n<p>顾名思义螺旋就是一条曲线不断的往里旋转形成螺旋状。上面我们已经了解了黄金矩形是如何形成的，那么我们通过黄金矩形来看看黄金螺旋是如何产生的。</p>\n<p><img src=\"https://img.carlwe.com/golden_screw_fix.png\" alt=\"\"></p>\n<p>我们依旧使用上面的黄金矩形，操作步骤如下：</p>\n<blockquote>\n<p>1.截取黄金矩形左边或者上面的部分使其是一个正方形。</p>\n<p>2.以正方形边长为半径，正方形顶点为圆心画圆。</p>\n<p>3.将分割之后剩下的矩形进行分割，生成新的正方形，重复上述步骤，让连续的两段圆弧相连。</p>\n</blockquote>\n<p>即可得到上述的一段螺旋弧线，这样的螺旋弧线称之为黄金螺旋。</p>\n<p>黄金分割点、黄金矩形、黄金螺旋在实际生活中都有着广泛的应用。</p>\n<h2 id=\"寻找黄金分割\"><a href=\"#寻找黄金分割\" class=\"headerlink\" title=\"寻找黄金分割\"></a>寻找黄金分割</h2><p>这部分我们来寻找在生活中存在的黄金分割比，时间从远古到到现代依次展现。</p>\n<h3 id=\"自然界中的黄金分割\"><a href=\"#自然界中的黄金分割\" class=\"headerlink\" title=\"自然界中的黄金分割\"></a>自然界中的黄金分割</h3><p><img src=\"https://img.carlwe.com/yingwuluo.jpg\" alt=\"\"></p>\n<blockquote>\n<p>上面讲到了黄金螺旋，自然界中最接近黄金螺旋的生物莫过于鹦鹉螺，可以和上面的黄金螺旋图进行对比，是不是发现很像呢！</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/xiangrikui.jpg\" alt=\"\"></p>\n<blockquote>\n<p>我们熟知的向日葵有89个花辫，55个朝一方，34个朝向另一方。这三个数有没有很熟悉，可以向上👆再看看斐波拉切数列～</p>\n</blockquote>\n<p>其实自然界中的黄金分割还有很多，例如植物中的黄金角度，各种植物叶子的生长规律中自然隐藏着黄金数，像枫叶、喷嚏麦、松果、银河系的星系螺旋、飓风、动物的身体等等都蕴含着很多黄金分割。所以人们逐渐把自然界中的黄金分割运用到了实际的生产生活中，下面看看历史中的黄金分割。</p>\n<h3 id=\"历史上的黄金分割\"><a href=\"#历史上的黄金分割\" class=\"headerlink\" title=\"历史上的黄金分割\"></a>历史上的黄金分割</h3><p><img src=\"https://img.carlwe.com/jinzita.jpg\" alt=\"\"></p>\n<blockquote>\n<p>金字塔建造于公元前25世纪，比我们上面说到的毕达哥拉斯和欧几里得早了2000多年，但是这里面竟然也存在着极其精确的黄金分割数。金字塔的底边长为230.37米，侧面三角形的高为186.5米，底边长/（侧面三角形的高*2）=0.618。也许先人在那个时候就真的有高度的数学文明呢！</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/weinasi_mengnalisha.jpg\" alt=\"\"></p>\n<blockquote>\n<p>在欧洲文艺复兴时期很多艺术作品中也蕴含着丰富的黄金分割。左图中的断臂维纳斯，从肚脐一下的部分占整个身高的比例就是0.618。如果大家也是这个比例说明身材的很匀称～</p>\n<p>右侧是达芬奇很著名的画作《蒙娜丽莎的微笑》，图中蒙娜丽莎的脸型是黄金矩形，头宽和肩宽的比例是黄金分割比，同时上图也可以看出黄金螺旋的运用。</p>\n</blockquote>\n<h3 id=\"黄金分割在当下\"><a href=\"#黄金分割在当下\" class=\"headerlink\" title=\"黄金分割在当下\"></a>黄金分割在当下</h3><p>上面介绍了自然界和历史中的黄金分割，让我们来看看现代设计中的黄金分割：</p>\n<p><img src=\"https://img.carlwe.com/moden_building.jpg\" alt=\"\"></p>\n<blockquote>\n<p>左图中埃菲尔铁塔的第二层平台位置刚好设计在了黄金分割点上，看起来很协调。</p>\n<p>右图中的东方明珠为了建筑的协调性，在黄金分割点上增加了一个圆球使得整个建筑看起来更美观。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/apple_logo.png\" alt=\"\"></p>\n<blockquote>\n<p>我们所熟知的苹果的logo的设计也运用了黄金螺旋，如果仔细观察，很多其他品牌的logo也或多或少的运用了黄金分割。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/twitter_ipad.jpg\" alt=\"\"></p>\n<blockquote>\n<p>在App的页面设计中也会有很多黄金分割的运用。上图是Twitter的iPad版本。</p>\n</blockquote>\n<p>其实现实生活中还有很多黄金分割的体现：</p>\n<blockquote>\n<ul>\n<li>例如显示器（macbook pro 2560<em>1600）手机（魅族MX2、三星Note 的1280*</em>800，但后来手机变得越来越长…）的屏幕比例为16:10接近黄金矩形。</li>\n<li>黄金螺旋形状的旋转楼梯。</li>\n<li>巴托克音乐的高潮恰好在黄金分割点上。</li>\n<li>武器装备上，美远征军阿尔文·约克改良后枪身和枪把的比例恰恰符合0.618的比例；成吉思汗手下的蒙古骑兵中：人盔马甲的重骑兵和快捷灵动轻骑兵的比例为2:3；在现代战争中，第一梯队的兵力约占总兵力的2/3。</li>\n</ul>\n</blockquote>\n<h2 id=\"黄金分割的应用\"><a href=\"#黄金分割的应用\" class=\"headerlink\" title=\"黄金分割的应用\"></a>黄金分割的应用</h2><p>那么最后再来讲讲我们生活中可以运用黄金分割的其他例子吧！</p>\n<h3 id=\"摄影构图\"><a href=\"#摄影构图\" class=\"headerlink\" title=\"摄影构图\"></a>摄影构图</h3><p>在摄影构图中有一个比较重要的理论就是三分法构图：让画面中想要突出的主体放在画面三分之一的位置。在风景拍摄中，让地景和天空的分割线在三分之一的位置会显得比较协调。这种构图方式也叫黄金分割构图法。来看看我之前拍的两张照片：</p>\n<p><img src=\"https://img.carlwe.com/IMG_20180319_073536_HDR.jpg\" alt=\"\"></p>\n<blockquote>\n<p>画面中池塘，苍山和天空，大概分别占三分之一的位置。看上去会显得比较匀称。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/golden_ratio_in_composition.jpg\" alt=\"\"></p>\n<blockquote>\n<p>这张照片拍摄于惠州大甲岛，将海上的小岛置于画面的左下三分之一的位置，不会影响这个画面的感官，同时又会显得比较协调，并且海面和天空也在分割线上。</p>\n</blockquote>\n<h3 id=\"股票分析\"><a href=\"#股票分析\" class=\"headerlink\" title=\"股票分析\"></a>股票分析</h3><p><img src=\"https://img.carlwe.com/bodun_theory.jpg\" alt=\"\"></p>\n<blockquote>\n<p>美国证券分析家拉尔夫·.纳尔逊·.艾略特（R.N.Elliott）利用道琼斯工业平均指数作为研究工具，发现不断变化的股价结构性形态反映了自然和谐之美，发现市场走势不断重复一种模式，每一周期由5个上升浪和3个下跌浪组成。</p>\n<p>“艾略特波浪理论”是股票技术分析中的一个重要流派，其中的波浪三原则其一就是黄金分割原则。</p>\n<p>在这里，我们将通过它的指导买卖股票。画黄金分割线的第一步是记住若干个特殊的数字：0.382、0.618、1.382、1.618最为重要，股价极为容易在由这四个数产生的黄金分割线处产生支撑和压力。</p>\n</blockquote>\n<p>我找到了小米的股票K线图，让我们来看看小米在历史上股票的高点和低点之间的比例：</p>\n<p><img src=\"https://img.carlwe.com/xiaomi_in_bodun.png\" alt=\"\"></p>\n<blockquote>\n<p>在18年12月份左右达到来15.16的高位，然后下跌，到19年1月份来到了9.44的低位，通过计算这次下跌了37.7% 和波浪理论中的0.382很接近。</p>\n</blockquote>\n<p>但是这个理论只是揭示大部分时候的可能性，个人觉得这个理论只能做一个参考。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好了，本文先从黄金分割的由来，讲到了自然界和生活中的黄金分割例子，最后从摄影构图和股票分析两个方面介绍了黄金分割的实际运用。后面如果发现更有意思的黄金分割应用还会继续补充，有任何问题欢迎留言。</p>"},{"title":"我想和你分享的照片2019","date":"2020-01-24T13:04:44.000Z","_content":"\n![](https://img.carlwe.com/IMG_4049.jpg)\n\n<!--more-->\n\n新年好，最近肺炎比较严重，哪里也去不了，于是就在家花了一天时间整理了过去一年所拍摄的照片，前年的照片很多还是单反拍摄的，而去年的照片则全部是使用iPhone拍摄，其中部分照片使用了自带的编辑工具。但大部分编辑都是以还原真实为主，在这里把我喜欢的照片整理下来，分享给大家，同时也留作纪念。\n\n## 绿色\n\n![](https://img.carlwe.com/IMG_4190.jpg)\n\n> 1.通州运河森林公园路边一角\n\n\n\n![](https://img.carlwe.com/IMG_5404.jpg)\n\n> 2.世园会植物馆楼顶\n\n\n\n![](https://img.carlwe.com/IMG_2161.jpg)\n\n> 3.运河森林公园 70年华诞\n\n\n\n![](https://img.carlwe.com/IMG_2859s.jpg)\n\n> 4.小区玉兰花\n\n\n\n![](https://img.carlwe.com/IMG_3467.jpg)\n\n> 5.小区初雪\n\n\n\n![](https://img.carlwe.com/IMG_3827.jpg)\n\n>6.小区夏天的绿色和蓝色\n\n\n\n## 傍晚\n\n\n![](https://img.carlwe.com/IMG_1548s.jpg)\n\n> 7.夕阳\n\n\n\n![](https://img.carlwe.com/IMG_3032s.jpg)\n\n> 8.日落国贸、飞机与月亮\n\n\n\n![](https://img.carlwe.com/IMG_3414.jpg)\n\n> 9.窗外闪电\n\n\n\n![](https://img.carlwe.com/IMG_7092.jpg)\n\n> 10.闪电照亮夜空\n\n\n\n![](https://img.carlwe.com/IMG_6907.jpg)\n\n> 11.彩虹与闪电\n\n\n\n![](https://img.carlwe.com/IMG_4414.jpg)\n\n> 12.火烧云\n\n\n\n![](https://img.carlwe.com/IMG_5741s.jpg)\n\n> 13.下班的道路\n\n\n\n![](https://img.carlwe.com/IMG_0587.jpg)\n\n> 14.下班路上\n\n\n\n![](https://img.carlwe.com/IMG_1756.jpg)\n\n> 15.月亮——使用ProCam拍摄\n\n\n\n## 天空\n\n![](https://img.carlwe.com/IMG_4516.jpg)\n\n> 16.天空与电线——拍摄于王四营\n\n\n\n![](https://img.carlwe.com/IMG_9573.jpg)\n\n> 17.窗外好天气\n\n\n\n![](https://img.carlwe.com/IMG_3648.jpg)\n\n> 18.罗斯福广场，这里夜晚更漂亮\n\n\n\n![](https://img.carlwe.com/IMG_3761.jpg)\n\n> 19.北京地铁13号线\n\n\n\n![](https://img.carlwe.com/IMG_5710.jpg)\n\n> 20.夏天的三里屯\n\n\n\n![](https://img.carlwe.com/IMG_3630.jpg)\n\n> 21.秋天的三里屯\n\n\n\n![](https://img.carlwe.com/IMG_1444.jpg)\n\n> 22.即将降落的飞机，可有看到起落架已经打开。\n\n\n\n![](https://img.carlwe.com/IMG_8249.jpg)\n\n> 23.再回首\n\n\n\n![](https://img.carlwe.com/IMG_2671.jpg)\n\n> 24.远眺国贸，位于景山公园。\n\n\n\n![](https://img.carlwe.com/IMG_2679.jpg)\n\n>25.故宫博物院\n\n\n\n![](https://img.carlwe.com/IMG_2753.jpg)\n\n> 26.故宫角楼\n\n\n\n![](https://img.carlwe.com/IMG_4056.jpg)\n\n> 27.夏日北京，拍摄于中央电视塔。\n\n\n\n![](https://img.carlwe.com/IMG_5768.jpg)\n\n> 28.抓拍飞机\n\n\n\n![](https://img.carlwe.com/IMG_7016.jpg)\n\n> 29.上班路上冬日的北京\n\n\n\n## 建筑\n\n![](https://img.carlwe.com/IMG_7945.jpg)\n\n> 30.世园会中国馆\n\n\n\n![](https://img.carlwe.com/IMG_2225.jpg)\n\n> 31.香港湾仔\n\n\n\n![](https://img.carlwe.com/sz_4055.jpg)\n\n> 32.苏州山塘街\n\n\n\n![](https://img.carlwe.com/IMG_6057.jpg)\n\n> 33.北京地铁换乘\n\n\n\n![](https://img.carlwe.com/IMG_1460.jpg)\n\n> 34.Mercedes me\n\n\n\n![](https://img.carlwe.com/IMG_3710.jpg)\n\n> 35.通盈中心，很喜欢夕阳照上去的感觉，这张照片没有修改过。\n\n\n\n![](https://img.carlwe.com/IMG_2066.jpg)\n\n> 36.天津万怡酒店\n\n\n\n![](https://img.carlwe.com/IMG_6076.jpg)\n\n> 37.天津滨海新区图书馆。适合拍照不适合看书的图书馆。\n\n\n\n## 生活\n\n![](https://img.carlwe.com/IMG_3086.jpg)\n\n> 38.这一年周末去的最多的地方了。\n\n\n\n![](https://img.carlwe.com/IMG_8141.jpg)\n\n> 39.漫咖啡的小熊\n\n\n\n![](https://img.carlwe.com/IMG_0229.jpg)\n\n> 40.新房装修。\n\n\n\n![](https://img.carlwe.com/IMG_5098.jpg)\n\n> 41.装修最满意的地方，画是梵高的《丰收》。\n\n\n\n![](https://img.carlwe.com/IMG_9343.jpg)\n\n> 42.大姐家过十一，还有刚捞回的大闸蟹。\n\n\n\n## 人物\n\n![](https://img.carlwe.com/IMG_3421.jpg)\n\n> 43.过生日\n\n\n\n![](https://img.carlwe.com/IMG_1272.jpg)\n\n> 44.可爱小侄子\n\n\n\n![](https://img.carlwe.com/IMG_8014.jpg)\n\n> 45.游览颐和园\n\n\n\n![](https://img.carlwe.com/IMG_2035.jpg)\n\n> 46.再去天安门\n\n\n\n![](https://img.carlwe.com/IMG_6344.jpg)\n\n> 47.委屈的小侄子\n\n\n\n![](https://img.carlwe.com/IMG_9194.jpg)\n\n> 48.地铁开心一刻\n\n\n\n欢迎评论区留言，说出你喜欢的图片，最后祝大家新年快乐～\n\n","source":"_posts/我想和你分享的照片2019.md","raw":"---\ntitle: 我想和你分享的照片2019\ndate: 2020-01-24 21:04:44\ntags: 摄影\n---\n\n![](https://img.carlwe.com/IMG_4049.jpg)\n\n<!--more-->\n\n新年好，最近肺炎比较严重，哪里也去不了，于是就在家花了一天时间整理了过去一年所拍摄的照片，前年的照片很多还是单反拍摄的，而去年的照片则全部是使用iPhone拍摄，其中部分照片使用了自带的编辑工具。但大部分编辑都是以还原真实为主，在这里把我喜欢的照片整理下来，分享给大家，同时也留作纪念。\n\n## 绿色\n\n![](https://img.carlwe.com/IMG_4190.jpg)\n\n> 1.通州运河森林公园路边一角\n\n\n\n![](https://img.carlwe.com/IMG_5404.jpg)\n\n> 2.世园会植物馆楼顶\n\n\n\n![](https://img.carlwe.com/IMG_2161.jpg)\n\n> 3.运河森林公园 70年华诞\n\n\n\n![](https://img.carlwe.com/IMG_2859s.jpg)\n\n> 4.小区玉兰花\n\n\n\n![](https://img.carlwe.com/IMG_3467.jpg)\n\n> 5.小区初雪\n\n\n\n![](https://img.carlwe.com/IMG_3827.jpg)\n\n>6.小区夏天的绿色和蓝色\n\n\n\n## 傍晚\n\n\n![](https://img.carlwe.com/IMG_1548s.jpg)\n\n> 7.夕阳\n\n\n\n![](https://img.carlwe.com/IMG_3032s.jpg)\n\n> 8.日落国贸、飞机与月亮\n\n\n\n![](https://img.carlwe.com/IMG_3414.jpg)\n\n> 9.窗外闪电\n\n\n\n![](https://img.carlwe.com/IMG_7092.jpg)\n\n> 10.闪电照亮夜空\n\n\n\n![](https://img.carlwe.com/IMG_6907.jpg)\n\n> 11.彩虹与闪电\n\n\n\n![](https://img.carlwe.com/IMG_4414.jpg)\n\n> 12.火烧云\n\n\n\n![](https://img.carlwe.com/IMG_5741s.jpg)\n\n> 13.下班的道路\n\n\n\n![](https://img.carlwe.com/IMG_0587.jpg)\n\n> 14.下班路上\n\n\n\n![](https://img.carlwe.com/IMG_1756.jpg)\n\n> 15.月亮——使用ProCam拍摄\n\n\n\n## 天空\n\n![](https://img.carlwe.com/IMG_4516.jpg)\n\n> 16.天空与电线——拍摄于王四营\n\n\n\n![](https://img.carlwe.com/IMG_9573.jpg)\n\n> 17.窗外好天气\n\n\n\n![](https://img.carlwe.com/IMG_3648.jpg)\n\n> 18.罗斯福广场，这里夜晚更漂亮\n\n\n\n![](https://img.carlwe.com/IMG_3761.jpg)\n\n> 19.北京地铁13号线\n\n\n\n![](https://img.carlwe.com/IMG_5710.jpg)\n\n> 20.夏天的三里屯\n\n\n\n![](https://img.carlwe.com/IMG_3630.jpg)\n\n> 21.秋天的三里屯\n\n\n\n![](https://img.carlwe.com/IMG_1444.jpg)\n\n> 22.即将降落的飞机，可有看到起落架已经打开。\n\n\n\n![](https://img.carlwe.com/IMG_8249.jpg)\n\n> 23.再回首\n\n\n\n![](https://img.carlwe.com/IMG_2671.jpg)\n\n> 24.远眺国贸，位于景山公园。\n\n\n\n![](https://img.carlwe.com/IMG_2679.jpg)\n\n>25.故宫博物院\n\n\n\n![](https://img.carlwe.com/IMG_2753.jpg)\n\n> 26.故宫角楼\n\n\n\n![](https://img.carlwe.com/IMG_4056.jpg)\n\n> 27.夏日北京，拍摄于中央电视塔。\n\n\n\n![](https://img.carlwe.com/IMG_5768.jpg)\n\n> 28.抓拍飞机\n\n\n\n![](https://img.carlwe.com/IMG_7016.jpg)\n\n> 29.上班路上冬日的北京\n\n\n\n## 建筑\n\n![](https://img.carlwe.com/IMG_7945.jpg)\n\n> 30.世园会中国馆\n\n\n\n![](https://img.carlwe.com/IMG_2225.jpg)\n\n> 31.香港湾仔\n\n\n\n![](https://img.carlwe.com/sz_4055.jpg)\n\n> 32.苏州山塘街\n\n\n\n![](https://img.carlwe.com/IMG_6057.jpg)\n\n> 33.北京地铁换乘\n\n\n\n![](https://img.carlwe.com/IMG_1460.jpg)\n\n> 34.Mercedes me\n\n\n\n![](https://img.carlwe.com/IMG_3710.jpg)\n\n> 35.通盈中心，很喜欢夕阳照上去的感觉，这张照片没有修改过。\n\n\n\n![](https://img.carlwe.com/IMG_2066.jpg)\n\n> 36.天津万怡酒店\n\n\n\n![](https://img.carlwe.com/IMG_6076.jpg)\n\n> 37.天津滨海新区图书馆。适合拍照不适合看书的图书馆。\n\n\n\n## 生活\n\n![](https://img.carlwe.com/IMG_3086.jpg)\n\n> 38.这一年周末去的最多的地方了。\n\n\n\n![](https://img.carlwe.com/IMG_8141.jpg)\n\n> 39.漫咖啡的小熊\n\n\n\n![](https://img.carlwe.com/IMG_0229.jpg)\n\n> 40.新房装修。\n\n\n\n![](https://img.carlwe.com/IMG_5098.jpg)\n\n> 41.装修最满意的地方，画是梵高的《丰收》。\n\n\n\n![](https://img.carlwe.com/IMG_9343.jpg)\n\n> 42.大姐家过十一，还有刚捞回的大闸蟹。\n\n\n\n## 人物\n\n![](https://img.carlwe.com/IMG_3421.jpg)\n\n> 43.过生日\n\n\n\n![](https://img.carlwe.com/IMG_1272.jpg)\n\n> 44.可爱小侄子\n\n\n\n![](https://img.carlwe.com/IMG_8014.jpg)\n\n> 45.游览颐和园\n\n\n\n![](https://img.carlwe.com/IMG_2035.jpg)\n\n> 46.再去天安门\n\n\n\n![](https://img.carlwe.com/IMG_6344.jpg)\n\n> 47.委屈的小侄子\n\n\n\n![](https://img.carlwe.com/IMG_9194.jpg)\n\n> 48.地铁开心一刻\n\n\n\n欢迎评论区留言，说出你喜欢的图片，最后祝大家新年快乐～\n\n","slug":"我想和你分享的照片2019","published":1,"updated":"2021-11-01T06:19:38.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnph001bt57spzkoxngi","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/IMG_4049.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>新年好，最近肺炎比较严重，哪里也去不了，于是就在家花了一天时间整理了过去一年所拍摄的照片，前年的照片很多还是单反拍摄的，而去年的照片则全部是使用iPhone拍摄，其中部分照片使用了自带的编辑工具。但大部分编辑都是以还原真实为主，在这里把我喜欢的照片整理下来，分享给大家，同时也留作纪念。</p>\n<h2 id=\"绿色\"><a href=\"#绿色\" class=\"headerlink\" title=\"绿色\"></a>绿色</h2><p><img src=\"https://img.carlwe.com/IMG_4190.jpg\" alt=\"\"></p>\n<blockquote>\n<p>1.通州运河森林公园路边一角</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_5404.jpg\" alt=\"\"></p>\n<blockquote>\n<p>2.世园会植物馆楼顶</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_2161.jpg\" alt=\"\"></p>\n<blockquote>\n<p>3.运河森林公园 70年华诞</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_2859s.jpg\" alt=\"\"></p>\n<blockquote>\n<p>4.小区玉兰花</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_3467.jpg\" alt=\"\"></p>\n<blockquote>\n<p>5.小区初雪</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_3827.jpg\" alt=\"\"></p>\n<blockquote>\n<p>6.小区夏天的绿色和蓝色</p>\n</blockquote>\n<h2 id=\"傍晚\"><a href=\"#傍晚\" class=\"headerlink\" title=\"傍晚\"></a>傍晚</h2><p><img src=\"https://img.carlwe.com/IMG_1548s.jpg\" alt=\"\"></p>\n<blockquote>\n<p>7.夕阳</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_3032s.jpg\" alt=\"\"></p>\n<blockquote>\n<p>8.日落国贸、飞机与月亮</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_3414.jpg\" alt=\"\"></p>\n<blockquote>\n<p>9.窗外闪电</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_7092.jpg\" alt=\"\"></p>\n<blockquote>\n<p>10.闪电照亮夜空</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_6907.jpg\" alt=\"\"></p>\n<blockquote>\n<p>11.彩虹与闪电</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_4414.jpg\" alt=\"\"></p>\n<blockquote>\n<p>12.火烧云</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_5741s.jpg\" alt=\"\"></p>\n<blockquote>\n<p>13.下班的道路</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_0587.jpg\" alt=\"\"></p>\n<blockquote>\n<p>14.下班路上</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_1756.jpg\" alt=\"\"></p>\n<blockquote>\n<p>15.月亮——使用ProCam拍摄</p>\n</blockquote>\n<h2 id=\"天空\"><a href=\"#天空\" class=\"headerlink\" title=\"天空\"></a>天空</h2><p><img src=\"https://img.carlwe.com/IMG_4516.jpg\" alt=\"\"></p>\n<blockquote>\n<p>16.天空与电线——拍摄于王四营</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_9573.jpg\" alt=\"\"></p>\n<blockquote>\n<p>17.窗外好天气</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_3648.jpg\" alt=\"\"></p>\n<blockquote>\n<p>18.罗斯福广场，这里夜晚更漂亮</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_3761.jpg\" alt=\"\"></p>\n<blockquote>\n<p>19.北京地铁13号线</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_5710.jpg\" alt=\"\"></p>\n<blockquote>\n<p>20.夏天的三里屯</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_3630.jpg\" alt=\"\"></p>\n<blockquote>\n<p>21.秋天的三里屯</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_1444.jpg\" alt=\"\"></p>\n<blockquote>\n<p>22.即将降落的飞机，可有看到起落架已经打开。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_8249.jpg\" alt=\"\"></p>\n<blockquote>\n<p>23.再回首</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_2671.jpg\" alt=\"\"></p>\n<blockquote>\n<p>24.远眺国贸，位于景山公园。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_2679.jpg\" alt=\"\"></p>\n<blockquote>\n<p>25.故宫博物院</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_2753.jpg\" alt=\"\"></p>\n<blockquote>\n<p>26.故宫角楼</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_4056.jpg\" alt=\"\"></p>\n<blockquote>\n<p>27.夏日北京，拍摄于中央电视塔。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_5768.jpg\" alt=\"\"></p>\n<blockquote>\n<p>28.抓拍飞机</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_7016.jpg\" alt=\"\"></p>\n<blockquote>\n<p>29.上班路上冬日的北京</p>\n</blockquote>\n<h2 id=\"建筑\"><a href=\"#建筑\" class=\"headerlink\" title=\"建筑\"></a>建筑</h2><p><img src=\"https://img.carlwe.com/IMG_7945.jpg\" alt=\"\"></p>\n<blockquote>\n<p>30.世园会中国馆</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_2225.jpg\" alt=\"\"></p>\n<blockquote>\n<p>31.香港湾仔</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_4055.jpg\" alt=\"\"></p>\n<blockquote>\n<p>32.苏州山塘街</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_6057.jpg\" alt=\"\"></p>\n<blockquote>\n<p>33.北京地铁换乘</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_1460.jpg\" alt=\"\"></p>\n<blockquote>\n<p>34.Mercedes me</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_3710.jpg\" alt=\"\"></p>\n<blockquote>\n<p>35.通盈中心，很喜欢夕阳照上去的感觉，这张照片没有修改过。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_2066.jpg\" alt=\"\"></p>\n<blockquote>\n<p>36.天津万怡酒店</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_6076.jpg\" alt=\"\"></p>\n<blockquote>\n<p>37.天津滨海新区图书馆。适合拍照不适合看书的图书馆。</p>\n</blockquote>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p><img src=\"https://img.carlwe.com/IMG_3086.jpg\" alt=\"\"></p>\n<blockquote>\n<p>38.这一年周末去的最多的地方了。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_8141.jpg\" alt=\"\"></p>\n<blockquote>\n<p>39.漫咖啡的小熊</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_0229.jpg\" alt=\"\"></p>\n<blockquote>\n<p>40.新房装修。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_5098.jpg\" alt=\"\"></p>\n<blockquote>\n<p>41.装修最满意的地方，画是梵高的《丰收》。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_9343.jpg\" alt=\"\"></p>\n<blockquote>\n<p>42.大姐家过十一，还有刚捞回的大闸蟹。</p>\n</blockquote>\n<h2 id=\"人物\"><a href=\"#人物\" class=\"headerlink\" title=\"人物\"></a>人物</h2><p><img src=\"https://img.carlwe.com/IMG_3421.jpg\" alt=\"\"></p>\n<blockquote>\n<p>43.过生日</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_1272.jpg\" alt=\"\"></p>\n<blockquote>\n<p>44.可爱小侄子</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_8014.jpg\" alt=\"\"></p>\n<blockquote>\n<p>45.游览颐和园</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_2035.jpg\" alt=\"\"></p>\n<blockquote>\n<p>46.再去天安门</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_6344.jpg\" alt=\"\"></p>\n<blockquote>\n<p>47.委屈的小侄子</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_9194.jpg\" alt=\"\"></p>\n<blockquote>\n<p>48.地铁开心一刻</p>\n</blockquote>\n<p>欢迎评论区留言，说出你喜欢的图片，最后祝大家新年快乐～</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/IMG_4049.jpg\" alt=\"\"></p>","more":"<p>新年好，最近肺炎比较严重，哪里也去不了，于是就在家花了一天时间整理了过去一年所拍摄的照片，前年的照片很多还是单反拍摄的，而去年的照片则全部是使用iPhone拍摄，其中部分照片使用了自带的编辑工具。但大部分编辑都是以还原真实为主，在这里把我喜欢的照片整理下来，分享给大家，同时也留作纪念。</p>\n<h2 id=\"绿色\"><a href=\"#绿色\" class=\"headerlink\" title=\"绿色\"></a>绿色</h2><p><img src=\"https://img.carlwe.com/IMG_4190.jpg\" alt=\"\"></p>\n<blockquote>\n<p>1.通州运河森林公园路边一角</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_5404.jpg\" alt=\"\"></p>\n<blockquote>\n<p>2.世园会植物馆楼顶</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_2161.jpg\" alt=\"\"></p>\n<blockquote>\n<p>3.运河森林公园 70年华诞</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_2859s.jpg\" alt=\"\"></p>\n<blockquote>\n<p>4.小区玉兰花</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_3467.jpg\" alt=\"\"></p>\n<blockquote>\n<p>5.小区初雪</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_3827.jpg\" alt=\"\"></p>\n<blockquote>\n<p>6.小区夏天的绿色和蓝色</p>\n</blockquote>\n<h2 id=\"傍晚\"><a href=\"#傍晚\" class=\"headerlink\" title=\"傍晚\"></a>傍晚</h2><p><img src=\"https://img.carlwe.com/IMG_1548s.jpg\" alt=\"\"></p>\n<blockquote>\n<p>7.夕阳</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_3032s.jpg\" alt=\"\"></p>\n<blockquote>\n<p>8.日落国贸、飞机与月亮</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_3414.jpg\" alt=\"\"></p>\n<blockquote>\n<p>9.窗外闪电</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_7092.jpg\" alt=\"\"></p>\n<blockquote>\n<p>10.闪电照亮夜空</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_6907.jpg\" alt=\"\"></p>\n<blockquote>\n<p>11.彩虹与闪电</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_4414.jpg\" alt=\"\"></p>\n<blockquote>\n<p>12.火烧云</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_5741s.jpg\" alt=\"\"></p>\n<blockquote>\n<p>13.下班的道路</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_0587.jpg\" alt=\"\"></p>\n<blockquote>\n<p>14.下班路上</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_1756.jpg\" alt=\"\"></p>\n<blockquote>\n<p>15.月亮——使用ProCam拍摄</p>\n</blockquote>\n<h2 id=\"天空\"><a href=\"#天空\" class=\"headerlink\" title=\"天空\"></a>天空</h2><p><img src=\"https://img.carlwe.com/IMG_4516.jpg\" alt=\"\"></p>\n<blockquote>\n<p>16.天空与电线——拍摄于王四营</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_9573.jpg\" alt=\"\"></p>\n<blockquote>\n<p>17.窗外好天气</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_3648.jpg\" alt=\"\"></p>\n<blockquote>\n<p>18.罗斯福广场，这里夜晚更漂亮</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_3761.jpg\" alt=\"\"></p>\n<blockquote>\n<p>19.北京地铁13号线</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_5710.jpg\" alt=\"\"></p>\n<blockquote>\n<p>20.夏天的三里屯</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_3630.jpg\" alt=\"\"></p>\n<blockquote>\n<p>21.秋天的三里屯</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_1444.jpg\" alt=\"\"></p>\n<blockquote>\n<p>22.即将降落的飞机，可有看到起落架已经打开。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_8249.jpg\" alt=\"\"></p>\n<blockquote>\n<p>23.再回首</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_2671.jpg\" alt=\"\"></p>\n<blockquote>\n<p>24.远眺国贸，位于景山公园。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_2679.jpg\" alt=\"\"></p>\n<blockquote>\n<p>25.故宫博物院</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_2753.jpg\" alt=\"\"></p>\n<blockquote>\n<p>26.故宫角楼</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_4056.jpg\" alt=\"\"></p>\n<blockquote>\n<p>27.夏日北京，拍摄于中央电视塔。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_5768.jpg\" alt=\"\"></p>\n<blockquote>\n<p>28.抓拍飞机</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_7016.jpg\" alt=\"\"></p>\n<blockquote>\n<p>29.上班路上冬日的北京</p>\n</blockquote>\n<h2 id=\"建筑\"><a href=\"#建筑\" class=\"headerlink\" title=\"建筑\"></a>建筑</h2><p><img src=\"https://img.carlwe.com/IMG_7945.jpg\" alt=\"\"></p>\n<blockquote>\n<p>30.世园会中国馆</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_2225.jpg\" alt=\"\"></p>\n<blockquote>\n<p>31.香港湾仔</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/sz_4055.jpg\" alt=\"\"></p>\n<blockquote>\n<p>32.苏州山塘街</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_6057.jpg\" alt=\"\"></p>\n<blockquote>\n<p>33.北京地铁换乘</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_1460.jpg\" alt=\"\"></p>\n<blockquote>\n<p>34.Mercedes me</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_3710.jpg\" alt=\"\"></p>\n<blockquote>\n<p>35.通盈中心，很喜欢夕阳照上去的感觉，这张照片没有修改过。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_2066.jpg\" alt=\"\"></p>\n<blockquote>\n<p>36.天津万怡酒店</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_6076.jpg\" alt=\"\"></p>\n<blockquote>\n<p>37.天津滨海新区图书馆。适合拍照不适合看书的图书馆。</p>\n</blockquote>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p><img src=\"https://img.carlwe.com/IMG_3086.jpg\" alt=\"\"></p>\n<blockquote>\n<p>38.这一年周末去的最多的地方了。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_8141.jpg\" alt=\"\"></p>\n<blockquote>\n<p>39.漫咖啡的小熊</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_0229.jpg\" alt=\"\"></p>\n<blockquote>\n<p>40.新房装修。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_5098.jpg\" alt=\"\"></p>\n<blockquote>\n<p>41.装修最满意的地方，画是梵高的《丰收》。</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_9343.jpg\" alt=\"\"></p>\n<blockquote>\n<p>42.大姐家过十一，还有刚捞回的大闸蟹。</p>\n</blockquote>\n<h2 id=\"人物\"><a href=\"#人物\" class=\"headerlink\" title=\"人物\"></a>人物</h2><p><img src=\"https://img.carlwe.com/IMG_3421.jpg\" alt=\"\"></p>\n<blockquote>\n<p>43.过生日</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_1272.jpg\" alt=\"\"></p>\n<blockquote>\n<p>44.可爱小侄子</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_8014.jpg\" alt=\"\"></p>\n<blockquote>\n<p>45.游览颐和园</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_2035.jpg\" alt=\"\"></p>\n<blockquote>\n<p>46.再去天安门</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_6344.jpg\" alt=\"\"></p>\n<blockquote>\n<p>47.委屈的小侄子</p>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/IMG_9194.jpg\" alt=\"\"></p>\n<blockquote>\n<p>48.地铁开心一刻</p>\n</blockquote>\n<p>欢迎评论区留言，说出你喜欢的图片，最后祝大家新年快乐～</p>"},{"title":"港岛开卡记（上）","date":"2019-03-23T10:32:28.000Z","_content":"\n![](https://img.carlwe.com/IMG_1987.jpg-h)\n\n本篇文章将介绍为什要办香港银行卡，以及最近初办理香港银行卡的经历。\n\n<!--more-->\n\n## 为什么要办香港银行卡\n\n### 办理香港银行卡的好处\n\n香港作为世界金融中心之一，在外汇管制上极其宽松，资金进出自由，并且没有外汇收付的管制，这些综合起来就会有以下好处：\n\n> 1. 方便进行港股及美股的股票交易\n> 2. 方便从事进出口贸易的个人SOHO、电商收取外汇\n> 3. 方便境外资产配置（海外置业、房产购置、境外投融资、海外移民、按揭借贷等）\n> 4. 境外旅游消费、购买香港保险\n\n### 我为什么要办理香港银行卡\n\n这得从使用老虎证券说起：之前在老虎证券上进行过入金和股票购买，使用国内银行卡进行入金，需要先进行购汇、再转账到老虎在香港的账户，以入金2万人民币来算：\n\n> 购汇75元 + 25元手续费 + 50元的电报费 = 145元\n\n这算下来一次就是差不多150元人民币，加上老虎的朋友经常反馈国内银行卡出金都不是很顺利，再加上以上面列举的这些好处，所以为了长远考虑，我决定我需要一张香港银行卡。\n\n## 准备工作\n\n既然决定要办理香港银行卡，那就需要提前准备好相关材料及行程规划，本篇博客具有时效性，可能随着政策的变化相关准备材料和规则会发生变化，但是基本的流程和方法应该是差不多的。首先要说明下内地居民如果想要办理香港银行卡有如下几种途径：\n\n> 1. 本人亲自去香港办理（相对划算但成功率低）\n> 2. 内地见证开户（资产要求高，例如民生银行需要存款500万）\n> 3. 找淘宝代办（一般公司急需或怕麻烦，费用在3000-5000人民币不等，成功率高）\n> 4. 内地银行有活动（例如民生银行之前存5万人民币即可办理）\n\n加之从18年10月之后，各个银行对于内地办理香港银行卡的门槛都提高了很多，同时要求更加苛刻。所以我们需要找一个最划算的银行进行办理，当前最优的方案就是找到一家资费低的银行，找一个合适的时候亲自去香港，例如正好过去旅游。\n\n### 银行卡资料准备过程\n\n* **银行选择**\n\n能够办理香港银行卡的银行有很多，例如汇丰银行、渣打银行、香港民生银行，前面说到门槛提高，所以选择一个合适的银行办理就成了首先要解决的问题。经过同事的推荐，招商永隆银行算是最方便的了。之前老板公众号也有一篇文章可以参考[这里](https://mp.weixin.qq.com/s/m37sJgTI_bFTMzGYOn0g1g)。当前香港永隆银行的办卡主要限制条件是：每个月账户内平均余额超过1万港币。这应该算是所有银行里面要求最低的了。\n\n* **预约申请**\n\n首先下载招商永隆银行的App：招商永隆一点通，然后点击预约开户，填写开户需要的材料，这里还是需要填写的内容还是比较多的，如实填写就行。需要注意的地方如下：\n\n> 1. 预约分行，这里推荐荃湾分行（其他银行到访后可能会要很多材料）。\n> 2. 预约时间，一般一个银行同时只能办理一个客户，过了预约时间你很可能当天就办不了，得重新预约。\n> 3. 居住地址：需要和后面信用卡账单的地址保持一致。\n> 4. 开户原因：一定要勾选投资，这里后面还会说到。\n\n![](https://img.carlwe.com/bankcard_appointment.png)\n\n填写完成后后面会出现成功的提示及客服的电话，有任何问题可以直接同客服联系，了解最新的信息。\n\n* **提前联系银行客服**\n\n上面的预约填写完成后就需要准备材料了，准备的材料可能随着时间的变化会有所不同，这里我们可以直接拨打香港的客服电话进行询问，询问后得知需要准备如下材料：\n\n> 1. 港澳通行证或者护照\n> 2. 过境小票\n> 3. 大陆身份证\n> 4. 住址证明（最近三个月水电煤气费的邮寄账单、信用卡对账单的邮寄盖章版，这些上面必须要有公章和地址）\n> 5. 当天存入1000港币激活\n\n前面的三个只要去香港应该都不是问题。第四个就得重点说下啦，需要邮寄的来证明你真正住在这里，但是得到水电煤气费的邮寄账单基本不可行，我给国家电力打电话说不提供这项服务，给北京天然气打电话也说只能来柜台打印，而且手续还挺麻烦，那就只剩下最后一种方式了，后面介绍。\n\n同时客服告知当天需要存入1000港币现金进行银行卡的激活，所以到时候得要有一些现金。\n\n* **宁波银行卡**\n\n![](https://img.carlwe.com/IMG_1815.jpg)\n\n上面说到港币现金，上面公众号里的文章也有介绍到，因为宁波银行卡在香港任意有银联标志的ATM取款，每个月前三笔免手续费。这个就很友好了，直接提前去办理了一张宁波银行卡，可以找一家方便的银行进行开户，这里不得不说下宁波银行卡办卡流程真的很快，前后不到10分钟就搞定了。\n\n* **信用卡账单**\n\n给招行信用卡客服打电话，说可以邮寄，但是得先出电子对账单，然后通过审核后打印再邮寄过来，费用20元，时间在2周左右，这个时间就比较长了，当时也来不及。通过和客服说明需求原因，客服建议直接把电子对账单发到邮箱，然后让我自己去打印店彩打出来，是同邮寄过来的一模一样，上面会有住址和印章，邮件第二天就发到邮箱了，打印店搞定。\n\n有了上面的预约申请+住址证明+方便取款的银行卡，基本上关于办银行卡的准备工作就做好啦～\n\n### 首次去香港的准备工作\n\n* **港澳通行证**\n\n这个不必多说，外地户口在北京只需要有居住证就可以在北京直接办理港澳通行证，北京市公安局官网预约就行，办证10天就可以拿到手。\n\n* **八达通卡**\n\n在香港坐公交车、地铁、购物、吃饭都可以使用。如果没有准备港币，有一张八达通卡也是十分方便的。这里建议去淘宝购买，140多人民币，里面会有100港币的现金，剩余是押金，可以回来的时候退掉，如果经常去香港建议留着，八达通可以在过关时口岸自取，也可以邮寄到家里。这里顺便说下，虽然支付宝、微信在香港已经出现，但是普及率还很低，而且我试着扫了一下那边的支付宝，提示使用香港版本的支付宝🤷‍♂️。\n\n* **流量卡**\n\n去香港内地卡如果没有开通香港的境外流量那么就用不了移动网络了，如果去的时间短这里推荐淘宝花10元购买一张流量卡，有1GB流量，用完降至3G网络，基本够用了。而且还可以打电话。\n\n### 行程安排\n\n正好很久没有去深圳找同学聚聚了，从网上搜了下，从北京到深圳的机票比到香港要便宜六七百，于是决定先到深圳，然后大巴车到香港。因为预约的是3月1日下午3点半在香港招商永隆银行庄士敦道分行，具体行程如下：\n\n> **3月1日** \n> \n> 8:30 北京机场\n> \n> 11:30 深圳机场\n> \n> 12:00 深圳机场去往油麻地大巴（票价100元）\n> \n> 12:40 深圳湾口岸刷指纹过关，过关后得看情况，我就等了半小时，才等到去香港的大巴车\n> \n> 13:40 到达油麻地吃饭（就去那些商场附近很多人吃的地方去吃，味道不错，价格也不算太贵40-50港币左右）\n> \n> 14:00 地铁荃湾线到金钟再转港岛线到湾仔站，下地铁A3口出来对面就是招商永隆银行\n> \n> 15:30 开始办卡\n> \n> 17:30 地铁回深圳找同学聚餐\n> \n> **3月2日**\n> \n> 跟好朋友在深圳游玩，晚上飞机回北京。\n\n## 办卡经历\n\n### 信心满满\n\n因为之前有同事过来办过卡，分享了一些经历，自己也经过了周全的准备工作，感觉虽然是第一次来办，但是心里还是信心十足的。在地铁里面找了个银联ATM取款机，取了1200港币，准备坐车和激活银行卡，从湾仔站下来出地铁口对面便是香港招商永隆银行庄士敦道分行。\n\n![](https://img.carlwe.com/IMG_8077.jpg)\n\n到了之后跟银行前台柜员进行沟通，当时没有人在办卡，但是还有15分钟才到预约时间，就被告知，需要先等一会儿，于是就在银行门口逛了下，按道理在内地银行，那肯定就直接开始给你办了。\n\n好吧，过了一会儿来到柜台前，银行柜员说可以开始办了，于是我就把需要的证件都逐一准备好，放在了桌子上。心想这些你们要的东西我都有了，这次应该问题不大。\n\n### 瞧不起和故意刁难式的提问\n\n首先一上来就柜员就说：在正式开始之前我们需要问你几个问题。能看出他皱起眉毛，带着一丝丝怀疑的眼光提问：\n\n> 柜员：首先我们想知道下，你办我们银行卡的目的是什么？\n> \n> 我：你们指的目的有哪些呢（我想知道他们所说的目的包括哪些）？\n> \n> 柜员：这个我不能告诉你。\n> \n> 我（想了想）：旅游和储蓄（想起来之前同公司另一个同事讨论办香港银行卡，当时就提到问道办卡原因，都认为不能说投资，可能会被拒绝，而且之前在入金老虎证券的时候填写投资就很容易被拒绝）。\n> \n> 柜员：就旅游和储蓄？那我们不能给你办理，我们觉得你的理由不够充分，旅游没有必要办香港银行卡，可以购汇过来也很方便，而且储蓄也不能称为理由，必须要有投资才能办理。\n> \n> 我：其实我也会进行一些投资的。\n> \n> 柜员：投资的话需要准备住址证明，工资流水等一些资料，你有准备吗？\n> \n> 我：我有准备的，同时拿出了信用卡对账单，并把手机上工资卡的明细给他看了。\n> \n> 柜员：你这个资料准备的都很充分，但是我们不能给你办理，因为你第一次没有说投资。\n\n然后跟他的交谈中明显感觉到这次是不可能办了，后面跟他说了各种想办的理由，他表示很同情，但是就是办不了，最后建议我下次再过来，或者找其他银行试试。\n\n### 临时调整\n\n在进行了大概15分钟的交谈后，我无奈的走出了银行，心想如果当时说了投资就能直接办好了。但是也没有放弃，接着去找下一家香港永隆银行试试，第一次被高德地图给坑了，标注的永隆银行会展广场分行怎么都找不到，后来遇到了一个保安小哥，他拿起手机打开了谷歌地图（香港这边大多使用谷歌地图），给我看这个地方没有永隆银行，之前的撤销了。然后让我去铜锣湾附近的那个，好吧，看了下不远走过去，期间遇到了一家汇丰银行，过去问了下银行经理，说最少存款得20万，要不每月得收180港币的管理费，而且一副很瞧不起人的样子，直接走人。到了铜锣湾附近过去后询问当天是否可以办理，说需要先预约而且当天已经排满了，好吧，我就直接从永隆一点通App里面查当天其他可以预约的地方，结果附近银行今天已经预约满了。而且之前的预约记录已被取消😟。\n\n![](https://img.carlwe.com/yonglong_bank.jpg)\n\n于是打电话问了下银行客服，客服说让我可以到店具体看下，有可能有空缺的，距离银行下班还有一小时，然后抱着试一试的心态，去了中环的这家永隆银行，去了之后柜员询问有没有预约，我说没有，然后他说今天已经约满，而且剩下的时间不够办理了，让我下次再来。\n\n![](https://img.carlwe.com/IMG_4828.jpg)\n\n走出银行那一刻心想，今天是不可能了，以后有机会再来办。正好去地铁路上碰到对面的渣打银行，顺便进去问了下办卡条件，账户最少存15万港币免手续费。\n\n### 回深圳吧\n\n出来之后天色渐暗，已经到了下午5点，约好7点在深圳聚餐，得回去啦。路上心想手里还有1200港币该如何处置，本想着回来之后找银行兑换了，但是在福田口岸过关的时候看了下手续费才10多快，就直接给兑换了。\n\n## 总结\n\n虽然这次没有办理成功，但还是挺有收获的，香港这边银行确实是很认真的，去了是什么就说什么就对了，而且千万不要想着贿赂银行的柜员，之前就有过例子，想要贿赂的人被抓走了。\n\n因为没有办理成功所以这篇文章的标题后面加了一个“上”，但内容不少，希望想亲自去香港办卡的朋友看了能够有更充分的准备，等我以后办好了再来分享下集。\n","source":"_posts/港岛开卡记（上）.md","raw":"---\ntitle: 港岛开卡记（上）\ndate: 2019-03-23 18:32:28\ntags: 生活\n---\n\n![](https://img.carlwe.com/IMG_1987.jpg-h)\n\n本篇文章将介绍为什要办香港银行卡，以及最近初办理香港银行卡的经历。\n\n<!--more-->\n\n## 为什么要办香港银行卡\n\n### 办理香港银行卡的好处\n\n香港作为世界金融中心之一，在外汇管制上极其宽松，资金进出自由，并且没有外汇收付的管制，这些综合起来就会有以下好处：\n\n> 1. 方便进行港股及美股的股票交易\n> 2. 方便从事进出口贸易的个人SOHO、电商收取外汇\n> 3. 方便境外资产配置（海外置业、房产购置、境外投融资、海外移民、按揭借贷等）\n> 4. 境外旅游消费、购买香港保险\n\n### 我为什么要办理香港银行卡\n\n这得从使用老虎证券说起：之前在老虎证券上进行过入金和股票购买，使用国内银行卡进行入金，需要先进行购汇、再转账到老虎在香港的账户，以入金2万人民币来算：\n\n> 购汇75元 + 25元手续费 + 50元的电报费 = 145元\n\n这算下来一次就是差不多150元人民币，加上老虎的朋友经常反馈国内银行卡出金都不是很顺利，再加上以上面列举的这些好处，所以为了长远考虑，我决定我需要一张香港银行卡。\n\n## 准备工作\n\n既然决定要办理香港银行卡，那就需要提前准备好相关材料及行程规划，本篇博客具有时效性，可能随着政策的变化相关准备材料和规则会发生变化，但是基本的流程和方法应该是差不多的。首先要说明下内地居民如果想要办理香港银行卡有如下几种途径：\n\n> 1. 本人亲自去香港办理（相对划算但成功率低）\n> 2. 内地见证开户（资产要求高，例如民生银行需要存款500万）\n> 3. 找淘宝代办（一般公司急需或怕麻烦，费用在3000-5000人民币不等，成功率高）\n> 4. 内地银行有活动（例如民生银行之前存5万人民币即可办理）\n\n加之从18年10月之后，各个银行对于内地办理香港银行卡的门槛都提高了很多，同时要求更加苛刻。所以我们需要找一个最划算的银行进行办理，当前最优的方案就是找到一家资费低的银行，找一个合适的时候亲自去香港，例如正好过去旅游。\n\n### 银行卡资料准备过程\n\n* **银行选择**\n\n能够办理香港银行卡的银行有很多，例如汇丰银行、渣打银行、香港民生银行，前面说到门槛提高，所以选择一个合适的银行办理就成了首先要解决的问题。经过同事的推荐，招商永隆银行算是最方便的了。之前老板公众号也有一篇文章可以参考[这里](https://mp.weixin.qq.com/s/m37sJgTI_bFTMzGYOn0g1g)。当前香港永隆银行的办卡主要限制条件是：每个月账户内平均余额超过1万港币。这应该算是所有银行里面要求最低的了。\n\n* **预约申请**\n\n首先下载招商永隆银行的App：招商永隆一点通，然后点击预约开户，填写开户需要的材料，这里还是需要填写的内容还是比较多的，如实填写就行。需要注意的地方如下：\n\n> 1. 预约分行，这里推荐荃湾分行（其他银行到访后可能会要很多材料）。\n> 2. 预约时间，一般一个银行同时只能办理一个客户，过了预约时间你很可能当天就办不了，得重新预约。\n> 3. 居住地址：需要和后面信用卡账单的地址保持一致。\n> 4. 开户原因：一定要勾选投资，这里后面还会说到。\n\n![](https://img.carlwe.com/bankcard_appointment.png)\n\n填写完成后后面会出现成功的提示及客服的电话，有任何问题可以直接同客服联系，了解最新的信息。\n\n* **提前联系银行客服**\n\n上面的预约填写完成后就需要准备材料了，准备的材料可能随着时间的变化会有所不同，这里我们可以直接拨打香港的客服电话进行询问，询问后得知需要准备如下材料：\n\n> 1. 港澳通行证或者护照\n> 2. 过境小票\n> 3. 大陆身份证\n> 4. 住址证明（最近三个月水电煤气费的邮寄账单、信用卡对账单的邮寄盖章版，这些上面必须要有公章和地址）\n> 5. 当天存入1000港币激活\n\n前面的三个只要去香港应该都不是问题。第四个就得重点说下啦，需要邮寄的来证明你真正住在这里，但是得到水电煤气费的邮寄账单基本不可行，我给国家电力打电话说不提供这项服务，给北京天然气打电话也说只能来柜台打印，而且手续还挺麻烦，那就只剩下最后一种方式了，后面介绍。\n\n同时客服告知当天需要存入1000港币现金进行银行卡的激活，所以到时候得要有一些现金。\n\n* **宁波银行卡**\n\n![](https://img.carlwe.com/IMG_1815.jpg)\n\n上面说到港币现金，上面公众号里的文章也有介绍到，因为宁波银行卡在香港任意有银联标志的ATM取款，每个月前三笔免手续费。这个就很友好了，直接提前去办理了一张宁波银行卡，可以找一家方便的银行进行开户，这里不得不说下宁波银行卡办卡流程真的很快，前后不到10分钟就搞定了。\n\n* **信用卡账单**\n\n给招行信用卡客服打电话，说可以邮寄，但是得先出电子对账单，然后通过审核后打印再邮寄过来，费用20元，时间在2周左右，这个时间就比较长了，当时也来不及。通过和客服说明需求原因，客服建议直接把电子对账单发到邮箱，然后让我自己去打印店彩打出来，是同邮寄过来的一模一样，上面会有住址和印章，邮件第二天就发到邮箱了，打印店搞定。\n\n有了上面的预约申请+住址证明+方便取款的银行卡，基本上关于办银行卡的准备工作就做好啦～\n\n### 首次去香港的准备工作\n\n* **港澳通行证**\n\n这个不必多说，外地户口在北京只需要有居住证就可以在北京直接办理港澳通行证，北京市公安局官网预约就行，办证10天就可以拿到手。\n\n* **八达通卡**\n\n在香港坐公交车、地铁、购物、吃饭都可以使用。如果没有准备港币，有一张八达通卡也是十分方便的。这里建议去淘宝购买，140多人民币，里面会有100港币的现金，剩余是押金，可以回来的时候退掉，如果经常去香港建议留着，八达通可以在过关时口岸自取，也可以邮寄到家里。这里顺便说下，虽然支付宝、微信在香港已经出现，但是普及率还很低，而且我试着扫了一下那边的支付宝，提示使用香港版本的支付宝🤷‍♂️。\n\n* **流量卡**\n\n去香港内地卡如果没有开通香港的境外流量那么就用不了移动网络了，如果去的时间短这里推荐淘宝花10元购买一张流量卡，有1GB流量，用完降至3G网络，基本够用了。而且还可以打电话。\n\n### 行程安排\n\n正好很久没有去深圳找同学聚聚了，从网上搜了下，从北京到深圳的机票比到香港要便宜六七百，于是决定先到深圳，然后大巴车到香港。因为预约的是3月1日下午3点半在香港招商永隆银行庄士敦道分行，具体行程如下：\n\n> **3月1日** \n> \n> 8:30 北京机场\n> \n> 11:30 深圳机场\n> \n> 12:00 深圳机场去往油麻地大巴（票价100元）\n> \n> 12:40 深圳湾口岸刷指纹过关，过关后得看情况，我就等了半小时，才等到去香港的大巴车\n> \n> 13:40 到达油麻地吃饭（就去那些商场附近很多人吃的地方去吃，味道不错，价格也不算太贵40-50港币左右）\n> \n> 14:00 地铁荃湾线到金钟再转港岛线到湾仔站，下地铁A3口出来对面就是招商永隆银行\n> \n> 15:30 开始办卡\n> \n> 17:30 地铁回深圳找同学聚餐\n> \n> **3月2日**\n> \n> 跟好朋友在深圳游玩，晚上飞机回北京。\n\n## 办卡经历\n\n### 信心满满\n\n因为之前有同事过来办过卡，分享了一些经历，自己也经过了周全的准备工作，感觉虽然是第一次来办，但是心里还是信心十足的。在地铁里面找了个银联ATM取款机，取了1200港币，准备坐车和激活银行卡，从湾仔站下来出地铁口对面便是香港招商永隆银行庄士敦道分行。\n\n![](https://img.carlwe.com/IMG_8077.jpg)\n\n到了之后跟银行前台柜员进行沟通，当时没有人在办卡，但是还有15分钟才到预约时间，就被告知，需要先等一会儿，于是就在银行门口逛了下，按道理在内地银行，那肯定就直接开始给你办了。\n\n好吧，过了一会儿来到柜台前，银行柜员说可以开始办了，于是我就把需要的证件都逐一准备好，放在了桌子上。心想这些你们要的东西我都有了，这次应该问题不大。\n\n### 瞧不起和故意刁难式的提问\n\n首先一上来就柜员就说：在正式开始之前我们需要问你几个问题。能看出他皱起眉毛，带着一丝丝怀疑的眼光提问：\n\n> 柜员：首先我们想知道下，你办我们银行卡的目的是什么？\n> \n> 我：你们指的目的有哪些呢（我想知道他们所说的目的包括哪些）？\n> \n> 柜员：这个我不能告诉你。\n> \n> 我（想了想）：旅游和储蓄（想起来之前同公司另一个同事讨论办香港银行卡，当时就提到问道办卡原因，都认为不能说投资，可能会被拒绝，而且之前在入金老虎证券的时候填写投资就很容易被拒绝）。\n> \n> 柜员：就旅游和储蓄？那我们不能给你办理，我们觉得你的理由不够充分，旅游没有必要办香港银行卡，可以购汇过来也很方便，而且储蓄也不能称为理由，必须要有投资才能办理。\n> \n> 我：其实我也会进行一些投资的。\n> \n> 柜员：投资的话需要准备住址证明，工资流水等一些资料，你有准备吗？\n> \n> 我：我有准备的，同时拿出了信用卡对账单，并把手机上工资卡的明细给他看了。\n> \n> 柜员：你这个资料准备的都很充分，但是我们不能给你办理，因为你第一次没有说投资。\n\n然后跟他的交谈中明显感觉到这次是不可能办了，后面跟他说了各种想办的理由，他表示很同情，但是就是办不了，最后建议我下次再过来，或者找其他银行试试。\n\n### 临时调整\n\n在进行了大概15分钟的交谈后，我无奈的走出了银行，心想如果当时说了投资就能直接办好了。但是也没有放弃，接着去找下一家香港永隆银行试试，第一次被高德地图给坑了，标注的永隆银行会展广场分行怎么都找不到，后来遇到了一个保安小哥，他拿起手机打开了谷歌地图（香港这边大多使用谷歌地图），给我看这个地方没有永隆银行，之前的撤销了。然后让我去铜锣湾附近的那个，好吧，看了下不远走过去，期间遇到了一家汇丰银行，过去问了下银行经理，说最少存款得20万，要不每月得收180港币的管理费，而且一副很瞧不起人的样子，直接走人。到了铜锣湾附近过去后询问当天是否可以办理，说需要先预约而且当天已经排满了，好吧，我就直接从永隆一点通App里面查当天其他可以预约的地方，结果附近银行今天已经预约满了。而且之前的预约记录已被取消😟。\n\n![](https://img.carlwe.com/yonglong_bank.jpg)\n\n于是打电话问了下银行客服，客服说让我可以到店具体看下，有可能有空缺的，距离银行下班还有一小时，然后抱着试一试的心态，去了中环的这家永隆银行，去了之后柜员询问有没有预约，我说没有，然后他说今天已经约满，而且剩下的时间不够办理了，让我下次再来。\n\n![](https://img.carlwe.com/IMG_4828.jpg)\n\n走出银行那一刻心想，今天是不可能了，以后有机会再来办。正好去地铁路上碰到对面的渣打银行，顺便进去问了下办卡条件，账户最少存15万港币免手续费。\n\n### 回深圳吧\n\n出来之后天色渐暗，已经到了下午5点，约好7点在深圳聚餐，得回去啦。路上心想手里还有1200港币该如何处置，本想着回来之后找银行兑换了，但是在福田口岸过关的时候看了下手续费才10多快，就直接给兑换了。\n\n## 总结\n\n虽然这次没有办理成功，但还是挺有收获的，香港这边银行确实是很认真的，去了是什么就说什么就对了，而且千万不要想着贿赂银行的柜员，之前就有过例子，想要贿赂的人被抓走了。\n\n因为没有办理成功所以这篇文章的标题后面加了一个“上”，但内容不少，希望想亲自去香港办卡的朋友看了能够有更充分的准备，等我以后办好了再来分享下集。\n","slug":"港岛开卡记（上）","published":1,"updated":"2022-03-08T02:10:46.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnpi001dt57sx2mg3k8i","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/IMG_1987.jpg-h\" alt=\"\"></p>\n<p>本篇文章将介绍为什要办香港银行卡，以及最近初办理香港银行卡的经历。</p>\n<a id=\"more\"></a>\n<h2 id=\"为什么要办香港银行卡\"><a href=\"#为什么要办香港银行卡\" class=\"headerlink\" title=\"为什么要办香港银行卡\"></a>为什么要办香港银行卡</h2><h3 id=\"办理香港银行卡的好处\"><a href=\"#办理香港银行卡的好处\" class=\"headerlink\" title=\"办理香港银行卡的好处\"></a>办理香港银行卡的好处</h3><p>香港作为世界金融中心之一，在外汇管制上极其宽松，资金进出自由，并且没有外汇收付的管制，这些综合起来就会有以下好处：</p>\n<blockquote>\n<ol>\n<li>方便进行港股及美股的股票交易</li>\n<li>方便从事进出口贸易的个人SOHO、电商收取外汇</li>\n<li>方便境外资产配置（海外置业、房产购置、境外投融资、海外移民、按揭借贷等）</li>\n<li>境外旅游消费、购买香港保险</li>\n</ol>\n</blockquote>\n<h3 id=\"我为什么要办理香港银行卡\"><a href=\"#我为什么要办理香港银行卡\" class=\"headerlink\" title=\"我为什么要办理香港银行卡\"></a>我为什么要办理香港银行卡</h3><p>这得从使用老虎证券说起：之前在老虎证券上进行过入金和股票购买，使用国内银行卡进行入金，需要先进行购汇、再转账到老虎在香港的账户，以入金2万人民币来算：</p>\n<blockquote>\n<p>购汇75元 + 25元手续费 + 50元的电报费 = 145元</p>\n</blockquote>\n<p>这算下来一次就是差不多150元人民币，加上老虎的朋友经常反馈国内银行卡出金都不是很顺利，再加上以上面列举的这些好处，所以为了长远考虑，我决定我需要一张香港银行卡。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>既然决定要办理香港银行卡，那就需要提前准备好相关材料及行程规划，本篇博客具有时效性，可能随着政策的变化相关准备材料和规则会发生变化，但是基本的流程和方法应该是差不多的。首先要说明下内地居民如果想要办理香港银行卡有如下几种途径：</p>\n<blockquote>\n<ol>\n<li>本人亲自去香港办理（相对划算但成功率低）</li>\n<li>内地见证开户（资产要求高，例如民生银行需要存款500万）</li>\n<li>找淘宝代办（一般公司急需或怕麻烦，费用在3000-5000人民币不等，成功率高）</li>\n<li>内地银行有活动（例如民生银行之前存5万人民币即可办理）</li>\n</ol>\n</blockquote>\n<p>加之从18年10月之后，各个银行对于内地办理香港银行卡的门槛都提高了很多，同时要求更加苛刻。所以我们需要找一个最划算的银行进行办理，当前最优的方案就是找到一家资费低的银行，找一个合适的时候亲自去香港，例如正好过去旅游。</p>\n<h3 id=\"银行卡资料准备过程\"><a href=\"#银行卡资料准备过程\" class=\"headerlink\" title=\"银行卡资料准备过程\"></a>银行卡资料准备过程</h3><ul>\n<li><strong>银行选择</strong></li>\n</ul>\n<p>能够办理香港银行卡的银行有很多，例如汇丰银行、渣打银行、香港民生银行，前面说到门槛提高，所以选择一个合适的银行办理就成了首先要解决的问题。经过同事的推荐，招商永隆银行算是最方便的了。之前老板公众号也有一篇文章可以参考<a href=\"https://mp.weixin.qq.com/s/m37sJgTI_bFTMzGYOn0g1g\" target=\"_blank\" rel=\"noopener\">这里</a>。当前香港永隆银行的办卡主要限制条件是：每个月账户内平均余额超过1万港币。这应该算是所有银行里面要求最低的了。</p>\n<ul>\n<li><strong>预约申请</strong></li>\n</ul>\n<p>首先下载招商永隆银行的App：招商永隆一点通，然后点击预约开户，填写开户需要的材料，这里还是需要填写的内容还是比较多的，如实填写就行。需要注意的地方如下：</p>\n<blockquote>\n<ol>\n<li>预约分行，这里推荐荃湾分行（其他银行到访后可能会要很多材料）。</li>\n<li>预约时间，一般一个银行同时只能办理一个客户，过了预约时间你很可能当天就办不了，得重新预约。</li>\n<li>居住地址：需要和后面信用卡账单的地址保持一致。</li>\n<li>开户原因：一定要勾选投资，这里后面还会说到。</li>\n</ol>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/bankcard_appointment.png\" alt=\"\"></p>\n<p>填写完成后后面会出现成功的提示及客服的电话，有任何问题可以直接同客服联系，了解最新的信息。</p>\n<ul>\n<li><strong>提前联系银行客服</strong></li>\n</ul>\n<p>上面的预约填写完成后就需要准备材料了，准备的材料可能随着时间的变化会有所不同，这里我们可以直接拨打香港的客服电话进行询问，询问后得知需要准备如下材料：</p>\n<blockquote>\n<ol>\n<li>港澳通行证或者护照</li>\n<li>过境小票</li>\n<li>大陆身份证</li>\n<li>住址证明（最近三个月水电煤气费的邮寄账单、信用卡对账单的邮寄盖章版，这些上面必须要有公章和地址）</li>\n<li>当天存入1000港币激活</li>\n</ol>\n</blockquote>\n<p>前面的三个只要去香港应该都不是问题。第四个就得重点说下啦，需要邮寄的来证明你真正住在这里，但是得到水电煤气费的邮寄账单基本不可行，我给国家电力打电话说不提供这项服务，给北京天然气打电话也说只能来柜台打印，而且手续还挺麻烦，那就只剩下最后一种方式了，后面介绍。</p>\n<p>同时客服告知当天需要存入1000港币现金进行银行卡的激活，所以到时候得要有一些现金。</p>\n<ul>\n<li><strong>宁波银行卡</strong></li>\n</ul>\n<p><img src=\"https://img.carlwe.com/IMG_1815.jpg\" alt=\"\"></p>\n<p>上面说到港币现金，上面公众号里的文章也有介绍到，因为宁波银行卡在香港任意有银联标志的ATM取款，每个月前三笔免手续费。这个就很友好了，直接提前去办理了一张宁波银行卡，可以找一家方便的银行进行开户，这里不得不说下宁波银行卡办卡流程真的很快，前后不到10分钟就搞定了。</p>\n<ul>\n<li><strong>信用卡账单</strong></li>\n</ul>\n<p>给招行信用卡客服打电话，说可以邮寄，但是得先出电子对账单，然后通过审核后打印再邮寄过来，费用20元，时间在2周左右，这个时间就比较长了，当时也来不及。通过和客服说明需求原因，客服建议直接把电子对账单发到邮箱，然后让我自己去打印店彩打出来，是同邮寄过来的一模一样，上面会有住址和印章，邮件第二天就发到邮箱了，打印店搞定。</p>\n<p>有了上面的预约申请+住址证明+方便取款的银行卡，基本上关于办银行卡的准备工作就做好啦～</p>\n<h3 id=\"首次去香港的准备工作\"><a href=\"#首次去香港的准备工作\" class=\"headerlink\" title=\"首次去香港的准备工作\"></a>首次去香港的准备工作</h3><ul>\n<li><strong>港澳通行证</strong></li>\n</ul>\n<p>这个不必多说，外地户口在北京只需要有居住证就可以在北京直接办理港澳通行证，北京市公安局官网预约就行，办证10天就可以拿到手。</p>\n<ul>\n<li><strong>八达通卡</strong></li>\n</ul>\n<p>在香港坐公交车、地铁、购物、吃饭都可以使用。如果没有准备港币，有一张八达通卡也是十分方便的。这里建议去淘宝购买，140多人民币，里面会有100港币的现金，剩余是押金，可以回来的时候退掉，如果经常去香港建议留着，八达通可以在过关时口岸自取，也可以邮寄到家里。这里顺便说下，虽然支付宝、微信在香港已经出现，但是普及率还很低，而且我试着扫了一下那边的支付宝，提示使用香港版本的支付宝🤷‍♂️。</p>\n<ul>\n<li><strong>流量卡</strong></li>\n</ul>\n<p>去香港内地卡如果没有开通香港的境外流量那么就用不了移动网络了，如果去的时间短这里推荐淘宝花10元购买一张流量卡，有1GB流量，用完降至3G网络，基本够用了。而且还可以打电话。</p>\n<h3 id=\"行程安排\"><a href=\"#行程安排\" class=\"headerlink\" title=\"行程安排\"></a>行程安排</h3><p>正好很久没有去深圳找同学聚聚了，从网上搜了下，从北京到深圳的机票比到香港要便宜六七百，于是决定先到深圳，然后大巴车到香港。因为预约的是3月1日下午3点半在香港招商永隆银行庄士敦道分行，具体行程如下：</p>\n<blockquote>\n<p><strong>3月1日</strong> </p>\n<p>8:30 北京机场</p>\n<p>11:30 深圳机场</p>\n<p>12:00 深圳机场去往油麻地大巴（票价100元）</p>\n<p>12:40 深圳湾口岸刷指纹过关，过关后得看情况，我就等了半小时，才等到去香港的大巴车</p>\n<p>13:40 到达油麻地吃饭（就去那些商场附近很多人吃的地方去吃，味道不错，价格也不算太贵40-50港币左右）</p>\n<p>14:00 地铁荃湾线到金钟再转港岛线到湾仔站，下地铁A3口出来对面就是招商永隆银行</p>\n<p>15:30 开始办卡</p>\n<p>17:30 地铁回深圳找同学聚餐</p>\n<p><strong>3月2日</strong></p>\n<p>跟好朋友在深圳游玩，晚上飞机回北京。</p>\n</blockquote>\n<h2 id=\"办卡经历\"><a href=\"#办卡经历\" class=\"headerlink\" title=\"办卡经历\"></a>办卡经历</h2><h3 id=\"信心满满\"><a href=\"#信心满满\" class=\"headerlink\" title=\"信心满满\"></a>信心满满</h3><p>因为之前有同事过来办过卡，分享了一些经历，自己也经过了周全的准备工作，感觉虽然是第一次来办，但是心里还是信心十足的。在地铁里面找了个银联ATM取款机，取了1200港币，准备坐车和激活银行卡，从湾仔站下来出地铁口对面便是香港招商永隆银行庄士敦道分行。</p>\n<p><img src=\"https://img.carlwe.com/IMG_8077.jpg\" alt=\"\"></p>\n<p>到了之后跟银行前台柜员进行沟通，当时没有人在办卡，但是还有15分钟才到预约时间，就被告知，需要先等一会儿，于是就在银行门口逛了下，按道理在内地银行，那肯定就直接开始给你办了。</p>\n<p>好吧，过了一会儿来到柜台前，银行柜员说可以开始办了，于是我就把需要的证件都逐一准备好，放在了桌子上。心想这些你们要的东西我都有了，这次应该问题不大。</p>\n<h3 id=\"瞧不起和故意刁难式的提问\"><a href=\"#瞧不起和故意刁难式的提问\" class=\"headerlink\" title=\"瞧不起和故意刁难式的提问\"></a>瞧不起和故意刁难式的提问</h3><p>首先一上来就柜员就说：在正式开始之前我们需要问你几个问题。能看出他皱起眉毛，带着一丝丝怀疑的眼光提问：</p>\n<blockquote>\n<p>柜员：首先我们想知道下，你办我们银行卡的目的是什么？</p>\n<p>我：你们指的目的有哪些呢（我想知道他们所说的目的包括哪些）？</p>\n<p>柜员：这个我不能告诉你。</p>\n<p>我（想了想）：旅游和储蓄（想起来之前同公司另一个同事讨论办香港银行卡，当时就提到问道办卡原因，都认为不能说投资，可能会被拒绝，而且之前在入金老虎证券的时候填写投资就很容易被拒绝）。</p>\n<p>柜员：就旅游和储蓄？那我们不能给你办理，我们觉得你的理由不够充分，旅游没有必要办香港银行卡，可以购汇过来也很方便，而且储蓄也不能称为理由，必须要有投资才能办理。</p>\n<p>我：其实我也会进行一些投资的。</p>\n<p>柜员：投资的话需要准备住址证明，工资流水等一些资料，你有准备吗？</p>\n<p>我：我有准备的，同时拿出了信用卡对账单，并把手机上工资卡的明细给他看了。</p>\n<p>柜员：你这个资料准备的都很充分，但是我们不能给你办理，因为你第一次没有说投资。</p>\n</blockquote>\n<p>然后跟他的交谈中明显感觉到这次是不可能办了，后面跟他说了各种想办的理由，他表示很同情，但是就是办不了，最后建议我下次再过来，或者找其他银行试试。</p>\n<h3 id=\"临时调整\"><a href=\"#临时调整\" class=\"headerlink\" title=\"临时调整\"></a>临时调整</h3><p>在进行了大概15分钟的交谈后，我无奈的走出了银行，心想如果当时说了投资就能直接办好了。但是也没有放弃，接着去找下一家香港永隆银行试试，第一次被高德地图给坑了，标注的永隆银行会展广场分行怎么都找不到，后来遇到了一个保安小哥，他拿起手机打开了谷歌地图（香港这边大多使用谷歌地图），给我看这个地方没有永隆银行，之前的撤销了。然后让我去铜锣湾附近的那个，好吧，看了下不远走过去，期间遇到了一家汇丰银行，过去问了下银行经理，说最少存款得20万，要不每月得收180港币的管理费，而且一副很瞧不起人的样子，直接走人。到了铜锣湾附近过去后询问当天是否可以办理，说需要先预约而且当天已经排满了，好吧，我就直接从永隆一点通App里面查当天其他可以预约的地方，结果附近银行今天已经预约满了。而且之前的预约记录已被取消😟。</p>\n<p><img src=\"https://img.carlwe.com/yonglong_bank.jpg\" alt=\"\"></p>\n<p>于是打电话问了下银行客服，客服说让我可以到店具体看下，有可能有空缺的，距离银行下班还有一小时，然后抱着试一试的心态，去了中环的这家永隆银行，去了之后柜员询问有没有预约，我说没有，然后他说今天已经约满，而且剩下的时间不够办理了，让我下次再来。</p>\n<p><img src=\"https://img.carlwe.com/IMG_4828.jpg\" alt=\"\"></p>\n<p>走出银行那一刻心想，今天是不可能了，以后有机会再来办。正好去地铁路上碰到对面的渣打银行，顺便进去问了下办卡条件，账户最少存15万港币免手续费。</p>\n<h3 id=\"回深圳吧\"><a href=\"#回深圳吧\" class=\"headerlink\" title=\"回深圳吧\"></a>回深圳吧</h3><p>出来之后天色渐暗，已经到了下午5点，约好7点在深圳聚餐，得回去啦。路上心想手里还有1200港币该如何处置，本想着回来之后找银行兑换了，但是在福田口岸过关的时候看了下手续费才10多快，就直接给兑换了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然这次没有办理成功，但还是挺有收获的，香港这边银行确实是很认真的，去了是什么就说什么就对了，而且千万不要想着贿赂银行的柜员，之前就有过例子，想要贿赂的人被抓走了。</p>\n<p>因为没有办理成功所以这篇文章的标题后面加了一个“上”，但内容不少，希望想亲自去香港办卡的朋友看了能够有更充分的准备，等我以后办好了再来分享下集。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/IMG_1987.jpg-h\" alt=\"\"></p>\n<p>本篇文章将介绍为什要办香港银行卡，以及最近初办理香港银行卡的经历。</p>","more":"<h2 id=\"为什么要办香港银行卡\"><a href=\"#为什么要办香港银行卡\" class=\"headerlink\" title=\"为什么要办香港银行卡\"></a>为什么要办香港银行卡</h2><h3 id=\"办理香港银行卡的好处\"><a href=\"#办理香港银行卡的好处\" class=\"headerlink\" title=\"办理香港银行卡的好处\"></a>办理香港银行卡的好处</h3><p>香港作为世界金融中心之一，在外汇管制上极其宽松，资金进出自由，并且没有外汇收付的管制，这些综合起来就会有以下好处：</p>\n<blockquote>\n<ol>\n<li>方便进行港股及美股的股票交易</li>\n<li>方便从事进出口贸易的个人SOHO、电商收取外汇</li>\n<li>方便境外资产配置（海外置业、房产购置、境外投融资、海外移民、按揭借贷等）</li>\n<li>境外旅游消费、购买香港保险</li>\n</ol>\n</blockquote>\n<h3 id=\"我为什么要办理香港银行卡\"><a href=\"#我为什么要办理香港银行卡\" class=\"headerlink\" title=\"我为什么要办理香港银行卡\"></a>我为什么要办理香港银行卡</h3><p>这得从使用老虎证券说起：之前在老虎证券上进行过入金和股票购买，使用国内银行卡进行入金，需要先进行购汇、再转账到老虎在香港的账户，以入金2万人民币来算：</p>\n<blockquote>\n<p>购汇75元 + 25元手续费 + 50元的电报费 = 145元</p>\n</blockquote>\n<p>这算下来一次就是差不多150元人民币，加上老虎的朋友经常反馈国内银行卡出金都不是很顺利，再加上以上面列举的这些好处，所以为了长远考虑，我决定我需要一张香港银行卡。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>既然决定要办理香港银行卡，那就需要提前准备好相关材料及行程规划，本篇博客具有时效性，可能随着政策的变化相关准备材料和规则会发生变化，但是基本的流程和方法应该是差不多的。首先要说明下内地居民如果想要办理香港银行卡有如下几种途径：</p>\n<blockquote>\n<ol>\n<li>本人亲自去香港办理（相对划算但成功率低）</li>\n<li>内地见证开户（资产要求高，例如民生银行需要存款500万）</li>\n<li>找淘宝代办（一般公司急需或怕麻烦，费用在3000-5000人民币不等，成功率高）</li>\n<li>内地银行有活动（例如民生银行之前存5万人民币即可办理）</li>\n</ol>\n</blockquote>\n<p>加之从18年10月之后，各个银行对于内地办理香港银行卡的门槛都提高了很多，同时要求更加苛刻。所以我们需要找一个最划算的银行进行办理，当前最优的方案就是找到一家资费低的银行，找一个合适的时候亲自去香港，例如正好过去旅游。</p>\n<h3 id=\"银行卡资料准备过程\"><a href=\"#银行卡资料准备过程\" class=\"headerlink\" title=\"银行卡资料准备过程\"></a>银行卡资料准备过程</h3><ul>\n<li><strong>银行选择</strong></li>\n</ul>\n<p>能够办理香港银行卡的银行有很多，例如汇丰银行、渣打银行、香港民生银行，前面说到门槛提高，所以选择一个合适的银行办理就成了首先要解决的问题。经过同事的推荐，招商永隆银行算是最方便的了。之前老板公众号也有一篇文章可以参考<a href=\"https://mp.weixin.qq.com/s/m37sJgTI_bFTMzGYOn0g1g\" target=\"_blank\" rel=\"noopener\">这里</a>。当前香港永隆银行的办卡主要限制条件是：每个月账户内平均余额超过1万港币。这应该算是所有银行里面要求最低的了。</p>\n<ul>\n<li><strong>预约申请</strong></li>\n</ul>\n<p>首先下载招商永隆银行的App：招商永隆一点通，然后点击预约开户，填写开户需要的材料，这里还是需要填写的内容还是比较多的，如实填写就行。需要注意的地方如下：</p>\n<blockquote>\n<ol>\n<li>预约分行，这里推荐荃湾分行（其他银行到访后可能会要很多材料）。</li>\n<li>预约时间，一般一个银行同时只能办理一个客户，过了预约时间你很可能当天就办不了，得重新预约。</li>\n<li>居住地址：需要和后面信用卡账单的地址保持一致。</li>\n<li>开户原因：一定要勾选投资，这里后面还会说到。</li>\n</ol>\n</blockquote>\n<p><img src=\"https://img.carlwe.com/bankcard_appointment.png\" alt=\"\"></p>\n<p>填写完成后后面会出现成功的提示及客服的电话，有任何问题可以直接同客服联系，了解最新的信息。</p>\n<ul>\n<li><strong>提前联系银行客服</strong></li>\n</ul>\n<p>上面的预约填写完成后就需要准备材料了，准备的材料可能随着时间的变化会有所不同，这里我们可以直接拨打香港的客服电话进行询问，询问后得知需要准备如下材料：</p>\n<blockquote>\n<ol>\n<li>港澳通行证或者护照</li>\n<li>过境小票</li>\n<li>大陆身份证</li>\n<li>住址证明（最近三个月水电煤气费的邮寄账单、信用卡对账单的邮寄盖章版，这些上面必须要有公章和地址）</li>\n<li>当天存入1000港币激活</li>\n</ol>\n</blockquote>\n<p>前面的三个只要去香港应该都不是问题。第四个就得重点说下啦，需要邮寄的来证明你真正住在这里，但是得到水电煤气费的邮寄账单基本不可行，我给国家电力打电话说不提供这项服务，给北京天然气打电话也说只能来柜台打印，而且手续还挺麻烦，那就只剩下最后一种方式了，后面介绍。</p>\n<p>同时客服告知当天需要存入1000港币现金进行银行卡的激活，所以到时候得要有一些现金。</p>\n<ul>\n<li><strong>宁波银行卡</strong></li>\n</ul>\n<p><img src=\"https://img.carlwe.com/IMG_1815.jpg\" alt=\"\"></p>\n<p>上面说到港币现金，上面公众号里的文章也有介绍到，因为宁波银行卡在香港任意有银联标志的ATM取款，每个月前三笔免手续费。这个就很友好了，直接提前去办理了一张宁波银行卡，可以找一家方便的银行进行开户，这里不得不说下宁波银行卡办卡流程真的很快，前后不到10分钟就搞定了。</p>\n<ul>\n<li><strong>信用卡账单</strong></li>\n</ul>\n<p>给招行信用卡客服打电话，说可以邮寄，但是得先出电子对账单，然后通过审核后打印再邮寄过来，费用20元，时间在2周左右，这个时间就比较长了，当时也来不及。通过和客服说明需求原因，客服建议直接把电子对账单发到邮箱，然后让我自己去打印店彩打出来，是同邮寄过来的一模一样，上面会有住址和印章，邮件第二天就发到邮箱了，打印店搞定。</p>\n<p>有了上面的预约申请+住址证明+方便取款的银行卡，基本上关于办银行卡的准备工作就做好啦～</p>\n<h3 id=\"首次去香港的准备工作\"><a href=\"#首次去香港的准备工作\" class=\"headerlink\" title=\"首次去香港的准备工作\"></a>首次去香港的准备工作</h3><ul>\n<li><strong>港澳通行证</strong></li>\n</ul>\n<p>这个不必多说，外地户口在北京只需要有居住证就可以在北京直接办理港澳通行证，北京市公安局官网预约就行，办证10天就可以拿到手。</p>\n<ul>\n<li><strong>八达通卡</strong></li>\n</ul>\n<p>在香港坐公交车、地铁、购物、吃饭都可以使用。如果没有准备港币，有一张八达通卡也是十分方便的。这里建议去淘宝购买，140多人民币，里面会有100港币的现金，剩余是押金，可以回来的时候退掉，如果经常去香港建议留着，八达通可以在过关时口岸自取，也可以邮寄到家里。这里顺便说下，虽然支付宝、微信在香港已经出现，但是普及率还很低，而且我试着扫了一下那边的支付宝，提示使用香港版本的支付宝🤷‍♂️。</p>\n<ul>\n<li><strong>流量卡</strong></li>\n</ul>\n<p>去香港内地卡如果没有开通香港的境外流量那么就用不了移动网络了，如果去的时间短这里推荐淘宝花10元购买一张流量卡，有1GB流量，用完降至3G网络，基本够用了。而且还可以打电话。</p>\n<h3 id=\"行程安排\"><a href=\"#行程安排\" class=\"headerlink\" title=\"行程安排\"></a>行程安排</h3><p>正好很久没有去深圳找同学聚聚了，从网上搜了下，从北京到深圳的机票比到香港要便宜六七百，于是决定先到深圳，然后大巴车到香港。因为预约的是3月1日下午3点半在香港招商永隆银行庄士敦道分行，具体行程如下：</p>\n<blockquote>\n<p><strong>3月1日</strong> </p>\n<p>8:30 北京机场</p>\n<p>11:30 深圳机场</p>\n<p>12:00 深圳机场去往油麻地大巴（票价100元）</p>\n<p>12:40 深圳湾口岸刷指纹过关，过关后得看情况，我就等了半小时，才等到去香港的大巴车</p>\n<p>13:40 到达油麻地吃饭（就去那些商场附近很多人吃的地方去吃，味道不错，价格也不算太贵40-50港币左右）</p>\n<p>14:00 地铁荃湾线到金钟再转港岛线到湾仔站，下地铁A3口出来对面就是招商永隆银行</p>\n<p>15:30 开始办卡</p>\n<p>17:30 地铁回深圳找同学聚餐</p>\n<p><strong>3月2日</strong></p>\n<p>跟好朋友在深圳游玩，晚上飞机回北京。</p>\n</blockquote>\n<h2 id=\"办卡经历\"><a href=\"#办卡经历\" class=\"headerlink\" title=\"办卡经历\"></a>办卡经历</h2><h3 id=\"信心满满\"><a href=\"#信心满满\" class=\"headerlink\" title=\"信心满满\"></a>信心满满</h3><p>因为之前有同事过来办过卡，分享了一些经历，自己也经过了周全的准备工作，感觉虽然是第一次来办，但是心里还是信心十足的。在地铁里面找了个银联ATM取款机，取了1200港币，准备坐车和激活银行卡，从湾仔站下来出地铁口对面便是香港招商永隆银行庄士敦道分行。</p>\n<p><img src=\"https://img.carlwe.com/IMG_8077.jpg\" alt=\"\"></p>\n<p>到了之后跟银行前台柜员进行沟通，当时没有人在办卡，但是还有15分钟才到预约时间，就被告知，需要先等一会儿，于是就在银行门口逛了下，按道理在内地银行，那肯定就直接开始给你办了。</p>\n<p>好吧，过了一会儿来到柜台前，银行柜员说可以开始办了，于是我就把需要的证件都逐一准备好，放在了桌子上。心想这些你们要的东西我都有了，这次应该问题不大。</p>\n<h3 id=\"瞧不起和故意刁难式的提问\"><a href=\"#瞧不起和故意刁难式的提问\" class=\"headerlink\" title=\"瞧不起和故意刁难式的提问\"></a>瞧不起和故意刁难式的提问</h3><p>首先一上来就柜员就说：在正式开始之前我们需要问你几个问题。能看出他皱起眉毛，带着一丝丝怀疑的眼光提问：</p>\n<blockquote>\n<p>柜员：首先我们想知道下，你办我们银行卡的目的是什么？</p>\n<p>我：你们指的目的有哪些呢（我想知道他们所说的目的包括哪些）？</p>\n<p>柜员：这个我不能告诉你。</p>\n<p>我（想了想）：旅游和储蓄（想起来之前同公司另一个同事讨论办香港银行卡，当时就提到问道办卡原因，都认为不能说投资，可能会被拒绝，而且之前在入金老虎证券的时候填写投资就很容易被拒绝）。</p>\n<p>柜员：就旅游和储蓄？那我们不能给你办理，我们觉得你的理由不够充分，旅游没有必要办香港银行卡，可以购汇过来也很方便，而且储蓄也不能称为理由，必须要有投资才能办理。</p>\n<p>我：其实我也会进行一些投资的。</p>\n<p>柜员：投资的话需要准备住址证明，工资流水等一些资料，你有准备吗？</p>\n<p>我：我有准备的，同时拿出了信用卡对账单，并把手机上工资卡的明细给他看了。</p>\n<p>柜员：你这个资料准备的都很充分，但是我们不能给你办理，因为你第一次没有说投资。</p>\n</blockquote>\n<p>然后跟他的交谈中明显感觉到这次是不可能办了，后面跟他说了各种想办的理由，他表示很同情，但是就是办不了，最后建议我下次再过来，或者找其他银行试试。</p>\n<h3 id=\"临时调整\"><a href=\"#临时调整\" class=\"headerlink\" title=\"临时调整\"></a>临时调整</h3><p>在进行了大概15分钟的交谈后，我无奈的走出了银行，心想如果当时说了投资就能直接办好了。但是也没有放弃，接着去找下一家香港永隆银行试试，第一次被高德地图给坑了，标注的永隆银行会展广场分行怎么都找不到，后来遇到了一个保安小哥，他拿起手机打开了谷歌地图（香港这边大多使用谷歌地图），给我看这个地方没有永隆银行，之前的撤销了。然后让我去铜锣湾附近的那个，好吧，看了下不远走过去，期间遇到了一家汇丰银行，过去问了下银行经理，说最少存款得20万，要不每月得收180港币的管理费，而且一副很瞧不起人的样子，直接走人。到了铜锣湾附近过去后询问当天是否可以办理，说需要先预约而且当天已经排满了，好吧，我就直接从永隆一点通App里面查当天其他可以预约的地方，结果附近银行今天已经预约满了。而且之前的预约记录已被取消😟。</p>\n<p><img src=\"https://img.carlwe.com/yonglong_bank.jpg\" alt=\"\"></p>\n<p>于是打电话问了下银行客服，客服说让我可以到店具体看下，有可能有空缺的，距离银行下班还有一小时，然后抱着试一试的心态，去了中环的这家永隆银行，去了之后柜员询问有没有预约，我说没有，然后他说今天已经约满，而且剩下的时间不够办理了，让我下次再来。</p>\n<p><img src=\"https://img.carlwe.com/IMG_4828.jpg\" alt=\"\"></p>\n<p>走出银行那一刻心想，今天是不可能了，以后有机会再来办。正好去地铁路上碰到对面的渣打银行，顺便进去问了下办卡条件，账户最少存15万港币免手续费。</p>\n<h3 id=\"回深圳吧\"><a href=\"#回深圳吧\" class=\"headerlink\" title=\"回深圳吧\"></a>回深圳吧</h3><p>出来之后天色渐暗，已经到了下午5点，约好7点在深圳聚餐，得回去啦。路上心想手里还有1200港币该如何处置，本想着回来之后找银行兑换了，但是在福田口岸过关的时候看了下手续费才10多快，就直接给兑换了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然这次没有办理成功，但还是挺有收获的，香港这边银行确实是很认真的，去了是什么就说什么就对了，而且千万不要想着贿赂银行的柜员，之前就有过例子，想要贿赂的人被抓走了。</p>\n<p>因为没有办理成功所以这篇文章的标题后面加了一个“上”，但内容不少，希望想亲自去香港办卡的朋友看了能够有更充分的准备，等我以后办好了再来分享下集。</p>"},{"title":"研发管理(一)从现状到Jira","date":"2022-03-07T08:57:00.000Z","_content":"\n![](https://img.carlwe.com/xs/jira_flow.webp)\n\n本系列文章主要是围绕Jira来介绍研发过程管理，文章会以实际使用目的为主线，以实际页面和功能为切入点介绍其背后的实现逻辑，大概分为以下四篇文章：\n\n<!--more-->\n\n* **研发管理（一）从现状到Jira**\n* 研发管理（二）Jira实现基本功能\n* 研发管理（三）从实际出发优化Jira使用\n* 研发管理（四）可用报表及项目管理\n\n### 背景\n\n开始还得从提升研发效能说起，所在公司的业务部门经常会觉得研发效率低，提出的需求往往过一两个月还不能上线。同时研发内部需要沟通和协调的人员及分工也比较多，例如产品、开发、UI、测试。每个环节都需要更好的衔接才能集体高效的产出，刚开始我们通过所有任务都上墙来让研发任务更加直观。\n\n#### 现有模式介绍\n\n![](https://img.carlwe.com/xs/minjie_kanban.jpg)\n\n**大卡片**：在一个版本的迭代中我们会有很多用户故事，每个用户故事我们会写到一个大的卡片上，标注好这个大卡片的提测时间，放在左侧栏，\n\n**小卡片**：每个用户故事里面会有前端、后端、测试相关的开发工作，每个人会写上自己的小纸条，写明开发内容，姓名，开发时间。\n\n**泳道**：分为代办，前端开发，后端开发，集成，测试和验收这几部分。同时里面又细分为正在做和完成的区别，\n\n**流程**：前后端开发完后，讲自己的卡片挪动到开发完成，发起联调的一方会讲开发完成的卡片挪动到集成中，进入集成，集成完之后挪动到集成完成，测试同学只关心集成完成的这一栏，由测试拖动到测试中，完成测试后移入测试完成，并交给产品验收，当大卡片中所有的任务都完成后，我们会放到Accepted一栏代表已经验收完成。\n\n**总结回顾**：一个版本我们预定为2周时间，每两周的版本完成后，我们会对这两周里面的需求、前后端开发、测试及上线问题组织所有相关同学进行敏捷回顾，在敏捷回顾会议上我们会列举出做的好的、不好的以及疑惑的地方，最后总结出下一个版本的todo list进行改进。\n\n![](https://img.carlwe.com/xs/scrum_review_small.jpg)\n\n#### 遇到的困难\n\n经过上述六七个版本的迭代之后，整个团队对于这套模式已比较熟悉，基本流程已经建立，但是但这种方式的缺点很明显，参与人过多时拖动不及时、任务多了不好放，历史记录不可追踪，统计困难等。\n\n#### 我们的诉求\n\n那么为了让大家的工作都更加可视化，可追踪，可量化，统计各个环节的等待，更好的实现上下游拉动式开发及问题解决，让每一步进展都实时在线，因此我们需要一个在线化的工具从线下的敏捷管理同步到线上实现以上的诉求，是时候介绍下Jira了。\n\n### 初识Jira\n\n为了解决上述问题，将线下的敏捷开发流程移动到线上，我们选择了Jira。\n\n#### 为什么选择Jira\n\n> 1. 大公司开发业界标杆\n> 2. 文档丰富社区成熟\n> 3. 项目管理、流程配置能做到可定制化\n> 4. 自定义过滤器、可定制的工作流、丰富的插件\n> 5. 团队有基础的同学较多，上手快\n> 6. 针对敏捷开发设计的Scrum看板\n\n#### Jira简介\n\n[Jira](https://www.atlassian.com/software/jira)是Atlassian公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域。Jira中配置灵活、功能全面、部署简单、扩展丰富，其超过150项特性得到了全球115个国家超过19,000家客户的认可。以上是百度中给出的介绍，让我们看看官网的介绍：\n\n> **敏捷团队的 首选软件开发工具，最优秀的软件团队交付频率高且速度快。Jira Software 专为软件团队中的每位成员构建，可用于规划、跟踪和发布卓越的软件。**\n\n可见Jira的实力以及在业界的认可度还是相当不错的，而且能够提供丰富的功能使得我们能够更好更灵活的使用。\n\n#### Jira主要功能\n\n**1.敏捷看板**\n\n![](https://img.carlwe.com/xs/jira_scrum.png)\n\n> 敏捷看板适合有版本节奏的开发项目，利用可自定义的 Scrum 板，敏捷团队可集中精力尽可能迅速地交付迭代和增量价值。\n\n**2.普通看板**\n\n![](https://img.carlwe.com/xs/jira_kanban.png)\n\n> 普通看板适用于没有固定版本节奏的项目。借助灵活的看板图，团队可以全面了解后续工作，从而让您可以在最短的加工时间内交付最大的输出。\n\n**3.线路图Roadmap**\n\n![](https://img.carlwe.com/xs/jira_roadmap.png)\n\n> 线路图可以更好的来规划中长期多个项目之间的开发及资源占用整体情况。与利益相关者沟通计划事宜，并确保路线图与团队的工作相关联，所有这些任务只需在 Jira Road Map 中点击几下即可完成。\n\n**4.Jira报告**\n\n![](https://img.carlwe.com/xs/jira_report.png)\n\n> 利用Jira报告我们可以很方便的进行当前项目进度信息的查看，例如燃耗图、累计流量图、控制图、版本报告等。\n\n**5.缺陷管理和代码关联**\n\n除了上述功能外，Jira通常被大家用来做缺陷管理。其内部有默认的缺陷管理流程，开箱即用。同时看板的任务和代码提交记录可以很好的进行关联。\n\n### 总结\n\n有了对Jira的初步了解，我们就可以着手开始利用Jira来配置我们现有的流程了，并在现有流程上利用Jira一些好用的功能，发现问题并提升现有流程的效率，下一遍文章，我们会利用Jira来模拟搭建现有的流程，将现有的线下流程搬到线上来运行。\n","source":"_posts/研发管理-一-从现状到JIRA.md","raw":"---\ntitle: 研发管理(一)从现状到Jira\ndate: 2022-03-07 16:57:00\ntags: Jira\n---\n\n![](https://img.carlwe.com/xs/jira_flow.webp)\n\n本系列文章主要是围绕Jira来介绍研发过程管理，文章会以实际使用目的为主线，以实际页面和功能为切入点介绍其背后的实现逻辑，大概分为以下四篇文章：\n\n<!--more-->\n\n* **研发管理（一）从现状到Jira**\n* 研发管理（二）Jira实现基本功能\n* 研发管理（三）从实际出发优化Jira使用\n* 研发管理（四）可用报表及项目管理\n\n### 背景\n\n开始还得从提升研发效能说起，所在公司的业务部门经常会觉得研发效率低，提出的需求往往过一两个月还不能上线。同时研发内部需要沟通和协调的人员及分工也比较多，例如产品、开发、UI、测试。每个环节都需要更好的衔接才能集体高效的产出，刚开始我们通过所有任务都上墙来让研发任务更加直观。\n\n#### 现有模式介绍\n\n![](https://img.carlwe.com/xs/minjie_kanban.jpg)\n\n**大卡片**：在一个版本的迭代中我们会有很多用户故事，每个用户故事我们会写到一个大的卡片上，标注好这个大卡片的提测时间，放在左侧栏，\n\n**小卡片**：每个用户故事里面会有前端、后端、测试相关的开发工作，每个人会写上自己的小纸条，写明开发内容，姓名，开发时间。\n\n**泳道**：分为代办，前端开发，后端开发，集成，测试和验收这几部分。同时里面又细分为正在做和完成的区别，\n\n**流程**：前后端开发完后，讲自己的卡片挪动到开发完成，发起联调的一方会讲开发完成的卡片挪动到集成中，进入集成，集成完之后挪动到集成完成，测试同学只关心集成完成的这一栏，由测试拖动到测试中，完成测试后移入测试完成，并交给产品验收，当大卡片中所有的任务都完成后，我们会放到Accepted一栏代表已经验收完成。\n\n**总结回顾**：一个版本我们预定为2周时间，每两周的版本完成后，我们会对这两周里面的需求、前后端开发、测试及上线问题组织所有相关同学进行敏捷回顾，在敏捷回顾会议上我们会列举出做的好的、不好的以及疑惑的地方，最后总结出下一个版本的todo list进行改进。\n\n![](https://img.carlwe.com/xs/scrum_review_small.jpg)\n\n#### 遇到的困难\n\n经过上述六七个版本的迭代之后，整个团队对于这套模式已比较熟悉，基本流程已经建立，但是但这种方式的缺点很明显，参与人过多时拖动不及时、任务多了不好放，历史记录不可追踪，统计困难等。\n\n#### 我们的诉求\n\n那么为了让大家的工作都更加可视化，可追踪，可量化，统计各个环节的等待，更好的实现上下游拉动式开发及问题解决，让每一步进展都实时在线，因此我们需要一个在线化的工具从线下的敏捷管理同步到线上实现以上的诉求，是时候介绍下Jira了。\n\n### 初识Jira\n\n为了解决上述问题，将线下的敏捷开发流程移动到线上，我们选择了Jira。\n\n#### 为什么选择Jira\n\n> 1. 大公司开发业界标杆\n> 2. 文档丰富社区成熟\n> 3. 项目管理、流程配置能做到可定制化\n> 4. 自定义过滤器、可定制的工作流、丰富的插件\n> 5. 团队有基础的同学较多，上手快\n> 6. 针对敏捷开发设计的Scrum看板\n\n#### Jira简介\n\n[Jira](https://www.atlassian.com/software/jira)是Atlassian公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域。Jira中配置灵活、功能全面、部署简单、扩展丰富，其超过150项特性得到了全球115个国家超过19,000家客户的认可。以上是百度中给出的介绍，让我们看看官网的介绍：\n\n> **敏捷团队的 首选软件开发工具，最优秀的软件团队交付频率高且速度快。Jira Software 专为软件团队中的每位成员构建，可用于规划、跟踪和发布卓越的软件。**\n\n可见Jira的实力以及在业界的认可度还是相当不错的，而且能够提供丰富的功能使得我们能够更好更灵活的使用。\n\n#### Jira主要功能\n\n**1.敏捷看板**\n\n![](https://img.carlwe.com/xs/jira_scrum.png)\n\n> 敏捷看板适合有版本节奏的开发项目，利用可自定义的 Scrum 板，敏捷团队可集中精力尽可能迅速地交付迭代和增量价值。\n\n**2.普通看板**\n\n![](https://img.carlwe.com/xs/jira_kanban.png)\n\n> 普通看板适用于没有固定版本节奏的项目。借助灵活的看板图，团队可以全面了解后续工作，从而让您可以在最短的加工时间内交付最大的输出。\n\n**3.线路图Roadmap**\n\n![](https://img.carlwe.com/xs/jira_roadmap.png)\n\n> 线路图可以更好的来规划中长期多个项目之间的开发及资源占用整体情况。与利益相关者沟通计划事宜，并确保路线图与团队的工作相关联，所有这些任务只需在 Jira Road Map 中点击几下即可完成。\n\n**4.Jira报告**\n\n![](https://img.carlwe.com/xs/jira_report.png)\n\n> 利用Jira报告我们可以很方便的进行当前项目进度信息的查看，例如燃耗图、累计流量图、控制图、版本报告等。\n\n**5.缺陷管理和代码关联**\n\n除了上述功能外，Jira通常被大家用来做缺陷管理。其内部有默认的缺陷管理流程，开箱即用。同时看板的任务和代码提交记录可以很好的进行关联。\n\n### 总结\n\n有了对Jira的初步了解，我们就可以着手开始利用Jira来配置我们现有的流程了，并在现有流程上利用Jira一些好用的功能，发现问题并提升现有流程的效率，下一遍文章，我们会利用Jira来模拟搭建现有的流程，将现有的线下流程搬到线上来运行。\n","slug":"研发管理-一-从现状到JIRA","published":1,"updated":"2022-04-06T08:49:12.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2tpdnpj001gt57s4o8viep0","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><img src=\"https://img.carlwe.com/xs/jira_flow.webp\" alt=\"\"></p>\n<p>本系列文章主要是围绕Jira来介绍研发过程管理，文章会以实际使用目的为主线，以实际页面和功能为切入点介绍其背后的实现逻辑，大概分为以下四篇文章：</p>\n<a id=\"more\"></a>\n<ul>\n<li><strong>研发管理（一）从现状到Jira</strong></li>\n<li>研发管理（二）Jira实现基本功能</li>\n<li>研发管理（三）从实际出发优化Jira使用</li>\n<li>研发管理（四）可用报表及项目管理</li>\n</ul>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>开始还得从提升研发效能说起，所在公司的业务部门经常会觉得研发效率低，提出的需求往往过一两个月还不能上线。同时研发内部需要沟通和协调的人员及分工也比较多，例如产品、开发、UI、测试。每个环节都需要更好的衔接才能集体高效的产出，刚开始我们通过所有任务都上墙来让研发任务更加直观。</p>\n<h4 id=\"现有模式介绍\"><a href=\"#现有模式介绍\" class=\"headerlink\" title=\"现有模式介绍\"></a>现有模式介绍</h4><p><img src=\"https://img.carlwe.com/xs/minjie_kanban.jpg\" alt=\"\"></p>\n<p><strong>大卡片</strong>：在一个版本的迭代中我们会有很多用户故事，每个用户故事我们会写到一个大的卡片上，标注好这个大卡片的提测时间，放在左侧栏，</p>\n<p><strong>小卡片</strong>：每个用户故事里面会有前端、后端、测试相关的开发工作，每个人会写上自己的小纸条，写明开发内容，姓名，开发时间。</p>\n<p><strong>泳道</strong>：分为代办，前端开发，后端开发，集成，测试和验收这几部分。同时里面又细分为正在做和完成的区别，</p>\n<p><strong>流程</strong>：前后端开发完后，讲自己的卡片挪动到开发完成，发起联调的一方会讲开发完成的卡片挪动到集成中，进入集成，集成完之后挪动到集成完成，测试同学只关心集成完成的这一栏，由测试拖动到测试中，完成测试后移入测试完成，并交给产品验收，当大卡片中所有的任务都完成后，我们会放到Accepted一栏代表已经验收完成。</p>\n<p><strong>总结回顾</strong>：一个版本我们预定为2周时间，每两周的版本完成后，我们会对这两周里面的需求、前后端开发、测试及上线问题组织所有相关同学进行敏捷回顾，在敏捷回顾会议上我们会列举出做的好的、不好的以及疑惑的地方，最后总结出下一个版本的todo list进行改进。</p>\n<p><img src=\"https://img.carlwe.com/xs/scrum_review_small.jpg\" alt=\"\"></p>\n<h4 id=\"遇到的困难\"><a href=\"#遇到的困难\" class=\"headerlink\" title=\"遇到的困难\"></a>遇到的困难</h4><p>经过上述六七个版本的迭代之后，整个团队对于这套模式已比较熟悉，基本流程已经建立，但是但这种方式的缺点很明显，参与人过多时拖动不及时、任务多了不好放，历史记录不可追踪，统计困难等。</p>\n<h4 id=\"我们的诉求\"><a href=\"#我们的诉求\" class=\"headerlink\" title=\"我们的诉求\"></a>我们的诉求</h4><p>那么为了让大家的工作都更加可视化，可追踪，可量化，统计各个环节的等待，更好的实现上下游拉动式开发及问题解决，让每一步进展都实时在线，因此我们需要一个在线化的工具从线下的敏捷管理同步到线上实现以上的诉求，是时候介绍下Jira了。</p>\n<h3 id=\"初识Jira\"><a href=\"#初识Jira\" class=\"headerlink\" title=\"初识Jira\"></a>初识Jira</h3><p>为了解决上述问题，将线下的敏捷开发流程移动到线上，我们选择了Jira。</p>\n<h4 id=\"为什么选择Jira\"><a href=\"#为什么选择Jira\" class=\"headerlink\" title=\"为什么选择Jira\"></a>为什么选择Jira</h4><blockquote>\n<ol>\n<li>大公司开发业界标杆</li>\n<li>文档丰富社区成熟</li>\n<li>项目管理、流程配置能做到可定制化</li>\n<li>自定义过滤器、可定制的工作流、丰富的插件</li>\n<li>团队有基础的同学较多，上手快</li>\n<li>针对敏捷开发设计的Scrum看板</li>\n</ol>\n</blockquote>\n<h4 id=\"Jira简介\"><a href=\"#Jira简介\" class=\"headerlink\" title=\"Jira简介\"></a>Jira简介</h4><p><a href=\"https://www.atlassian.com/software/jira\" target=\"_blank\" rel=\"noopener\">Jira</a>是Atlassian公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域。Jira中配置灵活、功能全面、部署简单、扩展丰富，其超过150项特性得到了全球115个国家超过19,000家客户的认可。以上是百度中给出的介绍，让我们看看官网的介绍：</p>\n<blockquote>\n<p><strong>敏捷团队的 首选软件开发工具，最优秀的软件团队交付频率高且速度快。Jira Software 专为软件团队中的每位成员构建，可用于规划、跟踪和发布卓越的软件。</strong></p>\n</blockquote>\n<p>可见Jira的实力以及在业界的认可度还是相当不错的，而且能够提供丰富的功能使得我们能够更好更灵活的使用。</p>\n<h4 id=\"Jira主要功能\"><a href=\"#Jira主要功能\" class=\"headerlink\" title=\"Jira主要功能\"></a>Jira主要功能</h4><p><strong>1.敏捷看板</strong></p>\n<p><img src=\"https://img.carlwe.com/xs/jira_scrum.png\" alt=\"\"></p>\n<blockquote>\n<p>敏捷看板适合有版本节奏的开发项目，利用可自定义的 Scrum 板，敏捷团队可集中精力尽可能迅速地交付迭代和增量价值。</p>\n</blockquote>\n<p><strong>2.普通看板</strong></p>\n<p><img src=\"https://img.carlwe.com/xs/jira_kanban.png\" alt=\"\"></p>\n<blockquote>\n<p>普通看板适用于没有固定版本节奏的项目。借助灵活的看板图，团队可以全面了解后续工作，从而让您可以在最短的加工时间内交付最大的输出。</p>\n</blockquote>\n<p><strong>3.线路图Roadmap</strong></p>\n<p><img src=\"https://img.carlwe.com/xs/jira_roadmap.png\" alt=\"\"></p>\n<blockquote>\n<p>线路图可以更好的来规划中长期多个项目之间的开发及资源占用整体情况。与利益相关者沟通计划事宜，并确保路线图与团队的工作相关联，所有这些任务只需在 Jira Road Map 中点击几下即可完成。</p>\n</blockquote>\n<p><strong>4.Jira报告</strong></p>\n<p><img src=\"https://img.carlwe.com/xs/jira_report.png\" alt=\"\"></p>\n<blockquote>\n<p>利用Jira报告我们可以很方便的进行当前项目进度信息的查看，例如燃耗图、累计流量图、控制图、版本报告等。</p>\n</blockquote>\n<p><strong>5.缺陷管理和代码关联</strong></p>\n<p>除了上述功能外，Jira通常被大家用来做缺陷管理。其内部有默认的缺陷管理流程，开箱即用。同时看板的任务和代码提交记录可以很好的进行关联。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>有了对Jira的初步了解，我们就可以着手开始利用Jira来配置我们现有的流程了，并在现有流程上利用Jira一些好用的功能，发现问题并提升现有流程的效率，下一遍文章，我们会利用Jira来模拟搭建现有的流程，将现有的线下流程搬到线上来运行。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://img.carlwe.com/xs/jira_flow.webp\" alt=\"\"></p>\n<p>本系列文章主要是围绕Jira来介绍研发过程管理，文章会以实际使用目的为主线，以实际页面和功能为切入点介绍其背后的实现逻辑，大概分为以下四篇文章：</p>","more":"<ul>\n<li><strong>研发管理（一）从现状到Jira</strong></li>\n<li>研发管理（二）Jira实现基本功能</li>\n<li>研发管理（三）从实际出发优化Jira使用</li>\n<li>研发管理（四）可用报表及项目管理</li>\n</ul>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>开始还得从提升研发效能说起，所在公司的业务部门经常会觉得研发效率低，提出的需求往往过一两个月还不能上线。同时研发内部需要沟通和协调的人员及分工也比较多，例如产品、开发、UI、测试。每个环节都需要更好的衔接才能集体高效的产出，刚开始我们通过所有任务都上墙来让研发任务更加直观。</p>\n<h4 id=\"现有模式介绍\"><a href=\"#现有模式介绍\" class=\"headerlink\" title=\"现有模式介绍\"></a>现有模式介绍</h4><p><img src=\"https://img.carlwe.com/xs/minjie_kanban.jpg\" alt=\"\"></p>\n<p><strong>大卡片</strong>：在一个版本的迭代中我们会有很多用户故事，每个用户故事我们会写到一个大的卡片上，标注好这个大卡片的提测时间，放在左侧栏，</p>\n<p><strong>小卡片</strong>：每个用户故事里面会有前端、后端、测试相关的开发工作，每个人会写上自己的小纸条，写明开发内容，姓名，开发时间。</p>\n<p><strong>泳道</strong>：分为代办，前端开发，后端开发，集成，测试和验收这几部分。同时里面又细分为正在做和完成的区别，</p>\n<p><strong>流程</strong>：前后端开发完后，讲自己的卡片挪动到开发完成，发起联调的一方会讲开发完成的卡片挪动到集成中，进入集成，集成完之后挪动到集成完成，测试同学只关心集成完成的这一栏，由测试拖动到测试中，完成测试后移入测试完成，并交给产品验收，当大卡片中所有的任务都完成后，我们会放到Accepted一栏代表已经验收完成。</p>\n<p><strong>总结回顾</strong>：一个版本我们预定为2周时间，每两周的版本完成后，我们会对这两周里面的需求、前后端开发、测试及上线问题组织所有相关同学进行敏捷回顾，在敏捷回顾会议上我们会列举出做的好的、不好的以及疑惑的地方，最后总结出下一个版本的todo list进行改进。</p>\n<p><img src=\"https://img.carlwe.com/xs/scrum_review_small.jpg\" alt=\"\"></p>\n<h4 id=\"遇到的困难\"><a href=\"#遇到的困难\" class=\"headerlink\" title=\"遇到的困难\"></a>遇到的困难</h4><p>经过上述六七个版本的迭代之后，整个团队对于这套模式已比较熟悉，基本流程已经建立，但是但这种方式的缺点很明显，参与人过多时拖动不及时、任务多了不好放，历史记录不可追踪，统计困难等。</p>\n<h4 id=\"我们的诉求\"><a href=\"#我们的诉求\" class=\"headerlink\" title=\"我们的诉求\"></a>我们的诉求</h4><p>那么为了让大家的工作都更加可视化，可追踪，可量化，统计各个环节的等待，更好的实现上下游拉动式开发及问题解决，让每一步进展都实时在线，因此我们需要一个在线化的工具从线下的敏捷管理同步到线上实现以上的诉求，是时候介绍下Jira了。</p>\n<h3 id=\"初识Jira\"><a href=\"#初识Jira\" class=\"headerlink\" title=\"初识Jira\"></a>初识Jira</h3><p>为了解决上述问题，将线下的敏捷开发流程移动到线上，我们选择了Jira。</p>\n<h4 id=\"为什么选择Jira\"><a href=\"#为什么选择Jira\" class=\"headerlink\" title=\"为什么选择Jira\"></a>为什么选择Jira</h4><blockquote>\n<ol>\n<li>大公司开发业界标杆</li>\n<li>文档丰富社区成熟</li>\n<li>项目管理、流程配置能做到可定制化</li>\n<li>自定义过滤器、可定制的工作流、丰富的插件</li>\n<li>团队有基础的同学较多，上手快</li>\n<li>针对敏捷开发设计的Scrum看板</li>\n</ol>\n</blockquote>\n<h4 id=\"Jira简介\"><a href=\"#Jira简介\" class=\"headerlink\" title=\"Jira简介\"></a>Jira简介</h4><p><a href=\"https://www.atlassian.com/software/jira\" target=\"_blank\" rel=\"noopener\">Jira</a>是Atlassian公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域。Jira中配置灵活、功能全面、部署简单、扩展丰富，其超过150项特性得到了全球115个国家超过19,000家客户的认可。以上是百度中给出的介绍，让我们看看官网的介绍：</p>\n<blockquote>\n<p><strong>敏捷团队的 首选软件开发工具，最优秀的软件团队交付频率高且速度快。Jira Software 专为软件团队中的每位成员构建，可用于规划、跟踪和发布卓越的软件。</strong></p>\n</blockquote>\n<p>可见Jira的实力以及在业界的认可度还是相当不错的，而且能够提供丰富的功能使得我们能够更好更灵活的使用。</p>\n<h4 id=\"Jira主要功能\"><a href=\"#Jira主要功能\" class=\"headerlink\" title=\"Jira主要功能\"></a>Jira主要功能</h4><p><strong>1.敏捷看板</strong></p>\n<p><img src=\"https://img.carlwe.com/xs/jira_scrum.png\" alt=\"\"></p>\n<blockquote>\n<p>敏捷看板适合有版本节奏的开发项目，利用可自定义的 Scrum 板，敏捷团队可集中精力尽可能迅速地交付迭代和增量价值。</p>\n</blockquote>\n<p><strong>2.普通看板</strong></p>\n<p><img src=\"https://img.carlwe.com/xs/jira_kanban.png\" alt=\"\"></p>\n<blockquote>\n<p>普通看板适用于没有固定版本节奏的项目。借助灵活的看板图，团队可以全面了解后续工作，从而让您可以在最短的加工时间内交付最大的输出。</p>\n</blockquote>\n<p><strong>3.线路图Roadmap</strong></p>\n<p><img src=\"https://img.carlwe.com/xs/jira_roadmap.png\" alt=\"\"></p>\n<blockquote>\n<p>线路图可以更好的来规划中长期多个项目之间的开发及资源占用整体情况。与利益相关者沟通计划事宜，并确保路线图与团队的工作相关联，所有这些任务只需在 Jira Road Map 中点击几下即可完成。</p>\n</blockquote>\n<p><strong>4.Jira报告</strong></p>\n<p><img src=\"https://img.carlwe.com/xs/jira_report.png\" alt=\"\"></p>\n<blockquote>\n<p>利用Jira报告我们可以很方便的进行当前项目进度信息的查看，例如燃耗图、累计流量图、控制图、版本报告等。</p>\n</blockquote>\n<p><strong>5.缺陷管理和代码关联</strong></p>\n<p>除了上述功能外，Jira通常被大家用来做缺陷管理。其内部有默认的缺陷管理流程，开箱即用。同时看板的任务和代码提交记录可以很好的进行关联。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>有了对Jira的初步了解，我们就可以着手开始利用Jira来配置我们现有的流程了，并在现有流程上利用Jira一些好用的功能，发现问题并提升现有流程的效率，下一遍文章，我们会利用Jira来模拟搭建现有的流程，将现有的线下流程搬到线上来运行。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl2tpdnon0001t57ssoxjur2b","tag_id":"cl2tpdnos0003t57sbamv1hky","_id":"cl2tpdnoz0008t57sc3q3phyh"},{"post_id":"cl2tpdnox0006t57sgnx7smhp","tag_id":"cl2tpdnos0003t57sbamv1hky","_id":"cl2tpdnp0000at57sujuxyqfn"},{"post_id":"cl2tpdnop0002t57sblvm84rf","tag_id":"cl2tpdnos0003t57sbamv1hky","_id":"cl2tpdnp1000dt57s64cq5i2w"},{"post_id":"cl2tpdnp1000et57sos56eqna","tag_id":"cl2tpdnp1000ct57sbsyv5rt9","_id":"cl2tpdnp4000ht57s73gaimww"},{"post_id":"cl2tpdnou0004t57sr8ud81hf","tag_id":"cl2tpdnp1000ct57sbsyv5rt9","_id":"cl2tpdnp6000jt57sbltjodsp"},{"post_id":"cl2tpdnp3000ft57sp7uo538g","tag_id":"cl2tpdnp1000ct57sbsyv5rt9","_id":"cl2tpdnp7000mt57s8cq378kp"},{"post_id":"cl2tpdnow0005t57sf7igei5h","tag_id":"cl2tpdnp1000ct57sbsyv5rt9","_id":"cl2tpdnp8000ot57stvfx87gn"},{"post_id":"cl2tpdnp6000kt57sgmgs0umu","tag_id":"cl2tpdnp1000ct57sbsyv5rt9","_id":"cl2tpdnp9000rt57sojzjnpfr"},{"post_id":"cl2tpdnoz0009t57sfzaoyhg9","tag_id":"cl2tpdnp1000ct57sbsyv5rt9","_id":"cl2tpdnpa000tt57smpionibs"},{"post_id":"cl2tpdnp8000pt57s51dqgtj5","tag_id":"cl2tpdnos0003t57sbamv1hky","_id":"cl2tpdnpb000wt57sh65aldug"},{"post_id":"cl2tpdnp0000bt57s74mkxtqd","tag_id":"cl2tpdnp1000ct57sbsyv5rt9","_id":"cl2tpdnpc000yt57s7muu3sb6"},{"post_id":"cl2tpdnp5000it57s12o8080w","tag_id":"cl2tpdnpb000vt57s5ds8lxa3","_id":"cl2tpdnpd0012t57stzs1pft3"},{"post_id":"cl2tpdnpd0011t57s9zlbvx2e","tag_id":"cl2tpdnos0003t57sbamv1hky","_id":"cl2tpdnpe0014t57sosm5spkg"},{"post_id":"cl2tpdnp7000nt57s0ezb1196","tag_id":"cl2tpdnpc0010t57svewr23uz","_id":"cl2tpdnpf0017t57sayy9g2w6"},{"post_id":"cl2tpdnpe0016t57sjqgnurko","tag_id":"cl2tpdnp1000ct57sbsyv5rt9","_id":"cl2tpdnph0019t57sfl71cpfb"},{"post_id":"cl2tpdnp9000st57sdp3w87q2","tag_id":"cl2tpdnpc0010t57svewr23uz","_id":"cl2tpdnpi001ct57sjc3c5542"},{"post_id":"cl2tpdnpg0018t57sy030c26u","tag_id":"cl2tpdnpb000vt57s5ds8lxa3","_id":"cl2tpdnpj001et57slgl7zh7q"},{"post_id":"cl2tpdnph001bt57spzkoxngi","tag_id":"cl2tpdnpc0010t57svewr23uz","_id":"cl2tpdnpk001ht57shuax3d69"},{"post_id":"cl2tpdnpa000ut57sxwcu1uwq","tag_id":"cl2tpdnpb000vt57s5ds8lxa3","_id":"cl2tpdnpl001it57sfa00vt6m"},{"post_id":"cl2tpdnpi001dt57sx2mg3k8i","tag_id":"cl2tpdnos0003t57sbamv1hky","_id":"cl2tpdnpl001kt57sbj7zopdl"},{"post_id":"cl2tpdnpb000xt57s5ugwwusy","tag_id":"cl2tpdnpc0010t57svewr23uz","_id":"cl2tpdnpl001lt57srxc6zrop"},{"post_id":"cl2tpdnpc000zt57sixn16hep","tag_id":"cl2tpdnpc0010t57svewr23uz","_id":"cl2tpdnpm001nt57svww0szqj"},{"post_id":"cl2tpdnpd0013t57snhe6nn2z","tag_id":"cl2tpdnpl001mt57sproimlam","_id":"cl2tpdnpm001pt57skv444394"},{"post_id":"cl2tpdnpj001gt57s4o8viep0","tag_id":"cl2tpdnpl001mt57sproimlam","_id":"cl2tpdnpn001qt57shsairdiu"}],"Tag":[{"name":"生活","_id":"cl2tpdnos0003t57sbamv1hky"},{"name":"技术","_id":"cl2tpdnp1000ct57sbsyv5rt9"},{"name":"科技","_id":"cl2tpdnpb000vt57s5ds8lxa3"},{"name":"摄影","_id":"cl2tpdnpc0010t57svewr23uz"},{"name":"Jira","_id":"cl2tpdnpl001mt57sproimlam"}]}}